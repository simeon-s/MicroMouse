
MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002544  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ba8c  0800ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  0800ba94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a6c  200000c0  0800bb54  000200c0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b2c  0800bb54  00020b2c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00038bb0  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005a12  00000000  00000000  00058ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001628  00000000  00000000  0005e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003170  00000000  00000000  0005fce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000213b5  00000000  00000000  00062e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a633  00000000  00000000  00084205  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000c293f  00000000  00000000  0009e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00161177  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ff4  00000000  00000000  001611f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0001956f  00000000  00000000  001661e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009530 	.word	0x08009530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08009530 	.word	0x08009530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_InitTick+0x40>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b90b      	cbnz	r3, 8000c28 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c28:	490d      	ldr	r1, [pc, #52]	; (8000c60 <HAL_InitTick+0x44>)
 8000c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c2e:	4605      	mov	r5, r0
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	6808      	ldr	r0, [r1, #0]
 8000c36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c3a:	f000 fdaf 	bl	800179c <HAL_SYSTICK_Config>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d1ef      	bne.n	8000c24 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	2d0f      	cmp	r5, #15
 8000c46:	d8ed      	bhi.n	8000c24 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f000 fd4e 	bl	80016f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_InitTick+0x48>)
 8000c56:	4620      	mov	r0, r4
 8000c58:	601d      	str	r5, [r3, #0]
}
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000058 	.word	0x20000058
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_Init>:
{
 8000c68:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
{
 8000c6c:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6e:	f000 fd2d 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ffd2 	bl	8000c1c <HAL_InitTick>
 8000c78:	b118      	cbz	r0, 8000c82 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8000c7a:	2001      	movs	r0, #1
}
 8000c7c:	b003      	add	sp, #12
 8000c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c82:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8000c84:	f007 fb06 	bl	8008294 <HAL_MspInit>
 8000c88:	9801      	ldr	r0, [sp, #4]
}
 8000c8a:	b003      	add	sp, #12
 8000c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08000c90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c90:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <HAL_IncTick+0x10>)
 8000c92:	4904      	ldr	r1, [pc, #16]	; (8000ca4 <HAL_IncTick+0x14>)
 8000c94:	6813      	ldr	r3, [r2, #0]
 8000c96:	6809      	ldr	r1, [r1, #0]
 8000c98:	440b      	add	r3, r1
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200001a4 	.word	0x200001a4
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ca8:	4b01      	ldr	r3, [pc, #4]	; (8000cb0 <HAL_GetTick+0x8>)
 8000caa:	6818      	ldr	r0, [r3, #0]
}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200001a4 	.word	0x200001a4

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff6 	bl	8000ca8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000cbe:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_Delay+0x20>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	1b40      	subs	r0, r0, r5
 8000cce:	42a0      	cmp	r0, r4
 8000cd0:	d3fa      	bcc.n	8000cc8 <HAL_Delay+0x14>
  {
  }
}
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	f000 8099 	beq.w	8000e18 <HAL_ADC_Init+0x140>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000ce8:	4604      	mov	r4, r0
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 8089 	beq.w	8000e02 <HAL_ADC_Init+0x12a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cf0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cf2:	6893      	ldr	r3, [r2, #8]
 8000cf4:	009d      	lsls	r5, r3, #2
 8000cf6:	d505      	bpl.n	8000d04 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cf8:	6893      	ldr	r3, [r2, #8]
 8000cfa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000cfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d02:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d04:	6893      	ldr	r3, [r2, #8]
 8000d06:	00d8      	lsls	r0, r3, #3
 8000d08:	d417      	bmi.n	8000d3a <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000d0a:	4b63      	ldr	r3, [pc, #396]	; (8000e98 <HAL_ADC_Init+0x1c0>)
  MODIFY_REG(ADCx->CR,
 8000d0c:	6891      	ldr	r1, [r2, #8]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4862      	ldr	r0, [pc, #392]	; (8000e9c <HAL_ADC_Init+0x1c4>)
 8000d12:	099b      	lsrs	r3, r3, #6
 8000d14:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000d18:	fba0 0303 	umull	r0, r3, r0, r3
 8000d1c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000d20:	099b      	lsrs	r3, r3, #6
 8000d22:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d26:	6091      	str	r1, [r2, #8]
 8000d28:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d2a:	9b01      	ldr	r3, [sp, #4]
 8000d2c:	b12b      	cbz	r3, 8000d3a <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d34:	9b01      	ldr	r3, [sp, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f9      	bne.n	8000d2e <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d3a:	6893      	ldr	r3, [r2, #8]
 8000d3c:	00d9      	lsls	r1, r3, #3
 8000d3e:	d452      	bmi.n	8000de6 <HAL_ADC_Init+0x10e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	65a3      	str	r3, [r4, #88]	; 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d50:	6893      	ldr	r3, [r2, #8]
 8000d52:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8000d56:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d5c:	d14a      	bne.n	8000df4 <HAL_ADC_Init+0x11c>
 8000d5e:	06db      	lsls	r3, r3, #27
 8000d60:	d448      	bmi.n	8000df4 <HAL_ADC_Init+0x11c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d6e:	6893      	ldr	r3, [r2, #8]
 8000d70:	07de      	lsls	r6, r3, #31
 8000d72:	d407      	bmi.n	8000d84 <HAL_ADC_Init+0xac>
 8000d74:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <HAL_ADC_Init+0x1c8>)
 8000d76:	494b      	ldr	r1, [pc, #300]	; (8000ea4 <HAL_ADC_Init+0x1cc>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	6889      	ldr	r1, [r1, #8]
 8000d7c:	07cd      	lsls	r5, r1, #31
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	d56d      	bpl.n	8000e60 <HAL_ADC_Init+0x188>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000d84:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8000d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d8e:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d90:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000d94:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d98:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9e:	d103      	bne.n	8000da8 <HAL_ADC_Init+0xd0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000da0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000da2:	3901      	subs	r1, #1
 8000da4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000da8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000daa:	b121      	cbz	r1, 8000db6 <HAL_ADC_Init+0xde>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000dac:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dae:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000db2:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000db4:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000db6:	68d5      	ldr	r5, [r2, #12]
 8000db8:	493b      	ldr	r1, [pc, #236]	; (8000ea8 <HAL_ADC_Init+0x1d0>)
 8000dba:	4029      	ands	r1, r5
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dc0:	6893      	ldr	r3, [r2, #8]
 8000dc2:	0759      	lsls	r1, r3, #29
 8000dc4:	d52b      	bpl.n	8000e1e <HAL_ADC_Init+0x146>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dc6:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dc8:	6923      	ldr	r3, [r4, #16]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d040      	beq.n	8000e50 <HAL_ADC_Init+0x178>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd0:	f023 030f 	bic.w	r3, r3, #15
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000dd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dd8:	f023 0303 	bic.w	r3, r3, #3
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000de2:	b002      	add	sp, #8
 8000de4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dec:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000df2:	d0b4      	beq.n	8000d5e <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000df6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000e02:	f007 fa5f 	bl	80082c4 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e06:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e0a:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8000e0c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000e10:	009d      	lsls	r5, r3, #2
 8000e12:	f57f af77 	bpl.w	8000d04 <HAL_ADC_Init+0x2c>
 8000e16:	e76f      	b.n	8000cf8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8000e18:	2001      	movs	r0, #1
}
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e1e:	6893      	ldr	r3, [r2, #8]
 8000e20:	071b      	lsls	r3, r3, #28
 8000e22:	d4d1      	bmi.n	8000dc8 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e24:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e26:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e2a:	7e26      	ldrb	r6, [r4, #24]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e2c:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e30:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e34:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e36:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e3a:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e3e:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e40:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e42:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e44:	d016      	beq.n	8000e74 <HAL_ADC_Init+0x19c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e46:	6913      	ldr	r3, [r2, #16]
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6113      	str	r3, [r2, #16]
 8000e4e:	e7bb      	b.n	8000dc8 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e50:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e52:	69e3      	ldr	r3, [r4, #28]
 8000e54:	f021 010f 	bic.w	r1, r1, #15
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	e7ba      	b.n	8000dd6 <HAL_ADC_Init+0xfe>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d18f      	bne.n	8000d84 <HAL_ADC_Init+0xac>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e64:	4911      	ldr	r1, [pc, #68]	; (8000eac <HAL_ADC_Init+0x1d4>)
 8000e66:	6865      	ldr	r5, [r4, #4]
 8000e68:	688b      	ldr	r3, [r1, #8]
 8000e6a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000e6e:	432b      	orrs	r3, r5
 8000e70:	608b      	str	r3, [r1, #8]
 8000e72:	e787      	b.n	8000d84 <HAL_ADC_Init+0xac>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e74:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8000e78:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000e7a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6911      	ldr	r1, [r2, #16]
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	4333      	orrs	r3, r6
 8000e86:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8000e8a:	432b      	orrs	r3, r5
 8000e8c:	f021 0104 	bic.w	r1, r1, #4
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6113      	str	r3, [r2, #16]
 8000e94:	e798      	b.n	8000dc8 <HAL_ADC_Init+0xf0>
 8000e96:	bf00      	nop
 8000e98:	20000058 	.word	0x20000058
 8000e9c:	053e2d63 	.word	0x053e2d63
 8000ea0:	50040000 	.word	0x50040000
 8000ea4:	50040100 	.word	0x50040100
 8000ea8:	fff0c007 	.word	0xfff0c007
 8000eac:	50040300 	.word	0x50040300

08000eb0 <HAL_ADC_ConvHalfCpltCallback>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000eb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000eb8:	f7ff fffa 	bl	8000eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	bf00      	nop

08000ec0 <HAL_ADC_ErrorCallback>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ec4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000ec6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000ec8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000ecc:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000ed0:	d11d      	bne.n	8000f0e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000ed2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ed8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000eda:	680a      	ldr	r2, [r1, #0]
 8000edc:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee0:	68ca      	ldr	r2, [r1, #12]
 8000ee2:	d01b      	beq.n	8000f1c <ADC_DMAConvCplt+0x58>
 8000ee4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000ee8:	d10d      	bne.n	8000f06 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000eea:	68ca      	ldr	r2, [r1, #12]
 8000eec:	0494      	lsls	r4, r2, #18
 8000eee:	d40a      	bmi.n	8000f06 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ef6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000efa:	04d1      	lsls	r1, r2, #19
 8000efc:	d403      	bmi.n	8000f06 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000efe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 fa48 	bl	800739c <HAL_ADC_ConvCpltCallback>
}
 8000f0c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000f0e:	06d2      	lsls	r2, r2, #27
 8000f10:	d407      	bmi.n	8000f22 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8000f1c:	0790      	lsls	r0, r2, #30
 8000f1e:	d4f2      	bmi.n	8000f06 <ADC_DMAConvCplt+0x42>
 8000f20:	e7e6      	b.n	8000ef0 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffcc 	bl	8000ec0 <HAL_ADC_ErrorCallback>
}
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	bf00      	nop

08000f2c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000f2e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f30:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f36:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f38:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f40:	f7ff ffbe 	bl	8000ec0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f44:	bd08      	pop	{r3, pc}
 8000f46:	bf00      	nop

08000f48 <HAL_ADC_ConfigChannel>:
{
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8000f4e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
  __IO uint32_t wait_loop_index = 0;
 8000f52:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8000f54:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8000f56:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000f58:	f000 80dc 	beq.w	8001114 <HAL_ADC_ConfigChannel+0x1cc>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f5c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f5e:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f015 0504 	ands.w	r5, r5, #4
 8000f66:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
 8000f6a:	d151      	bne.n	8001010 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank <= 5U)
 8000f6c:	684c      	ldr	r4, [r1, #4]
 8000f6e:	2c05      	cmp	r4, #5
 8000f70:	f240 8099 	bls.w	80010a6 <HAL_ADC_ConfigChannel+0x15e>
 8000f74:	f004 071f 	and.w	r7, r4, #31
 8000f78:	261f      	movs	r6, #31
 8000f7a:	09a4      	lsrs	r4, r4, #6
 8000f7c:	40be      	lsls	r6, r7
 8000f7e:	f004 050c 	and.w	r5, r4, #12
 8000f82:	43f4      	mvns	r4, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f84:	f102 0630 	add.w	r6, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8000f88:	6808      	ldr	r0, [r1, #0]
 8000f8a:	f856 c005 	ldr.w	ip, [r6, r5]
 8000f8e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000f92:	ea04 040c 	and.w	r4, r4, ip
 8000f96:	40b8      	lsls	r0, r7
 8000f98:	4320      	orrs	r0, r4
 8000f9a:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f9c:	6890      	ldr	r0, [r2, #8]
 8000f9e:	0746      	lsls	r6, r0, #29
 8000fa0:	d544      	bpl.n	800102c <HAL_ADC_ConfigChannel+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fa2:	6890      	ldr	r0, [r2, #8]
 8000fa4:	680c      	ldr	r4, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa6:	6890      	ldr	r0, [r2, #8]
 8000fa8:	07c5      	lsls	r5, r0, #31
 8000faa:	d412      	bmi.n	8000fd2 <HAL_ADC_ConfigChannel+0x8a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fac:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000fae:	48bb      	ldr	r0, [pc, #748]	; (800129c <HAL_ADC_ConfigChannel+0x354>)
 8000fb0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fb4:	f8df c308 	ldr.w	ip, [pc, #776]	; 80012c0 <HAL_ADC_ConfigChannel+0x378>
 8000fb8:	f006 0718 	and.w	r7, r6, #24
 8000fbc:	40f8      	lsrs	r0, r7
 8000fbe:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8000fc2:	4020      	ands	r0, r4
 8000fc4:	ea25 0507 	bic.w	r5, r5, r7
 8000fc8:	4328      	orrs	r0, r5
 8000fca:	4566      	cmp	r6, ip
 8000fcc:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8000fd0:	d071      	beq.n	80010b6 <HAL_ADC_ConfigChannel+0x16e>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fd2:	49b3      	ldr	r1, [pc, #716]	; (80012a0 <HAL_ADC_ConfigChannel+0x358>)
 8000fd4:	420c      	tst	r4, r1
 8000fd6:	d027      	beq.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fd8:	49b2      	ldr	r1, [pc, #712]	; (80012a4 <HAL_ADC_ConfigChannel+0x35c>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000fda:	4db3      	ldr	r5, [pc, #716]	; (80012a8 <HAL_ADC_ConfigChannel+0x360>)
 8000fdc:	6888      	ldr	r0, [r1, #8]
 8000fde:	42ac      	cmp	r4, r5
 8000fe0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8000fe4:	d01d      	beq.n	8001022 <HAL_ADC_ConfigChannel+0xda>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000fe6:	4db1      	ldr	r5, [pc, #708]	; (80012ac <HAL_ADC_ConfigChannel+0x364>)
 8000fe8:	42ac      	cmp	r4, r5
 8000fea:	f000 8096 	beq.w	800111a <HAL_ADC_ConfigChannel+0x1d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000fee:	4db0      	ldr	r5, [pc, #704]	; (80012b0 <HAL_ADC_ConfigChannel+0x368>)
 8000ff0:	42ac      	cmp	r4, r5
 8000ff2:	d119      	bne.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000ff4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8000ff8:	d116      	bne.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000ffa:	4cae      	ldr	r4, [pc, #696]	; (80012b4 <HAL_ADC_ConfigChannel+0x36c>)
 8000ffc:	42a2      	cmp	r2, r4
 8000ffe:	d113      	bne.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001000:	688a      	ldr	r2, [r1, #8]
 8001002:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001006:	4332      	orrs	r2, r6
 8001008:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800100c:	608a      	str	r2, [r1, #8]
 800100e:	e003      	b.n	8001018 <HAL_ADC_ConfigChannel+0xd0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800101e:	b003      	add	sp, #12
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001022:	0204      	lsls	r4, r0, #8
 8001024:	f140 809e 	bpl.w	8001164 <HAL_ADC_ConfigChannel+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2000      	movs	r0, #0
 800102a:	e7f5      	b.n	8001018 <HAL_ADC_ConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800102c:	6890      	ldr	r0, [r2, #8]
 800102e:	680c      	ldr	r4, [r1, #0]
 8001030:	0700      	lsls	r0, r0, #28
 8001032:	d4b8      	bmi.n	8000fa6 <HAL_ADC_ConfigChannel+0x5e>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001034:	688d      	ldr	r5, [r1, #8]
 8001036:	f3c4 5c04 	ubfx	ip, r4, #20, #5
 800103a:	2007      	movs	r0, #7
 800103c:	0de4      	lsrs	r4, r4, #23
 800103e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001042:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8001046:	f004 0404 	and.w	r4, r4, #4
 800104a:	ea6f 0000 	mvn.w	r0, r0
 800104e:	f102 0714 	add.w	r7, r2, #20
 8001052:	f000 8116 	beq.w	8001282 <HAL_ADC_ConfigChannel+0x33a>
  MODIFY_REG(*preg,
 8001056:	59e6      	ldr	r6, [r4, r7]
 8001058:	fa05 f50c 	lsl.w	r5, r5, ip
 800105c:	4030      	ands	r0, r6
 800105e:	4305      	orrs	r5, r0
 8001060:	51e5      	str	r5, [r4, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001062:	6950      	ldr	r0, [r2, #20]
 8001064:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001068:	6150      	str	r0, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800106a:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800106c:	68d5      	ldr	r5, [r2, #12]
 800106e:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001070:	2f04      	cmp	r7, #4
 8001072:	f102 0660 	add.w	r6, r2, #96	; 0x60
 8001076:	f000 80c4 	beq.w	8001202 <HAL_ADC_ConfigChannel+0x2ba>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800107a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(*preg,
 800107c:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
 8001080:	f8df c240 	ldr.w	ip, [pc, #576]	; 80012c4 <HAL_ADC_ConfigChannel+0x37c>
 8001084:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8001088:	006d      	lsls	r5, r5, #1
 800108a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800108e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001092:	40a8      	lsls	r0, r5
 8001094:	4320      	orrs	r0, r4
 8001096:	ea0e 0c0c 	and.w	ip, lr, ip
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 80010a2:	680c      	ldr	r4, [r1, #0]
 80010a4:	e77f      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x5e>
      switch (sConfig->Rank)
 80010a6:	3c02      	subs	r4, #2
 80010a8:	2c03      	cmp	r4, #3
 80010aa:	f200 80a5 	bhi.w	80011f8 <HAL_ADC_ConfigChannel+0x2b0>
 80010ae:	e8df f004 	tbb	[pc, r4]
 80010b2:	4f4a      	.short	0x4f4a
 80010b4:	4254      	.short	0x4254
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010b6:	2f00      	cmp	r7, #0
 80010b8:	d175      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x25e>
 80010ba:	0ea4      	lsrs	r4, r4, #26
 80010bc:	3401      	adds	r4, #1
 80010be:	f004 051f 	and.w	r5, r4, #31
 80010c2:	2601      	movs	r6, #1
 80010c4:	06a4      	lsls	r4, r4, #26
 80010c6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80010ca:	40ae      	lsls	r6, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010cc:	2d09      	cmp	r5, #9
 80010ce:	ea46 0604 	orr.w	r6, r6, r4
 80010d2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80010d6:	f240 808c 	bls.w	80011f2 <HAL_ADC_ConfigChannel+0x2aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010da:	f1a4 001e 	sub.w	r0, r4, #30
 80010de:	0500      	lsls	r0, r0, #20
 80010e0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010e4:	ea40 0406 	orr.w	r4, r0, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010e8:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
 80010ec:	f00c 0c04 	and.w	ip, ip, #4
 80010f0:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80010f4:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80010f8:	f85c 5007 	ldr.w	r5, [ip, r7]
 80010fc:	688e      	ldr	r6, [r1, #8]
 80010fe:	2007      	movs	r0, #7
 8001100:	40a0      	lsls	r0, r4
 8001102:	ea25 0500 	bic.w	r5, r5, r0
 8001106:	fa06 f404 	lsl.w	r4, r6, r4
 800110a:	432c      	orrs	r4, r5
 800110c:	f84c 4007 	str.w	r4, [ip, r7]
 8001110:	680c      	ldr	r4, [r1, #0]
 8001112:	e75e      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 8001114:	2002      	movs	r0, #2
}
 8001116:	b003      	add	sp, #12
 8001118:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800111a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800111e:	d183      	bne.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001120:	4c64      	ldr	r4, [pc, #400]	; (80012b4 <HAL_ADC_ConfigChannel+0x36c>)
 8001122:	42a2      	cmp	r2, r4
 8001124:	d180      	bne.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001126:	688a      	ldr	r2, [r1, #8]
 8001128:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800112c:	4332      	orrs	r2, r6
 800112e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001132:	608a      	str	r2, [r1, #8]
 8001134:	e770      	b.n	8001018 <HAL_ADC_ConfigChannel+0xd0>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001136:	f44f 7080 	mov.w	r0, #256	; 0x100
 800113a:	6048      	str	r0, [r1, #4]
 800113c:	2700      	movs	r7, #0
 800113e:	f06f 041f 	mvn.w	r4, #31
 8001142:	2504      	movs	r5, #4
 8001144:	e71e      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x3c>
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001146:	270c      	movs	r7, #12
 8001148:	604f      	str	r7, [r1, #4]
 800114a:	f46f 34f8 	mvn.w	r4, #126976	; 0x1f000
 800114e:	e719      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x3c>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001150:	2712      	movs	r7, #18
 8001152:	604f      	str	r7, [r1, #4]
 8001154:	f46f 04f8 	mvn.w	r4, #8126464	; 0x7c0000
 8001158:	e714      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800115a:	2718      	movs	r7, #24
 800115c:	604f      	str	r7, [r1, #4]
 800115e:	f06f 54f8 	mvn.w	r4, #520093696	; 0x1f000000
 8001162:	e70f      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x3c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001164:	4853      	ldr	r0, [pc, #332]	; (80012b4 <HAL_ADC_ConfigChannel+0x36c>)
 8001166:	4282      	cmp	r2, r0
 8001168:	f47f af5e 	bne.w	8001028 <HAL_ADC_ConfigChannel+0xe0>
 800116c:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800116e:	4c52      	ldr	r4, [pc, #328]	; (80012b8 <HAL_ADC_ConfigChannel+0x370>)
 8001170:	4852      	ldr	r0, [pc, #328]	; (80012bc <HAL_ADC_ConfigChannel+0x374>)
 8001172:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001176:	4332      	orrs	r2, r6
 8001178:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800117c:	608a      	str	r2, [r1, #8]
 800117e:	6822      	ldr	r2, [r4, #0]
 8001180:	0992      	lsrs	r2, r2, #6
 8001182:	fba0 1202 	umull	r1, r2, r0, r2
 8001186:	0992      	lsrs	r2, r2, #6
 8001188:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001190:	9a01      	ldr	r2, [sp, #4]
 8001192:	2a00      	cmp	r2, #0
 8001194:	f43f af48 	beq.w	8001028 <HAL_ADC_ConfigChannel+0xe0>
            wait_loop_index--;
 8001198:	9a01      	ldr	r2, [sp, #4]
 800119a:	3a01      	subs	r2, #1
 800119c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800119e:	9a01      	ldr	r2, [sp, #4]
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d1f9      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x250>
 80011a4:	e740      	b.n	8001028 <HAL_ADC_ConfigChannel+0xe0>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011aa:	fab0 f080 	clz	r0, r0
 80011ae:	3001      	adds	r0, #1
 80011b0:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011b4:	2809      	cmp	r0, #9
 80011b6:	f200 8087 	bhi.w	80012c8 <HAL_ADC_ConfigChannel+0x380>
 80011ba:	fa94 f6a4 	rbit	r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011be:	fab6 f686 	clz	r6, r6
 80011c2:	fa94 f0a4 	rbit	r0, r4
 80011c6:	fab0 f080 	clz	r0, r0
 80011ca:	3001      	adds	r0, #1
 80011cc:	3601      	adds	r6, #1
 80011ce:	2501      	movs	r5, #1
 80011d0:	f000 001f 	and.w	r0, r0, #31
 80011d4:	06b6      	lsls	r6, r6, #26
 80011d6:	fa05 f000 	lsl.w	r0, r5, r0
 80011da:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80011de:	4306      	orrs	r6, r0
 80011e0:	fa94 f5a4 	rbit	r5, r4
 80011e4:	fab5 f585 	clz	r5, r5
 80011e8:	3501      	adds	r5, #1
 80011ea:	f005 051f 	and.w	r5, r5, #31
 80011ee:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80011f2:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011f4:	4334      	orrs	r4, r6
 80011f6:	e777      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x1a0>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80011f8:	2706      	movs	r7, #6
 80011fa:	604f      	str	r7, [r1, #4]
 80011fc:	f46f 64f8 	mvn.w	r4, #1984	; 0x7c0
 8001200:	e6c0      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001202:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001204:	6e10      	ldr	r0, [r2, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001206:	f3c4 0512 	ubfx	r5, r4, #0, #19
 800120a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800120e:	2d00      	cmp	r5, #0
 8001210:	d13f      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x34a>
 8001212:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8001216:	42b8      	cmp	r0, r7
 8001218:	d106      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x2e0>
  MODIFY_REG(*preg,
 800121a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800121c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001220:	6610      	str	r0, [r2, #96]	; 0x60
 8001222:	680c      	ldr	r4, [r1, #0]
 8001224:	f3c4 0512 	ubfx	r5, r4, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001228:	6870      	ldr	r0, [r6, #4]
 800122a:	6870      	ldr	r0, [r6, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800122c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001230:	2d00      	cmp	r5, #0
 8001232:	d16b      	bne.n	800130c <HAL_ADC_ConfigChannel+0x3c4>
 8001234:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8001238:	42a8      	cmp	r0, r5
 800123a:	f040 8090 	bne.w	800135e <HAL_ADC_ConfigChannel+0x416>
  MODIFY_REG(*preg,
 800123e:	6870      	ldr	r0, [r6, #4]
 8001240:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001244:	6070      	str	r0, [r6, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001246:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001248:	68b0      	ldr	r0, [r6, #8]
 800124a:	68b0      	ldr	r0, [r6, #8]
 800124c:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8001250:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001254:	2d00      	cmp	r5, #0
 8001256:	d163      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x3d8>
 8001258:	f3c4 6584 	ubfx	r5, r4, #26, #5
 800125c:	42a8      	cmp	r0, r5
 800125e:	f106 070c 	add.w	r7, r6, #12
 8001262:	d065      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x3e8>
 8001264:	68f0      	ldr	r0, [r6, #12]
 8001266:	68f0      	ldr	r0, [r6, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001268:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800126c:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8001270:	4285      	cmp	r5, r0
 8001272:	f47f ae98 	bne.w	8000fa6 <HAL_ADC_ConfigChannel+0x5e>
  MODIFY_REG(*preg,
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800127c:	6038      	str	r0, [r7, #0]
 800127e:	680c      	ldr	r4, [r1, #0]
 8001280:	e691      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x5e>
  MODIFY_REG(*preg,
 8001282:	59e5      	ldr	r5, [r4, r7]
 8001284:	4028      	ands	r0, r5
 8001286:	51e0      	str	r0, [r4, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001288:	6950      	ldr	r0, [r2, #20]
 800128a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800128e:	6150      	str	r0, [r2, #20]
 8001290:	e6eb      	b.n	800106a <HAL_ADC_ConfigChannel+0x122>
 8001292:	fa94 f7a4 	rbit	r7, r4
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001296:	fab7 f787 	clz	r7, r7
 800129a:	e7bc      	b.n	8001216 <HAL_ADC_ConfigChannel+0x2ce>
 800129c:	0007ffff 	.word	0x0007ffff
 80012a0:	80080000 	.word	0x80080000
 80012a4:	50040300 	.word	0x50040300
 80012a8:	c7520000 	.word	0xc7520000
 80012ac:	cb840000 	.word	0xcb840000
 80012b0:	80000001 	.word	0x80000001
 80012b4:	50040000 	.word	0x50040000
 80012b8:	20000058 	.word	0x20000058
 80012bc:	053e2d63 	.word	0x053e2d63
 80012c0:	407f0000 	.word	0x407f0000
 80012c4:	03fff000 	.word	0x03fff000
 80012c8:	fa94 f6a4 	rbit	r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012cc:	fab6 f686 	clz	r6, r6
 80012d0:	fa94 f0a4 	rbit	r0, r4
 80012d4:	fab0 f080 	clz	r0, r0
 80012d8:	3001      	adds	r0, #1
 80012da:	3601      	adds	r6, #1
 80012dc:	2501      	movs	r5, #1
 80012de:	f000 001f 	and.w	r0, r0, #31
 80012e2:	06b6      	lsls	r6, r6, #26
 80012e4:	fa05 f000 	lsl.w	r0, r5, r0
 80012e8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80012ec:	4306      	orrs	r6, r0
 80012ee:	fa94 f5a4 	rbit	r5, r4
 80012f2:	fab5 f585 	clz	r5, r5
 80012f6:	3501      	adds	r5, #1
 80012f8:	f005 051f 	and.w	r5, r5, #31
 80012fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001300:	f1a5 001e 	sub.w	r0, r5, #30
 8001304:	0500      	lsls	r0, r0, #20
 8001306:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800130a:	e6eb      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x19c>
 800130c:	fa94 f5a4 	rbit	r5, r4
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001310:	fab5 f585 	clz	r5, r5
 8001314:	42a8      	cmp	r0, r5
 8001316:	d092      	beq.n	800123e <HAL_ADC_ConfigChannel+0x2f6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001318:	68b0      	ldr	r0, [r6, #8]
 800131a:	68b0      	ldr	r0, [r6, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800131c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001320:	fa94 f5a4 	rbit	r5, r4
 8001324:	fab5 f585 	clz	r5, r5
 8001328:	4285      	cmp	r5, r0
 800132a:	f106 070c 	add.w	r7, r6, #12
 800132e:	d111      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x40c>
  MODIFY_REG(*preg,
 8001330:	68b0      	ldr	r0, [r6, #8]
 8001332:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001336:	60b0      	str	r0, [r6, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001338:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8001342:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001346:	2d00      	cmp	r5, #0
 8001348:	d090      	beq.n	800126c <HAL_ADC_ConfigChannel+0x324>
 800134a:	fa94 f5a4 	rbit	r5, r4
 800134e:	fab5 f585 	clz	r5, r5
 8001352:	e78d      	b.n	8001270 <HAL_ADC_ConfigChannel+0x328>
 8001354:	68f0      	ldr	r0, [r6, #12]
 8001356:	68f0      	ldr	r0, [r6, #12]
 8001358:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800135c:	e7f5      	b.n	800134a <HAL_ADC_ConfigChannel+0x402>
 800135e:	68b0      	ldr	r0, [r6, #8]
 8001360:	68b0      	ldr	r0, [r6, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001362:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001366:	e779      	b.n	800125c <HAL_ADC_ConfigChannel+0x314>

08001368 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001368:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	07d2      	lsls	r2, r2, #31
 800136e:	d40d      	bmi.n	800138c <ADC_Enable+0x24>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <ADC_Enable+0x7c>)
 8001374:	4211      	tst	r1, r2
 8001376:	d00b      	beq.n	8001390 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001378:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001380:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8001388:	2001      	movs	r0, #1
 800138a:	4770      	bx	lr
  return HAL_OK;
 800138c:	2000      	movs	r0, #0
}
 800138e:	4770      	bx	lr
{
 8001390:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(ADCx->CR,
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	4e14      	ldr	r6, [pc, #80]	; (80013e8 <ADC_Enable+0x80>)
 8001396:	4032      	ands	r2, r6
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80013a0:	f7ff fc82 	bl	8000ca8 <HAL_GetTick>
 80013a4:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013a6:	e00c      	b.n	80013c2 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	07d1      	lsls	r1, r2, #31
 80013ac:	d404      	bmi.n	80013b8 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	4032      	ands	r2, r6
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013b8:	f7ff fc76 	bl	8000ca8 <HAL_GetTick>
 80013bc:	1b40      	subs	r0, r0, r5
 80013be:	2802      	cmp	r0, #2
 80013c0:	d805      	bhi.n	80013ce <ADC_Enable+0x66>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	07d2      	lsls	r2, r2, #31
 80013c8:	d5ee      	bpl.n	80013a8 <ADC_Enable+0x40>
  return HAL_OK;
 80013ca:	2000      	movs	r0, #0
}
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80013de:	2001      	movs	r0, #1
}
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
 80013e2:	bf00      	nop
 80013e4:	8000003f 	.word	0x8000003f
 80013e8:	7fffffc0 	.word	0x7fffffc0

080013ec <HAL_ADC_Start_DMA>:
{
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013f0:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013f2:	4c34      	ldr	r4, [pc, #208]	; (80014c4 <HAL_ADC_Start_DMA+0xd8>)
 80013f4:	68a6      	ldr	r6, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	075b      	lsls	r3, r3, #29
 80013fa:	d453      	bmi.n	80014a4 <HAL_ADC_Start_DMA+0xb8>
    __HAL_LOCK(hadc);
 80013fc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001400:	2b01      	cmp	r3, #1
 8001402:	4605      	mov	r5, r0
 8001404:	d04e      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xb8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001406:	f006 061f 	and.w	r6, r6, #31
 800140a:	2301      	movs	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800140c:	2e09      	cmp	r6, #9
    __HAL_LOCK(hadc);
 800140e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001412:	d84a      	bhi.n	80014aa <HAL_ADC_Start_DMA+0xbe>
 8001414:	f240 2421 	movw	r4, #545	; 0x221
 8001418:	40f4      	lsrs	r4, r6
 800141a:	43e4      	mvns	r4, r4
 800141c:	401c      	ands	r4, r3
 800141e:	d144      	bne.n	80014aa <HAL_ADC_Start_DMA+0xbe>
 8001420:	4690      	mov	r8, r2
 8001422:	460f      	mov	r7, r1
      tmp_hal_status = ADC_Enable(hadc);
 8001424:	f7ff ffa0 	bl	8001368 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001428:	2800      	cmp	r0, #0
 800142a:	d147      	bne.n	80014bc <HAL_ADC_Start_DMA+0xd0>
        ADC_STATE_CLR_SET(hadc->State,
 800142c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800142e:	6829      	ldr	r1, [r5, #0]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <HAL_ADC_Start_DMA+0xdc>)
        ADC_STATE_CLR_SET(hadc->State,
 8001432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800143e:	4291      	cmp	r1, r2
        ADC_STATE_CLR_SET(hadc->State,
 8001440:	656b      	str	r3, [r5, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001442:	d038      	beq.n	80014b6 <HAL_ADC_Start_DMA+0xca>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001444:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001446:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800144a:	656b      	str	r3, [r5, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800144c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800144e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001450:	4c1e      	ldr	r4, [pc, #120]	; (80014cc <HAL_ADC_Start_DMA+0xe0>)
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_ADC_Start_DMA+0xe4>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001454:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001458:	bf1c      	itt	ne
 800145a:	6dab      	ldrne	r3, [r5, #88]	; 0x58
 800145c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001460:	65ab      	str	r3, [r5, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_ADC_Start_DMA+0xe8>)
 8001464:	62c3      	str	r3, [r0, #44]	; 0x2c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001466:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001468:	e9c0 420c 	strd	r4, r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800146c:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800146e:	684b      	ldr	r3, [r1, #4]
        __HAL_UNLOCK(hadc);
 8001470:	2200      	movs	r2, #0
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001472:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8001476:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800147a:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800147c:	68cc      	ldr	r4, [r1, #12]
 800147e:	f044 0401 	orr.w	r4, r4, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001482:	4643      	mov	r3, r8
 8001484:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001486:	60cc      	str	r4, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001488:	3140      	adds	r1, #64	; 0x40
 800148a:	f000 fa01 	bl	8001890 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800148e:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001496:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6093      	str	r3, [r2, #8]
}
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80014a4:	2002      	movs	r0, #2
}
 80014a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 80014aa:	2300      	movs	r3, #0
 80014ac:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
}
 80014b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d0c4      	beq.n	8001444 <HAL_ADC_Start_DMA+0x58>
 80014ba:	e7c7      	b.n	800144c <HAL_ADC_Start_DMA+0x60>
        __HAL_UNLOCK(hadc);
 80014bc:	f885 4050 	strb.w	r4, [r5, #80]	; 0x50
}
 80014c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c4:	50040300 	.word	0x50040300
 80014c8:	50040100 	.word	0x50040100
 80014cc:	08000eb5 	.word	0x08000eb5
 80014d0:	08000f2d 	.word	0x08000f2d
 80014d4:	08000ec5 	.word	0x08000ec5

080014d8 <ADC_Disable>:
{
 80014d8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80014da:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	0791      	lsls	r1, r2, #30
 80014e0:	d502      	bpl.n	80014e8 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014e2:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80014e4:	2000      	movs	r0, #0
}
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	07d2      	lsls	r2, r2, #31
 80014ec:	d526      	bpl.n	800153c <ADC_Disable+0x64>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	f002 020d 	and.w	r2, r2, #13
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d009      	beq.n	800150c <ADC_Disable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8001508:	2001      	movs	r0, #1
}
 800150a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001512:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001516:	f042 0202 	orr.w	r2, r2, #2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800151a:	2103      	movs	r1, #3
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	6019      	str	r1, [r3, #0]
 8001520:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001522:	f7ff fbc1 	bl	8000ca8 <HAL_GetTick>
 8001526:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001528:	e004      	b.n	8001534 <ADC_Disable+0x5c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800152a:	f7ff fbbd 	bl	8000ca8 <HAL_GetTick>
 800152e:	1b40      	subs	r0, r0, r5
 8001530:	2802      	cmp	r0, #2
 8001532:	d805      	bhi.n	8001540 <ADC_Disable+0x68>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	07db      	lsls	r3, r3, #31
 800153a:	d4f6      	bmi.n	800152a <ADC_Disable+0x52>
  return HAL_OK;
 800153c:	2000      	movs	r0, #0
}
 800153e:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001540:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
}
 8001552:	bd38      	pop	{r3, r4, r5, pc}

08001554 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001554:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001556:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800155a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800155c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800155e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001560:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001562:	d035      	beq.n	80015d0 <HAL_ADCEx_Calibration_Start+0x7c>
 8001564:	2301      	movs	r3, #1
 8001566:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800156a:	4604      	mov	r4, r0
 800156c:	460d      	mov	r5, r1

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800156e:	f7ff ffb3 	bl	80014d8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001572:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 8001574:	bb20      	cbnz	r0, 80015c0 <HAL_ADCEx_Calibration_Start+0x6c>
    ADC_STATE_CLR_SET(hadc->State,
 8001576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157a:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800157e:	6822      	ldr	r2, [r4, #0]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001580:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_ADCEx_Calibration_Start+0x9c>)
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8001588:	6893      	ldr	r3, [r2, #8]
 800158a:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 800158e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001592:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001596:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800159a:	431d      	orrs	r5, r3
 800159c:	6095      	str	r5, [r2, #8]
 800159e:	e005      	b.n	80015ac <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 80015a0:	9b01      	ldr	r3, [sp, #4]
 80015a2:	3301      	adds	r3, #1
 80015a4:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d814      	bhi.n	80015d6 <HAL_ADCEx_Calibration_Start+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80015ac:	6893      	ldr	r3, [r2, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	dbf6      	blt.n	80015a0 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015b4:	f023 0303 	bic.w	r3, r3, #3
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6563      	str	r3, [r4, #84]	; 0x54
 80015be:	e002      	b.n	80015c6 <HAL_ADCEx_Calibration_Start+0x72>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c6:	2300      	movs	r3, #0
 80015c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80015cc:	b003      	add	sp, #12
 80015ce:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80015d0:	2002      	movs	r0, #2
}
 80015d2:	b003      	add	sp, #12
 80015d4:	bd30      	pop	{r4, r5, pc}
        ADC_STATE_CLR_SET(hadc->State,
 80015d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015d8:	f023 0312 	bic.w	r3, r3, #18
 80015dc:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 80015e0:	2200      	movs	r2, #0
        return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80015e4:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80015e6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80015ea:	b003      	add	sp, #12
 80015ec:	bd30      	pop	{r4, r5, pc}
 80015ee:	bf00      	nop
 80015f0:	000487ff 	.word	0x000487ff

080015f4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80015f8:	2a01      	cmp	r2, #1
 80015fa:	d047      	beq.n	800168c <HAL_ADCEx_MultiModeConfigChannel+0x98>
{
 80015fc:	b5f0      	push	{r4, r5, r6, r7, lr}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80015fe:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8001600:	6804      	ldr	r4, [r0, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001602:	680e      	ldr	r6, [r1, #0]
 8001604:	4603      	mov	r3, r0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001606:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 8001608:	f04f 0001 	mov.w	r0, #1
 800160c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001610:	d007      	beq.n	8001622 <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001612:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001614:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800161c:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001622:	4d28      	ldr	r5, [pc, #160]	; (80016c4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8001624:	68aa      	ldr	r2, [r5, #8]
 8001626:	0757      	lsls	r7, r2, #29
 8001628:	d509      	bpl.n	800163e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800162a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800162e:	f042 0220 	orr.w	r2, r2, #32
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001634:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	68a0      	ldr	r0, [r4, #8]
 8001640:	f010 0004 	ands.w	r0, r0, #4
 8001644:	d1f2      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001646:	b31e      	cbz	r6, 8001690 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001648:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80016c8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800164c:	684f      	ldr	r7, [r1, #4]
 800164e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8001652:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8001656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800165a:	433a      	orrs	r2, r7
 800165c:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8001660:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001664:	68a2      	ldr	r2, [r4, #8]
 8001666:	07d4      	lsls	r4, r2, #31
 8001668:	d427      	bmi.n	80016ba <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 800166a:	68a8      	ldr	r0, [r5, #8]
 800166c:	f010 0001 	ands.w	r0, r0, #1
 8001670:	d121      	bne.n	80016b6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        MODIFY_REG(tmpADC_Common->CCR,
 8001672:	f8de 2008 	ldr.w	r2, [lr, #8]
 8001676:	688c      	ldr	r4, [r1, #8]
 8001678:	f422 6171 	bic.w	r1, r2, #3856	; 0xf10
 800167c:	f021 010f 	bic.w	r1, r1, #15
 8001680:	ea46 0204 	orr.w	r2, r6, r4
 8001684:	430a      	orrs	r2, r1
 8001686:	f8ce 2008 	str.w	r2, [lr, #8]
 800168a:	e7d4      	b.n	8001636 <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 800168c:	2002      	movs	r0, #2
}
 800168e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8001692:	6891      	ldr	r1, [r2, #8]
 8001694:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001698:	6091      	str	r1, [r2, #8]
 800169a:	68a0      	ldr	r0, [r4, #8]
 800169c:	68a9      	ldr	r1, [r5, #8]
 800169e:	07c9      	lsls	r1, r1, #31
 80016a0:	f000 0001 	and.w	r0, r0, #1
 80016a4:	d407      	bmi.n	80016b6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016a6:	b930      	cbnz	r0, 80016b6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80016a8:	6891      	ldr	r1, [r2, #8]
 80016aa:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80016ae:	f021 010f 	bic.w	r1, r1, #15
 80016b2:	6091      	str	r1, [r2, #8]
 80016b4:	e7bf      	b.n	8001636 <HAL_ADCEx_MultiModeConfigChannel+0x42>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b6:	2000      	movs	r0, #0
 80016b8:	e7bd      	b.n	8001636 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80016ba:	68aa      	ldr	r2, [r5, #8]
 80016bc:	e7bb      	b.n	8001636 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80016be:	bf00      	nop
 80016c0:	50040000 	.word	0x50040000
 80016c4:	50040100 	.word	0x50040100
 80016c8:	50040300 	.word	0x50040300

080016cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80016d4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d6:	0200      	lsls	r0, r0, #8
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016e4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016e6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_NVIC_SetPriority+0x64>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fa:	f1c3 0507 	rsb	r5, r3, #7
 80016fe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001700:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	bf28      	it	cs
 8001706:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001708:	2c06      	cmp	r4, #6
 800170a:	d919      	bls.n	8001740 <HAL_NVIC_SetPriority+0x50>
 800170c:	3b03      	subs	r3, #3
 800170e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001712:	409c      	lsls	r4, r3
 8001714:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171c:	40aa      	lsls	r2, r5
 800171e:	ea21 0102 	bic.w	r1, r1, r2
 8001722:	fa01 f203 	lsl.w	r2, r1, r3
 8001726:	4322      	orrs	r2, r4
 8001728:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800172a:	2800      	cmp	r0, #0
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	db0a      	blt.n	8001746 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001734:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001738:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800173c:	bc30      	pop	{r4, r5}
 800173e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001740:	2400      	movs	r4, #0
 8001742:	4623      	mov	r3, r4
 8001744:	e7e8      	b.n	8001718 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_NVIC_SetPriority+0x68>)
 8001748:	f000 000f 	and.w	r0, r0, #15
 800174c:	4403      	add	r3, r0
 800174e:	761a      	strb	r2, [r3, #24]
 8001750:	bc30      	pop	{r4, r5}
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	e000ecfc 	.word	0xe000ecfc

0800175c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800175c:	2800      	cmp	r0, #0
 800175e:	db07      	blt.n	8001770 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001760:	f000 011f 	and.w	r1, r0, #31
 8001764:	2301      	movs	r3, #1
 8001766:	0940      	lsrs	r0, r0, #5
 8001768:	4a02      	ldr	r2, [pc, #8]	; (8001774 <HAL_NVIC_EnableIRQ+0x18>)
 800176a:	408b      	lsls	r3, r1
 800176c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8001778:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800177c:	4905      	ldr	r1, [pc, #20]	; (8001794 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001780:	68ca      	ldr	r2, [r1, #12]
 8001782:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001786:	4313      	orrs	r3, r2
 8001788:	60cb      	str	r3, [r1, #12]
 800178a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800178e:	bf00      	nop
 8001790:	e7fd      	b.n	800178e <HAL_NVIC_SystemReset+0x16>
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	05fa0004 	.word	0x05fa0004

0800179c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	3801      	subs	r0, #1
 800179e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017a2:	d20e      	bcs.n	80017c2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	4c08      	ldr	r4, [pc, #32]	; (80017cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	20f0      	movs	r0, #240	; 0xf0
 80017ae:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80017bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2001      	movs	r0, #1
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d04b      	beq.n	800186c <HAL_DMA_Init+0x9c>
 80017d4:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017d6:	4a26      	ldr	r2, [pc, #152]	; (8001870 <HAL_DMA_Init+0xa0>)
 80017d8:	6800      	ldr	r0, [r0, #0]
 80017da:	4290      	cmp	r0, r2
{
 80017dc:	b470      	push	{r4, r5, r6}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017de:	d941      	bls.n	8001864 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017e0:	4a24      	ldr	r2, [pc, #144]	; (8001874 <HAL_DMA_Init+0xa4>)
 80017e2:	4925      	ldr	r1, [pc, #148]	; (8001878 <HAL_DMA_Init+0xa8>)
    hdma->DmaBaseAddress = DMA2;
 80017e4:	4c25      	ldr	r4, [pc, #148]	; (800187c <HAL_DMA_Init+0xac>)
 80017e6:	641c      	str	r4, [r3, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017e8:	4402      	add	r2, r0
 80017ea:	fba1 1202 	umull	r1, r2, r1, r2
 80017ee:	0912      	lsrs	r2, r2, #4
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017f4:	e9d3 4202 	ldrd	r4, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f8:	e9d3 5104 	ldrd	r5, r1, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80017fc:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	699e      	ldr	r6, [r3, #24]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001802:	2502      	movs	r5, #2
 8001804:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	69dd      	ldr	r5, [r3, #28]
  tmp = hdma->Instance->CCR;
 800180c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180e:	4332      	orrs	r2, r6
 8001810:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001812:	6a1d      	ldr	r5, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001814:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8001818:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800181a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800181e:	430a      	orrs	r2, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001820:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001824:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001826:	d014      	beq.n	8001852 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001828:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800182a:	4d15      	ldr	r5, [pc, #84]	; (8001880 <HAL_DMA_Init+0xb0>)
 800182c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800182e:	6858      	ldr	r0, [r3, #4]
 8001830:	42ac      	cmp	r4, r5
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001832:	bf0c      	ite	eq
 8001834:	4c13      	ldreq	r4, [pc, #76]	; (8001884 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001836:	4c14      	ldrne	r4, [pc, #80]	; (8001888 <HAL_DMA_Init+0xb8>)
 8001838:	f001 011c 	and.w	r1, r1, #28
 800183c:	220f      	movs	r2, #15
 800183e:	408a      	lsls	r2, r1
 8001840:	fa00 f101 	lsl.w	r1, r0, r1
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	43d2      	mvns	r2, r2
 8001848:	4002      	ands	r2, r0
 800184a:	6022      	str	r2, [r4, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	4301      	orrs	r1, r0
 8001850:	6021      	str	r1, [r4, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001854:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001856:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001858:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800185c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
}
 8001860:	bc70      	pop	{r4, r5, r6}
 8001862:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_DMA_Init+0xbc>)
 8001866:	4904      	ldr	r1, [pc, #16]	; (8001878 <HAL_DMA_Init+0xa8>)
    hdma->DmaBaseAddress = DMA1;
 8001868:	4c05      	ldr	r4, [pc, #20]	; (8001880 <HAL_DMA_Init+0xb0>)
 800186a:	e7bc      	b.n	80017e6 <HAL_DMA_Init+0x16>
    return HAL_ERROR;
 800186c:	2001      	movs	r0, #1
}
 800186e:	4770      	bx	lr
 8001870:	40020407 	.word	0x40020407
 8001874:	bffdfbf8 	.word	0xbffdfbf8
 8001878:	cccccccd 	.word	0xcccccccd
 800187c:	40020400 	.word	0x40020400
 8001880:	40020000 	.word	0x40020000
 8001884:	400200a8 	.word	0x400200a8
 8001888:	400204a8 	.word	0x400204a8
 800188c:	bffdfff8 	.word	0xbffdfff8

08001890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001892:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001896:	2c01      	cmp	r4, #1
 8001898:	d034      	beq.n	8001904 <HAL_DMA_Start_IT+0x74>

  if(HAL_DMA_STATE_READY == hdma->State)
 800189a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800189e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a0:	b2ed      	uxtb	r5, r5
 80018a2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80018a4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a8:	d126      	bne.n	80018f8 <HAL_DMA_Start_IT+0x68>
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018aa:	6804      	ldr	r4, [r0, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ac:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b0:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b2:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	63c6      	str	r6, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ba:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80018bc:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018be:	f007 071c 	and.w	r7, r7, #28
    __HAL_DMA_DISABLE(hdma);
 80018c2:	f026 0601 	bic.w	r6, r6, #1
 80018c6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c8:	40bd      	lsls	r5, r7

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ca:	6886      	ldr	r6, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018cc:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 80018d0:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 80018d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018d4:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018d6:	bf0b      	itete	eq
 80018d8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80018da:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018dc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80018de:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018e0:	b19b      	cbz	r3, 800190a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	f043 030e 	orr.w	r3, r3, #14
 80018e8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2000      	movs	r0, #0
}
 80018f4:	bcf0      	pop	{r4, r5, r6, r7}
 80018f6:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 80018f8:	2300      	movs	r3, #0
 80018fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80018fe:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8001900:	2002      	movs	r0, #2
}
 8001902:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001904:	2002      	movs	r0, #2
}
 8001906:	bcf0      	pop	{r4, r5, r6, r7}
 8001908:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	f043 030a 	orr.w	r3, r3, #10
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	e7e6      	b.n	80018ea <HAL_DMA_Start_IT+0x5a>

0800191c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800191c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001920:	2a02      	cmp	r2, #2
 8001922:	d003      	beq.n	800192c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001924:	2204      	movs	r2, #4
 8001926:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001928:	2001      	movs	r0, #1
}
 800192a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800192e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8001930:	b570      	push	{r4, r5, r6, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001932:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001934:	6c06      	ldr	r6, [r0, #64]	; 0x40
    if(hdma->XferAbortCallback != NULL)
 8001936:	6b85      	ldr	r5, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001938:	f024 040e 	bic.w	r4, r4, #14
 800193c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800193e:	680c      	ldr	r4, [r1, #0]
 8001940:	f024 0401 	bic.w	r4, r4, #1
 8001944:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001946:	f002 021c 	and.w	r2, r2, #28
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
    __HAL_UNLOCK(hdma);
 8001950:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001952:	6072      	str	r2, [r6, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001954:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001958:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 800195c:	b115      	cbz	r5, 8001964 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 800195e:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	4620      	mov	r0, r4
}
 8001962:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	4628      	mov	r0, r5
}
 8001966:	bd70      	pop	{r4, r5, r6, pc}

08001968 <HAL_DMA_IRQHandler>:
{
 8001968:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800196a:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 800196e:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001970:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001972:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001974:	f003 031c 	and.w	r3, r3, #28
 8001978:	409a      	lsls	r2, r3
 800197a:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 800197c:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800197e:	d00a      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2e>
 8001980:	f014 0f04 	tst.w	r4, #4
 8001984:	d007      	beq.n	8001996 <HAL_DMA_IRQHandler+0x2e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	069b      	lsls	r3, r3, #26
 800198a:	d537      	bpl.n	80019fc <HAL_DMA_IRQHandler+0x94>
      if(hdma->XferHalfCpltCallback != NULL)
 800198c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800198e:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8001990:	b1cb      	cbz	r3, 80019c6 <HAL_DMA_IRQHandler+0x5e>
}
 8001992:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001994:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001996:	2202      	movs	r2, #2
 8001998:	409a      	lsls	r2, r3
 800199a:	420a      	tst	r2, r1
 800199c:	d015      	beq.n	80019ca <HAL_DMA_IRQHandler+0x62>
 800199e:	f014 0f02 	tst.w	r4, #2
 80019a2:	d012      	beq.n	80019ca <HAL_DMA_IRQHandler+0x62>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	0699      	lsls	r1, r3, #26
 80019a8:	d406      	bmi.n	80019b8 <HAL_DMA_IRQHandler+0x50>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019aa:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80019ac:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019ae:	f023 030a 	bic.w	r3, r3, #10
 80019b2:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80019b4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 80019b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ba:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80019bc:	2200      	movs	r2, #0
 80019be:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <HAL_DMA_IRQHandler+0x2a>
}
 80019c6:	bc70      	pop	{r4, r5, r6}
 80019c8:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	420a      	tst	r2, r1
 80019d0:	d0f9      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x5e>
 80019d2:	0722      	lsls	r2, r4, #28
 80019d4:	d5f7      	bpl.n	80019c6 <HAL_DMA_IRQHandler+0x5e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d6:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80019d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019da:	f022 020e 	bic.w	r2, r2, #14
 80019de:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e0:	2201      	movs	r2, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80019e6:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019ea:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80019ec:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80019f0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 80019f4:	2900      	cmp	r1, #0
 80019f6:	d0e6      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x5e>
}
 80019f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80019fa:	4708      	bx	r1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	602b      	str	r3, [r5, #0]
 8001a04:	e7c2      	b.n	800198c <HAL_DMA_IRQHandler+0x24>
 8001a06:	bf00      	nop

08001a08 <HAL_DMA_GetState>:
  return hdma->State;
 8001a08:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_FLASH_Unlock+0x1c>)
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	db01      	blt.n	8001a1c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001a1a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a1c:	4904      	ldr	r1, [pc, #16]	; (8001a30 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a20:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a22:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a24:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001a26:	0fc0      	lsrs	r0, r0, #31
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	45670123 	.word	0x45670123
 8001a34:	cdef89ab 	.word	0xcdef89ab

08001a38 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_FLASH_Lock+0x10>)
 8001a3a:	6953      	ldr	r3, [r2, #20]
 8001a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a40:	6153      	str	r3, [r2, #20]

  return HAL_OK;
}
 8001a42:	2000      	movs	r0, #0
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40022000 	.word	0x40022000

08001a4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff f92a 	bl	8000ca8 <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a54:	4c10      	ldr	r4, [pc, #64]	; (8001a98 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8001a56:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a58:	e001      	b.n	8001a5e <FLASH_WaitForLastOperation+0x12>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001a5a:	1c6a      	adds	r2, r5, #1
 8001a5c:	d10e      	bne.n	8001a7c <FLASH_WaitForLastOperation+0x30>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001a5e:	6923      	ldr	r3, [r4, #16]
 8001a60:	03db      	lsls	r3, r3, #15
 8001a62:	d4fa      	bmi.n	8001a5a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001a64:	6923      	ldr	r3, [r4, #16]
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <FLASH_WaitForLastOperation+0x50>)

  if(error != 0u)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d10e      	bne.n	8001a8a <FLASH_WaitForLastOperation+0x3e>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a6c:	6920      	ldr	r0, [r4, #16]
 8001a6e:	f010 0001 	ands.w	r0, r0, #1
 8001a72:	d002      	beq.n	8001a7a <FLASH_WaitForLastOperation+0x2e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a74:	2201      	movs	r2, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	6122      	str	r2, [r4, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001a7c:	f7ff f914 	bl	8000ca8 <HAL_GetTick>
 8001a80:	1b80      	subs	r0, r0, r6
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	d3eb      	bcc.n	8001a5e <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
}
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8001a8a:	4905      	ldr	r1, [pc, #20]	; (8001aa0 <FLASH_WaitForLastOperation+0x54>)
 8001a8c:	684a      	ldr	r2, [r1, #4]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8001a94:	6123      	str	r3, [r4, #16]
}
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	0002c3fa 	.word	0x0002c3fa
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <HAL_FLASH_Program>:
{
 8001aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001aa8:	4e34      	ldr	r6, [pc, #208]	; (8001b7c <HAL_FLASH_Program+0xd8>)
 8001aaa:	f896 c000 	ldrb.w	ip, [r6]
 8001aae:	f1bc 0f01 	cmp.w	ip, #1
 8001ab2:	d035      	beq.n	8001b20 <HAL_FLASH_Program+0x7c>
 8001ab4:	4698      	mov	r8, r3
 8001ab6:	4607      	mov	r7, r0
 8001ab8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001abe:	4614      	mov	r4, r2
 8001ac0:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8001ac2:	7033      	strb	r3, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ac4:	f7ff ffc2 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001ac8:	4681      	mov	r9, r0
  if(status == HAL_OK)
 8001aca:	b120      	cbz	r0, 8001ad6 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8001acc:	2300      	movs	r3, #0
 8001ace:	7033      	strb	r3, [r6, #0]
}
 8001ad0:	4648      	mov	r0, r9
 8001ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <HAL_FLASH_Program+0xdc>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ad8:	6070      	str	r0, [r6, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001ae0:	d023      	beq.n	8001b2a <HAL_FLASH_Program+0x86>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ae2:	6813      	ldr	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001ae4:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001aec:	7731      	strb	r1, [r6, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001aee:	b9ff      	cbnz	r7, 8001b30 <HAL_FLASH_Program+0x8c>
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_FLASH_Program+0xdc>)
 8001af2:	6953      	ldr	r3, [r2, #20]
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001afa:	602c      	str	r4, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001afc:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b00:	f24c 3050 	movw	r0, #50000	; 0xc350
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001b04:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b08:	f7ff ffa0 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001b0c:	f06f 0101 	mvn.w	r1, #1
 8001b10:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_FLASH_Program+0xdc>)
 8001b14:	6953      	ldr	r3, [r2, #20]
 8001b16:	400b      	ands	r3, r1
 8001b18:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8001b1a:	f000 f833 	bl	8001b84 <FLASH_FlushCaches>
 8001b1e:	e7d5      	b.n	8001acc <HAL_FLASH_Program+0x28>
  __HAL_LOCK(&pFlash);
 8001b20:	f04f 0902 	mov.w	r9, #2
}
 8001b24:	4648      	mov	r0, r9
 8001b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001b2a:	7733      	strb	r3, [r6, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001b2c:	2f00      	cmp	r7, #0
 8001b2e:	d0df      	beq.n	8001af0 <HAL_FLASH_Program+0x4c>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001b30:	1e7b      	subs	r3, r7, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d905      	bls.n	8001b42 <HAL_FLASH_Program+0x9e>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b3a:	f7ff ff87 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001b3e:	4681      	mov	r9, r0
 8001b40:	e7eb      	b.n	8001b1a <HAL_FLASH_Program+0x76>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001b42:	490f      	ldr	r1, [pc, #60]	; (8001b80 <HAL_FLASH_Program+0xdc>)
 8001b44:	694b      	ldr	r3, [r1, #20]
 8001b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001b4a:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001b4c:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b4e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b52:	b672      	cpsid	i
 8001b54:	1b29      	subs	r1, r5, r4
 8001b56:	f504 7480 	add.w	r4, r4, #256	; 0x100
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 8001b5e:	3204      	adds	r2, #4
    row_index--;
  } while (row_index != 0U);
 8001b60:	4294      	cmp	r4, r2
 8001b62:	d1fa      	bne.n	8001b5a <HAL_FLASH_Program+0xb6>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b64:	f380 8810 	msr	PRIMASK, r0
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001b68:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001b6e:	d1e4      	bne.n	8001b3a <HAL_FLASH_Program+0x96>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b70:	f7ff ff6c 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001b74:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
 8001b78:	4681      	mov	r9, r0
 8001b7a:	e7ca      	b.n	8001b12 <HAL_FLASH_Program+0x6e>
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	40022000 	.word	0x40022000

08001b84 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001b84:	4913      	ldr	r1, [pc, #76]	; (8001bd4 <FLASH_FlushCaches+0x50>)
 8001b86:	7f0b      	ldrb	r3, [r1, #28]
 8001b88:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001b8a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8001b8e:	2a01      	cmp	r2, #1
 8001b90:	d10c      	bne.n	8001bac <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <FLASH_FlushCaches+0x54>)
 8001b94:	6810      	ldr	r0, [r2, #0]
 8001b96:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001b9a:	6010      	str	r0, [r2, #0]
 8001b9c:	6810      	ldr	r0, [r2, #0]
 8001b9e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8001ba2:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	6810      	ldr	r0, [r2, #0]
 8001ba6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8001baa:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001bac:	3b02      	subs	r3, #2
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d80c      	bhi.n	8001bcc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <FLASH_FlushCaches+0x54>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	770b      	strb	r3, [r1, #28]
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_FLASHEx_Erase>:
{
 8001bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8001be0:	4e42      	ldr	r6, [pc, #264]	; (8001cec <HAL_FLASHEx_Erase+0x110>)
 8001be2:	7833      	ldrb	r3, [r6, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d055      	beq.n	8001c94 <HAL_FLASHEx_Erase+0xb8>
 8001be8:	4605      	mov	r5, r0
 8001bea:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bf0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001bf2:	7034      	strb	r4, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bf4:	f7ff ff2a 	bl	8001a4c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001bf8:	4607      	mov	r7, r0
 8001bfa:	b120      	cbz	r0, 8001c06 <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	7033      	strb	r3, [r6, #0]
}
 8001c00:	4638      	mov	r0, r7
 8001c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001c06:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <HAL_FLASHEx_Erase+0x114>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c08:	6070      	str	r0, [r6, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c10:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001c12:	d143      	bne.n	8001c9c <HAL_FLASHEx_Erase+0xc0>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	d567      	bpl.n	8001ce8 <HAL_FLASHEx_Erase+0x10c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c18:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001c1a:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001c22:	7731      	strb	r1, [r6, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d045      	beq.n	8001cb6 <HAL_FLASHEx_Erase+0xda>
      *PageError = 0xFFFFFFFFU;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2e:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001c32:	e9d5 9302 	ldrd	r9, r3, [r5, #8]
 8001c36:	444b      	add	r3, r9
 8001c38:	4599      	cmp	r9, r3
 8001c3a:	d228      	bcs.n	8001c8e <HAL_FLASHEx_Erase+0xb2>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001c3c:	4c2c      	ldr	r4, [pc, #176]	; (8001cf0 <HAL_FLASHEx_Erase+0x114>)
 8001c3e:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8001c42:	e006      	b.n	8001c52 <HAL_FLASHEx_Erase+0x76>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001c44:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8001c48:	f109 0901 	add.w	r9, r9, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	454b      	cmp	r3, r9
 8001c50:	d91d      	bls.n	8001c8e <HAL_FLASHEx_Erase+0xb2>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001c52:	6963      	ldr	r3, [r4, #20]
 8001c54:	f40a 62ff 	and.w	r2, sl, #2040	; 0x7f8
 8001c58:	f423 73fc 	bic.w	r3, r3, #504	; 0x1f8
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c60:	6963      	ldr	r3, [r4, #20]
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c68:	6963      	ldr	r3, [r4, #20]
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6e:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c74:	f7ff feea 	bl	8001a4c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001c78:	6963      	ldr	r3, [r4, #20]
 8001c7a:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8001c7e:	f10a 0a08 	add.w	sl, sl, #8
 8001c82:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d0dd      	beq.n	8001c44 <HAL_FLASHEx_Erase+0x68>
          *PageError = page_index;
 8001c88:	f8c8 9000 	str.w	r9, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c8c:	4607      	mov	r7, r0
    FLASH_FlushCaches();
 8001c8e:	f7ff ff79 	bl	8001b84 <FLASH_FlushCaches>
 8001c92:	e7b3      	b.n	8001bfc <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8001c94:	2702      	movs	r7, #2
}
 8001c96:	4638      	mov	r0, r7
 8001c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca0:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	0551      	lsls	r1, r2, #21
 8001ca6:	d51d      	bpl.n	8001ce4 <HAL_FLASHEx_Erase+0x108>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ca8:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001caa:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb0:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001cb2:	7731      	strb	r1, [r6, #28]
 8001cb4:	e7b6      	b.n	8001c24 <HAL_FLASHEx_Erase+0x48>
    if((Banks & FLASH_BANK_1) != 0U)
 8001cb6:	686b      	ldr	r3, [r5, #4]
 8001cb8:	07db      	lsls	r3, r3, #31
 8001cba:	d504      	bpl.n	8001cc6 <HAL_FLASHEx_Erase+0xea>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <HAL_FLASHEx_Erase+0x114>)
 8001cbe:	6953      	ldr	r3, [r2, #20]
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001cc6:	4c0a      	ldr	r4, [pc, #40]	; (8001cf0 <HAL_FLASHEx_Erase+0x114>)
 8001cc8:	6963      	ldr	r3, [r4, #20]
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cd4:	f7ff feba 	bl	8001a4c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001cd8:	6963      	ldr	r3, [r4, #20]
 8001cda:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cde:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001ce0:	6163      	str	r3, [r4, #20]
 8001ce2:	e7d4      	b.n	8001c8e <HAL_FLASHEx_Erase+0xb2>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001ce4:	7734      	strb	r4, [r6, #28]
 8001ce6:	e79d      	b.n	8001c24 <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001ce8:	7730      	strb	r0, [r6, #28]
 8001cea:	e79b      	b.n	8001c24 <HAL_FLASHEx_Erase+0x48>
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001cfc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	f1be 0f00 	cmp.w	lr, #0
 8001d02:	d07a      	beq.n	8001dfa <HAL_GPIO_Init+0x106>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001e80 <HAL_GPIO_Init+0x18c>
 8001d08:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 8001d0a:	2600      	movs	r6, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	fa03 f206 	lsl.w	r2, r3, r6
    if (iocurrent != 0x00u)
 8001d12:	ea12 070e 	ands.w	r7, r2, lr
 8001d16:	d06c      	beq.n	8001df2 <HAL_GPIO_Init+0xfe>
 8001d18:	e9d8 1401 	ldrd	r1, r4, [r8, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1c:	f021 0b10 	bic.w	fp, r1, #16
 8001d20:	fa06 fc03 	lsl.w	ip, r6, r3
 8001d24:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
 8001d28:	2303      	movs	r3, #3
 8001d2a:	fa03 fa0c 	lsl.w	sl, r3, ip
 8001d2e:	2d01      	cmp	r5, #1
 8001d30:	ea6f 0a0a 	mvn.w	sl, sl
 8001d34:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d38:	d962      	bls.n	8001e00 <HAL_GPIO_Init+0x10c>
      temp = GPIOx->PUPDR;
 8001d3a:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d3c:	ea03 030a 	and.w	r3, r3, sl
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d40:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 8001d42:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 8001d44:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d46:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d4a:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001d52:	ea43 030a 	orr.w	r3, r3, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d56:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 8001d58:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	d54a      	bpl.n	8001df2 <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5c:	4a44      	ldr	r2, [pc, #272]	; (8001e70 <HAL_GPIO_Init+0x17c>)
 8001d5e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6613      	str	r3, [r2, #96]	; 0x60
 8001d66:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001d68:	f026 0203 	bic.w	r2, r6, #3
 8001d6c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001d78:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d7a:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d80:	6894      	ldr	r4, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	250f      	movs	r5, #15
 8001d86:	409d      	lsls	r5, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d88:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8c:	ea24 0405 	bic.w	r4, r4, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0xba>
 8001d92:	4d38      	ldr	r5, [pc, #224]	; (8001e74 <HAL_GPIO_Init+0x180>)
 8001d94:	42a8      	cmp	r0, r5
 8001d96:	d065      	beq.n	8001e64 <HAL_GPIO_Init+0x170>
 8001d98:	4d37      	ldr	r5, [pc, #220]	; (8001e78 <HAL_GPIO_Init+0x184>)
 8001d9a:	42a8      	cmp	r0, r5
 8001d9c:	d05d      	beq.n	8001e5a <HAL_GPIO_Init+0x166>
 8001d9e:	4d37      	ldr	r5, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x188>)
 8001da0:	42a8      	cmp	r0, r5
 8001da2:	bf0c      	ite	eq
 8001da4:	2503      	moveq	r5, #3
 8001da6:	2507      	movne	r5, #7
 8001da8:	fa05 f303 	lsl.w	r3, r5, r3
 8001dac:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dae:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR1;
 8001db0:	f8d9 3000 	ldr.w	r3, [r9]
        temp &= ~(iocurrent);
 8001db4:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db6:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 8001db8:	bf54      	ite	pl
 8001dba:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001dbc:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 8001dbe:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR1;
 8001dc2:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc6:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 8001dc8:	bf54      	ite	pl
 8001dca:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001dcc:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 8001dce:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd2:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd6:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 8001dd8:	bf54      	ite	pl
 8001dda:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ddc:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 8001dde:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR1;
 8001de2:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de6:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 8001de8:	bf54      	ite	pl
 8001dea:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001dec:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 8001dee:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 8001df2:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df4:	fa3e f306 	lsrs.w	r3, lr, r6
 8001df8:	d188      	bne.n	8001d0c <HAL_GPIO_Init+0x18>
  }
}
 8001dfa:	b003      	add	sp, #12
 8001dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001e00:	6883      	ldr	r3, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e02:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e06:	ea03 030a 	and.w	r3, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e0a:	fa05 f50c 	lsl.w	r5, r5, ip
 8001e0e:	431d      	orrs	r5, r3
        GPIOx->OSPEEDR = temp;
 8001e10:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e12:	6843      	ldr	r3, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e14:	f3c1 1500 	ubfx	r5, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e18:	ea23 0302 	bic.w	r3, r3, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e1c:	462a      	mov	r2, r5
 8001e1e:	40b2      	lsls	r2, r6
 8001e20:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 8001e22:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e24:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e26:	ea03 030a 	and.w	r3, r3, sl
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2a:	431c      	orrs	r4, r3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	f1bb 0f02 	cmp.w	fp, #2
      GPIOx->PUPDR = temp;
 8001e30:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e32:	d187      	bne.n	8001d44 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8001e34:	08f4      	lsrs	r4, r6, #3
 8001e36:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e3a:	f006 0307 	and.w	r3, r6, #7
        temp = GPIOx->AFR[position >> 3u];
 8001e3e:	6a25      	ldr	r5, [r4, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e40:	f8d8 2010 	ldr.w	r2, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	f04f 0b0f 	mov.w	fp, #15
 8001e4a:	fa0b fb03 	lsl.w	fp, fp, r3
 8001e4e:	ea25 050b 	bic.w	r5, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e52:	409a      	lsls	r2, r3
 8001e54:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001e56:	6222      	str	r2, [r4, #32]
 8001e58:	e774      	b.n	8001d44 <HAL_GPIO_Init+0x50>
 8001e5a:	2502      	movs	r5, #2
 8001e5c:	fa05 f303 	lsl.w	r3, r5, r3
 8001e60:	431c      	orrs	r4, r3
 8001e62:	e7a4      	b.n	8001dae <HAL_GPIO_Init+0xba>
 8001e64:	2501      	movs	r5, #1
 8001e66:	fa05 f303 	lsl.w	r3, r5, r3
 8001e6a:	431c      	orrs	r4, r3
 8001e6c:	e79f      	b.n	8001dae <HAL_GPIO_Init+0xba>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e84:	6903      	ldr	r3, [r0, #16]
 8001e86:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001e88:	bf14      	ite	ne
 8001e8a:	2001      	movne	r0, #1
 8001e8c:	2000      	moveq	r0, #0
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	b90a      	cbnz	r2, 8001e96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e92:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001e94:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e96:	6181      	str	r1, [r0, #24]
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e9e:	6951      	ldr	r1, [r2, #20]
 8001ea0:	4201      	tst	r1, r0
 8001ea2:	d100      	bne.n	8001ea6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001ea4:	4770      	bx	lr
{
 8001ea6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ea8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eaa:	f005 fa15 	bl	80072d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eae:	bd08      	pop	{r3, pc}
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <I2C_IsAcknowledgeFailed.part.1>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	4605      	mov	r5, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	4616      	mov	r6, r2
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ebc:	6828      	ldr	r0, [r5, #0]
 8001ebe:	e001      	b.n	8001ec4 <I2C_IsAcknowledgeFailed.part.1+0x10>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ec0:	1c63      	adds	r3, r4, #1
 8001ec2:	d120      	bne.n	8001f06 <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec4:	6983      	ldr	r3, [r0, #24]
 8001ec6:	0699      	lsls	r1, r3, #26
 8001ec8:	d5fa      	bpl.n	8001ec0 <I2C_IsAcknowledgeFailed.part.1+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eca:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ecc:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ece:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed0:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ed2:	6983      	ldr	r3, [r0, #24]
 8001ed4:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001ed6:	bf44      	itt	mi
 8001ed8:	2300      	movmi	r3, #0
 8001eda:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001edc:	6983      	ldr	r3, [r0, #24]
 8001ede:	07db      	lsls	r3, r3, #31
 8001ee0:	d51c      	bpl.n	8001f1c <I2C_IsAcknowledgeFailed.part.1+0x68>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ee2:	6843      	ldr	r3, [r0, #4]
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <I2C_IsAcknowledgeFailed.part.1+0x74>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	6043      	str	r3, [r0, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eee:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ef4:	646b      	str	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8001efe:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8001f04:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7fe fecf 	bl	8000ca8 <HAL_GetTick>
 8001f0a:	1b80      	subs	r0, r0, r6
 8001f0c:	4284      	cmp	r4, r0
 8001f0e:	d301      	bcc.n	8001f14 <I2C_IsAcknowledgeFailed.part.1+0x60>
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d1d3      	bne.n	8001ebc <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f16:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	e7ea      	b.n	8001ef2 <I2C_IsAcknowledgeFailed.part.1+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f1c:	6983      	ldr	r3, [r0, #24]
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6183      	str	r3, [r0, #24]
 8001f24:	e7dd      	b.n	8001ee2 <I2C_IsAcknowledgeFailed.part.1+0x2e>
 8001f26:	bf00      	nop
 8001f28:	fe00e800 	.word	0xfe00e800

08001f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	4605      	mov	r5, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f34:	e008      	b.n	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	0690      	lsls	r0, r2, #26
 8001f3a:	d416      	bmi.n	8001f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3c:	f7fe feb4 	bl	8000ca8 <HAL_GetTick>
 8001f40:	1b80      	subs	r0, r0, r6
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	d826      	bhi.n	8001f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8001f46:	b32c      	cbz	r4, 8001f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	0752      	lsls	r2, r2, #29
 8001f4e:	d42c      	bmi.n	8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	06d2      	lsls	r2, r2, #27
 8001f54:	d5ef      	bpl.n	8001f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 8001f56:	4632      	mov	r2, r6
 8001f58:	4621      	mov	r1, r4
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f7ff ffaa 	bl	8001eb4 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f60:	bb28      	cbnz	r0, 8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x82>
 8001f62:	682b      	ldr	r3, [r5, #0]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	0690      	lsls	r0, r2, #26
 8001f68:	d5e8      	bpl.n	8001f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	0751      	lsls	r1, r2, #29
 8001f6e:	d501      	bpl.n	8001f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001f70:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8001f72:	b9d2      	cbnz	r2, 8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f74:	2420      	movs	r4, #32
 8001f76:	61dc      	str	r4, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x88>)
 8001f7c:	4011      	ands	r1, r2
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7e:	2200      	movs	r2, #0
        I2C_RESET_CR2(hi2c);
 8001f80:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	646a      	str	r2, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001f86:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8001f9a:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001f9e:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
      return HAL_ERROR;
 8001fa6:	2001      	movs	r0, #1
}
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_OK;
 8001faa:	2000      	movs	r0, #0
}
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
}
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	bf00      	nop
 8001fb4:	fe00e800 	.word	0xfe00e800

08001fb8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4605      	mov	r5, r0
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc0:	e001      	b.n	8001fc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	1c61      	adds	r1, r4, #1
 8001fc4:	d111      	bne.n	8001fea <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	0792      	lsls	r2, r2, #30
 8001fcc:	d40b      	bmi.n	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	06d8      	lsls	r0, r3, #27
 8001fd2:	d5f6      	bpl.n	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f7ff ff6b 	bl	8001eb4 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d0ef      	beq.n	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8001fe2:	2001      	movs	r0, #1
}
 8001fe4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fea:	f7fe fe5d 	bl	8000ca8 <HAL_GetTick>
 8001fee:	1b80      	subs	r0, r0, r6
 8001ff0:	42a0      	cmp	r0, r4
 8001ff2:	d801      	bhi.n	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff4:	2c00      	cmp	r4, #0
 8001ff6:	d1e6      	bne.n	8001fc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	430b      	orrs	r3, r1
 8002000:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002002:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002006:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800200a:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	bf00      	nop

08002014 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	4605      	mov	r5, r0
 8002018:	460c      	mov	r4, r1
 800201a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201c:	e00b      	b.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	06db      	lsls	r3, r3, #27
 8002022:	d502      	bpl.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8002024:	f7ff ff46 	bl	8001eb4 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002028:	b9d8      	cbnz	r0, 8002062 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7fe fe3d 	bl	8000ca8 <HAL_GetTick>
 800202e:	1b80      	subs	r0, r0, r6
 8002030:	42a0      	cmp	r0, r4
 8002032:	d809      	bhi.n	8002048 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8002034:	b144      	cbz	r4, 8002048 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002036:	682b      	ldr	r3, [r5, #0]
 8002038:	699f      	ldr	r7, [r3, #24]
 800203a:	06bf      	lsls	r7, r7, #26
 800203c:	4632      	mov	r2, r6
 800203e:	4621      	mov	r1, r4
 8002040:	4628      	mov	r0, r5
 8002042:	d5ec      	bpl.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8002044:	2000      	movs	r0, #0
}
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002048:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800204a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204e:	430b      	orrs	r3, r1
 8002050:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002052:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002056:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800205a:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
}
 8002064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002066:	bf00      	nop

08002068 <I2C_WaitOnFlagUntilTimeout>:
{
 8002068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800206c:	4680      	mov	r8, r0
 800206e:	460f      	mov	r7, r1
 8002070:	4616      	mov	r6, r2
 8002072:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002074:	f8d8 4000 	ldr.w	r4, [r8]
 8002078:	e001      	b.n	800207e <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800207a:	1c6b      	adds	r3, r5, #1
 800207c:	d10a      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800207e:	69a0      	ldr	r0, [r4, #24]
 8002080:	ea37 0300 	bics.w	r3, r7, r0
 8002084:	bf0c      	ite	eq
 8002086:	2001      	moveq	r0, #1
 8002088:	2000      	movne	r0, #0
 800208a:	42b0      	cmp	r0, r6
 800208c:	d0f5      	beq.n	800207a <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800208e:	2000      	movs	r0, #0
}
 8002090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7fe fe08 	bl	8000ca8 <HAL_GetTick>
 8002098:	9b06      	ldr	r3, [sp, #24]
 800209a:	1ac0      	subs	r0, r0, r3
 800209c:	42a8      	cmp	r0, r5
 800209e:	d801      	bhi.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x3c>
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	d1e7      	bne.n	8002074 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ac:	430b      	orrs	r3, r1
 80020ae:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80020b2:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80020ba:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 80020c0:	e7e6      	b.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x28>
 80020c2:	bf00      	nop

080020c4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d04e      	beq.n	8002166 <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80020cc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020d2:	4604      	mov	r4, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d041      	beq.n	800215c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	2224      	movs	r2, #36	; 0x24
 80020da:	1d21      	adds	r1, r4, #4
 80020dc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	c926      	ldmia	r1, {r1, r2, r5}
 80020e4:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020e6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80020ea:	f020 0001 	bic.w	r0, r0, #1
 80020ee:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f0:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020f2:	6899      	ldr	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f4:	2d01      	cmp	r5, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020f6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80020fa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020fc:	d02a      	beq.n	8002154 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002102:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002104:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002106:	bf04      	itt	eq
 8002108:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800210c:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800210e:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002110:	69a5      	ldr	r5, [r4, #24]
 8002112:	e9d4 2604 	ldrd	r2, r6, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002116:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800211a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800211e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002120:	4332      	orrs	r2, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002122:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002124:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002126:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800212a:	6a25      	ldr	r5, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800212c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002130:	4329      	orrs	r1, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002132:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002134:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002136:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002138:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213a:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800213c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002140:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002142:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8002144:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002146:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002148:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800214c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002152:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e7d8      	b.n	800210e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 800215c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002160:	f006 f962 	bl	8008428 <HAL_I2C_MspInit>
 8002164:	e7b8      	b.n	80020d8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002166:	2001      	movs	r0, #1
}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <HAL_I2C_Master_Transmit>:
{
 800216c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002174:	2c20      	cmp	r4, #32
{
 8002176:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002178:	d16e      	bne.n	8002258 <HAL_I2C_Master_Transmit+0xec>
    __HAL_LOCK(hi2c);
 800217a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800217e:	2c01      	cmp	r4, #1
 8002180:	d06a      	beq.n	8002258 <HAL_I2C_Master_Transmit+0xec>
 8002182:	f04f 0901 	mov.w	r9, #1
 8002186:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 800218a:	4698      	mov	r8, r3
 800218c:	4617      	mov	r7, r2
 800218e:	460e      	mov	r6, r1
 8002190:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002192:	f7fe fd89 	bl	8000ca8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002196:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8002198:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800219a:	9000      	str	r0, [sp, #0]
 800219c:	2319      	movs	r3, #25
 800219e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff ff60 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d159      	bne.n	8002260 <HAL_I2C_Master_Transmit+0xf4>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ac:	2321      	movs	r3, #33	; 0x21
 80021ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021b2:	2310      	movs	r3, #16
 80021b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80021ba:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80021c0:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c2:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80021c4:	6360      	str	r0, [r4, #52]	; 0x34
 80021c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80021ca:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021cc:	d958      	bls.n	8002280 <HAL_I2C_Master_Transmit+0x114>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021ce:	6853      	ldr	r3, [r2, #4]
 80021d0:	483c      	ldr	r0, [pc, #240]	; (80022c4 <HAL_I2C_Master_Transmit+0x158>)
 80021d2:	493d      	ldr	r1, [pc, #244]	; (80022c8 <HAL_I2C_Master_Transmit+0x15c>)
 80021d4:	4003      	ands	r3, r0
 80021d6:	4331      	orrs	r1, r6
 80021d8:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021da:	21ff      	movs	r1, #255	; 0xff
 80021dc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021de:	6053      	str	r3, [r2, #4]
 80021e0:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 80021e4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80022d0 <HAL_I2C_Master_Transmit+0x164>
 80021e8:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 80021ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80021f0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	462a      	mov	r2, r5
 80021f4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d052      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x134>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fa:	f7ff fedd 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80021fe:	2800      	cmp	r0, #0
 8002200:	d12e      	bne.n	8002260 <HAL_I2C_Master_Transmit+0xf4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002202:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800220c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800220e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002210:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002212:	3b01      	subs	r3, #1
 8002214:	b29b      	uxth	r3, r3
 8002216:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002218:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800221a:	3a01      	subs	r2, #1
 800221c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800221e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002220:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0e2      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x80>
 8002226:	2a00      	cmp	r2, #0
 8002228:	d1e0      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x80>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800222a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800222c:	9500      	str	r5, [sp, #0]
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff ff19 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002236:	f04f 0cff 	mov.w	ip, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800223a:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800223e:	b978      	cbnz	r0, 8002260 <HAL_I2C_Master_Transmit+0xf4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002240:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	4561      	cmp	r1, ip
 8002246:	d90f      	bls.n	8002268 <HAL_I2C_Master_Transmit+0xfc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002248:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800224e:	ea03 0308 	and.w	r3, r3, r8
 8002252:	433b      	orrs	r3, r7
 8002254:	6053      	str	r3, [r2, #4]
 8002256:	e7c9      	b.n	80021ec <HAL_I2C_Master_Transmit+0x80>
    return HAL_BUSY;
 8002258:	2002      	movs	r0, #2
}
 800225a:	b003      	add	sp, #12
 800225c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8002260:	2001      	movs	r0, #1
}
 8002262:	b003      	add	sp, #12
 8002264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002268:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800226a:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800226c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800226e:	ea00 0008 	and.w	r0, r0, r8
 8002272:	4303      	orrs	r3, r0
 8002274:	b2c8      	uxtb	r0, r1
 8002276:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 800227a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800227c:	6053      	str	r3, [r2, #4]
 800227e:	e7b5      	b.n	80021ec <HAL_I2C_Master_Transmit+0x80>
      hi2c->XferSize = hi2c->XferCount;
 8002280:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002282:	4f10      	ldr	r7, [pc, #64]	; (80022c4 <HAL_I2C_Master_Transmit+0x158>)
 8002284:	6853      	ldr	r3, [r2, #4]
 8002286:	f046 4002 	orr.w	r0, r6, #2181038080	; 0x82000000
      hi2c->XferSize = hi2c->XferCount;
 800228a:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800228c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002290:	403b      	ands	r3, r7
 8002292:	4303      	orrs	r3, r0
 8002294:	b2c8      	uxtb	r0, r1
 8002296:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 800229a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800229c:	6053      	str	r3, [r2, #4]
 800229e:	e79f      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x74>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	f7ff feb8 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d1db      	bne.n	8002260 <HAL_I2C_Master_Transmit+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80022aa:	4d08      	ldr	r5, [pc, #32]	; (80022cc <HAL_I2C_Master_Transmit+0x160>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ac:	2120      	movs	r1, #32
 80022ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	402a      	ands	r2, r5
 80022b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022ba:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80022c2:	e7ca      	b.n	800225a <HAL_I2C_Master_Transmit+0xee>
 80022c4:	fc009800 	.word	0xfc009800
 80022c8:	81ff2000 	.word	0x81ff2000
 80022cc:	fe00e800 	.word	0xfe00e800
 80022d0:	fc009c00 	.word	0xfc009c00

080022d4 <HAL_I2C_Master_Receive>:
{
 80022d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80022dc:	2c20      	cmp	r4, #32
{
 80022de:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	d16f      	bne.n	80023c2 <HAL_I2C_Master_Receive+0xee>
    __HAL_LOCK(hi2c);
 80022e2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80022e6:	2c01      	cmp	r4, #1
 80022e8:	d06b      	beq.n	80023c2 <HAL_I2C_Master_Receive+0xee>
 80022ea:	f04f 0901 	mov.w	r9, #1
 80022ee:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 80022f2:	4698      	mov	r8, r3
 80022f4:	4617      	mov	r7, r2
 80022f6:	460e      	mov	r6, r1
 80022f8:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80022fa:	f7fe fcd5 	bl	8000ca8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fe:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8002300:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002302:	9000      	str	r0, [sp, #0]
 8002304:	2319      	movs	r3, #25
 8002306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff feac 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8002310:	2800      	cmp	r0, #0
 8002312:	d15a      	bne.n	80023ca <HAL_I2C_Master_Receive+0xf6>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002314:	2322      	movs	r3, #34	; 0x22
 8002316:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800231a:	2310      	movs	r3, #16
 800231c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002322:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002326:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002328:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800232a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800232c:	6360      	str	r0, [r4, #52]	; 0x34
 800232e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002332:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	d959      	bls.n	80023ea <HAL_I2C_Master_Receive+0x116>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002336:	6853      	ldr	r3, [r2, #4]
 8002338:	483d      	ldr	r0, [pc, #244]	; (8002430 <HAL_I2C_Master_Receive+0x15c>)
 800233a:	493e      	ldr	r1, [pc, #248]	; (8002434 <HAL_I2C_Master_Receive+0x160>)
 800233c:	4003      	ands	r3, r0
 800233e:	4331      	orrs	r1, r6
 8002340:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002342:	21ff      	movs	r1, #255	; 0xff
 8002344:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002346:	6053      	str	r3, [r2, #4]
 8002348:	f046 77ff 	orr.w	r7, r6, #33423360	; 0x1fe0000
 800234c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800243c <HAL_I2C_Master_Receive+0x168>
 8002350:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 8002354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002358:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	462a      	mov	r2, r5
 800235c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800235e:	2b00      	cmp	r3, #0
 8002360:	d053      	beq.n	800240a <HAL_I2C_Master_Receive+0x136>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002362:	f7ff fde3 	bl	8001f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002366:	2800      	cmp	r0, #0
 8002368:	d12f      	bne.n	80023ca <HAL_I2C_Master_Receive+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800236e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002370:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002372:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002374:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002376:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002378:	3901      	subs	r1, #1
 800237a:	b289      	uxth	r1, r1
 800237c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800237e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002380:	3a01      	subs	r2, #1
 8002382:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002384:	3301      	adds	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002386:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002388:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800238a:	6263      	str	r3, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800238c:	2900      	cmp	r1, #0
 800238e:	d0e1      	beq.n	8002354 <HAL_I2C_Master_Receive+0x80>
 8002390:	2a00      	cmp	r2, #0
 8002392:	d1df      	bne.n	8002354 <HAL_I2C_Master_Receive+0x80>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002396:	9500      	str	r5, [sp, #0]
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff fe64 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023a4:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023a8:	b978      	cbnz	r0, 80023ca <HAL_I2C_Master_Receive+0xf6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023aa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80023ac:	6822      	ldr	r2, [r4, #0]
 80023ae:	4561      	cmp	r1, ip
 80023b0:	d90f      	bls.n	80023d2 <HAL_I2C_Master_Receive+0xfe>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023b2:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b4:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023b8:	ea03 0308 	and.w	r3, r3, r8
 80023bc:	433b      	orrs	r3, r7
 80023be:	6053      	str	r3, [r2, #4]
 80023c0:	e7c8      	b.n	8002354 <HAL_I2C_Master_Receive+0x80>
    return HAL_BUSY;
 80023c2:	2002      	movs	r0, #2
}
 80023c4:	b003      	add	sp, #12
 80023c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80023ca:	2001      	movs	r0, #1
}
 80023cc:	b003      	add	sp, #12
 80023ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 80023d2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023d4:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80023d6:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023d8:	ea00 0008 	and.w	r0, r0, r8
 80023dc:	4303      	orrs	r3, r0
 80023de:	b2c8      	uxtb	r0, r1
 80023e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 80023e4:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023e6:	6053      	str	r3, [r2, #4]
 80023e8:	e7b4      	b.n	8002354 <HAL_I2C_Master_Receive+0x80>
      hi2c->XferSize = hi2c->XferCount;
 80023ea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023ec:	4f10      	ldr	r7, [pc, #64]	; (8002430 <HAL_I2C_Master_Receive+0x15c>)
 80023ee:	6853      	ldr	r3, [r2, #4]
 80023f0:	f046 4002 	orr.w	r0, r6, #2181038080	; 0x82000000
      hi2c->XferSize = hi2c->XferCount;
 80023f4:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023f6:	f440 5010 	orr.w	r0, r0, #9216	; 0x2400
 80023fa:	403b      	ands	r3, r7
 80023fc:	4303      	orrs	r3, r0
 80023fe:	b2c8      	uxtb	r0, r1
 8002400:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8002404:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002406:	6053      	str	r3, [r2, #4]
 8002408:	e79e      	b.n	8002348 <HAL_I2C_Master_Receive+0x74>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	f7ff fe03 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 800240e:	2800      	cmp	r0, #0
 8002410:	d1db      	bne.n	80023ca <HAL_I2C_Master_Receive+0xf6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002412:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002414:	4d08      	ldr	r5, [pc, #32]	; (8002438 <HAL_I2C_Master_Receive+0x164>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002416:	2120      	movs	r1, #32
 8002418:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	402a      	ands	r2, r5
 800241e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002420:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002424:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002428:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800242c:	e7ca      	b.n	80023c4 <HAL_I2C_Master_Receive+0xf0>
 800242e:	bf00      	nop
 8002430:	fc009800 	.word	0xfc009800
 8002434:	81ff2400 	.word	0x81ff2400
 8002438:	fe00e800 	.word	0xfe00e800
 800243c:	fc009c00 	.word	0xfc009c00

08002440 <HAL_I2C_IsDeviceReady>:
{
 8002440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002444:	b084      	sub	sp, #16
  __IO uint32_t I2C_Trials = 0UL;
 8002446:	2400      	movs	r4, #0
 8002448:	9403      	str	r4, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800244a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800244e:	2d20      	cmp	r5, #32
 8002450:	d15d      	bne.n	800250e <HAL_I2C_IsDeviceReady+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002452:	f8d0 c000 	ldr.w	ip, [r0]
 8002456:	f8dc 6018 	ldr.w	r6, [ip, #24]
 800245a:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800245e:	d156      	bne.n	800250e <HAL_I2C_IsDeviceReady+0xce>
    __HAL_LOCK(hi2c);
 8002460:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002464:	2c01      	cmp	r4, #1
 8002466:	d052      	beq.n	800250e <HAL_I2C_IsDeviceReady+0xce>
 8002468:	f3c1 0709 	ubfx	r7, r1, #0, #10
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800246c:	f047 7900 	orr.w	r9, r7, #33554432	; 0x2000000
 8002470:	461c      	mov	r4, r3
 8002472:	4690      	mov	r8, r2
    __HAL_LOCK(hi2c);
 8002474:	2301      	movs	r3, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 800247c:	4605      	mov	r5, r0
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800247e:	f449 5900 	orr.w	r9, r9, #8192	; 0x2000
 8002482:	f447 5720 	orr.w	r7, r7, #10240	; 0x2800
    __HAL_LOCK(hi2c);
 8002486:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248a:	6446      	str	r6, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800248c:	68ea      	ldr	r2, [r5, #12]
 800248e:	2a01      	cmp	r2, #1
 8002490:	bf0c      	ite	eq
 8002492:	464a      	moveq	r2, r9
 8002494:	b2ba      	uxthne	r2, r7
 8002496:	f8cc 2004 	str.w	r2, [ip, #4]
      tickstart = HAL_GetTick();
 800249a:	f7fe fc05 	bl	8000ca8 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	6999      	ldr	r1, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a2:	699a      	ldr	r2, [r3, #24]
      tickstart = HAL_GetTick();
 80024a4:	4606      	mov	r6, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024a6:	0688      	lsls	r0, r1, #26
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	f002 0210 	and.w	r2, r2, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024ac:	d411      	bmi.n	80024d2 <HAL_I2C_IsDeviceReady+0x92>
 80024ae:	b10a      	cbz	r2, 80024b4 <HAL_I2C_IsDeviceReady+0x74>
 80024b0:	e00f      	b.n	80024d2 <HAL_I2C_IsDeviceReady+0x92>
 80024b2:	b971      	cbnz	r1, 80024d2 <HAL_I2C_IsDeviceReady+0x92>
        if (Timeout != HAL_MAX_DELAY)
 80024b4:	1c61      	adds	r1, r4, #1
 80024b6:	d006      	beq.n	80024c6 <HAL_I2C_IsDeviceReady+0x86>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024b8:	f7fe fbf6 	bl	8000ca8 <HAL_GetTick>
 80024bc:	1b80      	subs	r0, r0, r6
 80024be:	42a0      	cmp	r0, r4
 80024c0:	d829      	bhi.n	8002516 <HAL_I2C_IsDeviceReady+0xd6>
 80024c2:	b344      	cbz	r4, 8002516 <HAL_I2C_IsDeviceReady+0xd6>
 80024c4:	682b      	ldr	r3, [r5, #0]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c6:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	6999      	ldr	r1, [r3, #24]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024ca:	0692      	lsls	r2, r2, #26
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024cc:	f001 0110 	and.w	r1, r1, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024d0:	d5ef      	bpl.n	80024b2 <HAL_I2C_IsDeviceReady+0x72>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024d2:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024d4:	9600      	str	r6, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024d6:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024da:	4623      	mov	r3, r4
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024dc:	d03a      	beq.n	8002554 <HAL_I2C_IsDeviceReady+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	2200      	movs	r2, #0
 80024e0:	2120      	movs	r1, #32
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7ff fdc0 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 80024e8:	b9f8      	cbnz	r0, 800252a <HAL_I2C_IsDeviceReady+0xea>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f2:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f4:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 80024f8:	9a03      	ldr	r2, [sp, #12]
 80024fa:	4542      	cmp	r2, r8
 80024fc:	d019      	beq.n	8002532 <HAL_I2C_IsDeviceReady+0xf2>
      I2C_Trials++;
 80024fe:	9a03      	ldr	r2, [sp, #12]
 8002500:	3201      	adds	r2, #1
 8002502:	9203      	str	r2, [sp, #12]
    while (I2C_Trials < Trials);
 8002504:	9a03      	ldr	r2, [sp, #12]
 8002506:	4542      	cmp	r2, r8
 8002508:	d205      	bcs.n	8002516 <HAL_I2C_IsDeviceReady+0xd6>
 800250a:	469c      	mov	ip, r3
 800250c:	e7be      	b.n	800248c <HAL_I2C_IsDeviceReady+0x4c>
    return HAL_BUSY;
 800250e:	2002      	movs	r0, #2
}
 8002510:	b004      	add	sp, #16
 8002512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002516:	2320      	movs	r3, #32
 8002518:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800251e:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002526:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
}
 800252c:	b004      	add	sp, #16
 800252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002538:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	4602      	mov	r2, r0
 800253c:	4623      	mov	r3, r4
 800253e:	9600      	str	r6, [sp, #0]
 8002540:	4651      	mov	r1, sl
 8002542:	4628      	mov	r0, r5
 8002544:	f7ff fd90 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8002548:	2800      	cmp	r0, #0
 800254a:	d1ee      	bne.n	800252a <HAL_I2C_IsDeviceReady+0xea>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	f8c3 a01c 	str.w	sl, [r3, #28]
 8002552:	e7d4      	b.n	80024fe <HAL_I2C_IsDeviceReady+0xbe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002554:	2120      	movs	r1, #32
 8002556:	4628      	mov	r0, r5
 8002558:	f7ff fd86 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 800255c:	2800      	cmp	r0, #0
 800255e:	d1e4      	bne.n	800252a <HAL_I2C_IsDeviceReady+0xea>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002560:	682a      	ldr	r2, [r5, #0]
 8002562:	2320      	movs	r3, #32
 8002564:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8002566:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800256a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        return HAL_OK;
 800256e:	e7cf      	b.n	8002510 <HAL_I2C_IsDeviceReady+0xd0>

08002570 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002570:	6803      	ldr	r3, [r0, #0]
{
 8002572:	b410      	push	{r4}
  if (hi2c->XferISR != NULL)
 8002574:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002576:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002578:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800257a:	b11c      	cbz	r4, 8002584 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 800257c:	4623      	mov	r3, r4
}
 800257e:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8002582:	4718      	bx	r3
}
 8002584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <HAL_I2C_SlaveTxCpltCallback>:
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <HAL_I2C_SlaveRxCpltCallback>:
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop

08002594 <I2C_ITSlaveSeqCplt>:
{
 8002594:	4603      	mov	r3, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002596:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	6811      	ldr	r1, [r2, #0]
{
 800259c:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259e:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80025a2:	0448      	lsls	r0, r1, #17
 80025a4:	d50c      	bpl.n	80025c0 <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025a6:	6811      	ldr	r1, [r2, #0]
 80025a8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80025ac:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025ae:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 80025b2:	2929      	cmp	r1, #41	; 0x29
 80025b4:	d00e      	beq.n	80025d4 <I2C_ITSlaveSeqCplt+0x40>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025b6:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 80025ba:	292a      	cmp	r1, #42	; 0x2a
 80025bc:	d023      	beq.n	8002606 <I2C_ITSlaveSeqCplt+0x72>
}
 80025be:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80025c0:	0409      	lsls	r1, r1, #16
 80025c2:	d5f4      	bpl.n	80025ae <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80025ca:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025cc:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 80025d0:	2929      	cmp	r1, #41	; 0x29
 80025d2:	d1f0      	bne.n	80025b6 <I2C_ITSlaveSeqCplt+0x22>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025d4:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025d6:	2121      	movs	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025d8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025dc:	6319      	str	r1, [r3, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025de:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025e2:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025e4:	f000 0028 	and.w	r0, r0, #40	; 0x28
 80025e8:	2828      	cmp	r0, #40	; 0x28
 80025ea:	bf14      	ite	ne
 80025ec:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
 80025f0:	f06f 0042 	mvneq.w	r0, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025f4:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80025f6:	2400      	movs	r4, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025f8:	6011      	str	r1, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025fa:	4618      	mov	r0, r3
    __HAL_UNLOCK(hi2c);
 80025fc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002600:	f7ff ffc4 	bl	800258c <HAL_I2C_SlaveTxCpltCallback>
}
 8002604:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002606:	2028      	movs	r0, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002608:	2122      	movs	r1, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800260a:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800260e:	6319      	str	r1, [r3, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002610:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002614:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002616:	f000 0028 	and.w	r0, r0, #40	; 0x28
 800261a:	2828      	cmp	r0, #40	; 0x28
 800261c:	bf14      	ite	ne
 800261e:	f06f 00f4 	mvnne.w	r0, #244	; 0xf4
 8002622:	f06f 0044 	mvneq.w	r0, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002626:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002628:	2400      	movs	r4, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800262a:	6011      	str	r1, [r2, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800262c:	4618      	mov	r0, r3
    __HAL_UNLOCK(hi2c);
 800262e:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002632:	f7ff ffad 	bl	8002590 <HAL_I2C_SlaveRxCpltCallback>
}
 8002636:	bd10      	pop	{r4, pc}

08002638 <HAL_I2C_AddrCallback>:
}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <I2C_ITAddrCplt.isra.8.part.9>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800263e:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002640:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002642:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002644:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002646:	68a6      	ldr	r6, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002648:	68e7      	ldr	r7, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800264a:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800264c:	2b02      	cmp	r3, #2
    transferdirection = I2C_GET_DIR(hi2c);
 800264e:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002656:	d10d      	bne.n	8002674 <I2C_ITAddrCplt.isra.8.part.9+0x38>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002658:	f3c6 0609 	ubfx	r6, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800265c:	ea82 13d6 	eor.w	r3, r2, r6, lsr #7
 8002660:	f013 0306 	ands.w	r3, r3, #6
 8002664:	d110      	bne.n	8002688 <I2C_ITAddrCplt.isra.8.part.9+0x4c>
        hi2c->AddrEventCount++;
 8002666:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002668:	3201      	adds	r2, #1
 800266a:	6482      	str	r2, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800266c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800266e:	2a02      	cmp	r2, #2
 8002670:	d016      	beq.n	80026a0 <I2C_ITAddrCplt.isra.8.part.9+0x64>
}
 8002672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002674:	6823      	ldr	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8002676:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002678:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800267c:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800267e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002682:	f7ff ffd9 	bl	8002638 <HAL_I2C_AddrCallback>
}
 8002686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002688:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 800268a:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800268c:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8002690:	6023      	str	r3, [r4, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002692:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8002696:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800269a:	f7ff ffcd 	bl	8002638 <HAL_I2C_AddrCallback>
}
 800269e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026a0:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 80026a2:	6483      	str	r3, [r0, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026a4:	4632      	mov	r2, r6
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026a6:	61e7      	str	r7, [r4, #28]
          __HAL_UNLOCK(hi2c);
 80026a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026ac:	f7ff ffc4 	bl	8002638 <HAL_I2C_AddrCallback>
}
 80026b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b2:	bf00      	nop

080026b4 <HAL_I2C_ListenCpltCallback>:
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop

080026b8 <I2C_ITListenCplt>:
{
 80026b8:	b538      	push	{r3, r4, r5, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ba:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <I2C_ITListenCplt+0x6c>)
 80026bc:	62c2      	str	r2, [r0, #44]	; 0x2c
{
 80026be:	4603      	mov	r3, r0
  hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c2:	2000      	movs	r0, #0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80026c4:	0749      	lsls	r1, r1, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	6318      	str	r0, [r3, #48]	; 0x30
  hi2c->XferISR = NULL;
 80026c8:	6358      	str	r0, [r3, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026ce:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80026d4:	d512      	bpl.n	80026fc <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026da:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr++;
 80026dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80026de:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 80026e0:	3201      	adds	r2, #1
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80026e4:	b1d9      	cbz	r1, 800271e <I2C_ITListenCplt+0x66>
      hi2c->XferCount--;
 80026e6:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	3801      	subs	r0, #1
 80026ec:	b280      	uxth	r0, r0
 80026ee:	8558      	strh	r0, [r3, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f0:	6c58      	ldr	r0, [r3, #68]	; 0x44
      hi2c->XferSize--;
 80026f2:	3901      	subs	r1, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f4:	f040 0004 	orr.w	r0, r0, #4
      hi2c->XferSize--;
 80026f8:	8519      	strh	r1, [r3, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026fa:	6458      	str	r0, [r3, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026fc:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002700:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002704:	6811      	ldr	r1, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002706:	2510      	movs	r5, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002708:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 800270c:	2400      	movs	r4, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800270e:	6011      	str	r1, [r2, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002710:	4618      	mov	r0, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	61d5      	str	r5, [r2, #28]
  __HAL_UNLOCK(hi2c);
 8002714:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002718:	f7ff ffcc 	bl	80026b4 <HAL_I2C_ListenCpltCallback>
}
 800271c:	bd38      	pop	{r3, r4, r5, pc}
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	e7ec      	b.n	80026fc <I2C_ITListenCplt+0x44>
 8002722:	bf00      	nop
 8002724:	ffff0000 	.word	0xffff0000

08002728 <HAL_I2C_ErrorCallback>:
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <HAL_I2C_AbortCpltCallback>:
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop

08002730 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002730:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002734:	2a60      	cmp	r2, #96	; 0x60
{
 8002736:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002738:	d006      	beq.n	8002748 <I2C_TreatErrorCallback+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 800273a:	2200      	movs	r2, #0
 800273c:	6302      	str	r2, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800273e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002742:	f7ff fff1 	bl	8002728 <HAL_I2C_ErrorCallback>
}
 8002746:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8002748:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	2120      	movs	r1, #32
 800274c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002750:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002754:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8002756:	f7ff ffe9 	bl	800272c <HAL_I2C_AbortCpltCallback>
}
 800275a:	bd08      	pop	{r3, pc}

0800275c <I2C_ITError>:
{
 800275c:	b510      	push	{r4, lr}
 800275e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002760:	2300      	movs	r3, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002762:	483f      	ldr	r0, [pc, #252]	; (8002860 <I2C_ITError+0x104>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002764:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800276c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800276e:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002770:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002772:	6823      	ldr	r3, [r4, #0]
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002774:	3a28      	subs	r2, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002776:	4301      	orrs	r1, r0
 8002778:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800277a:	2a02      	cmp	r2, #2
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800277c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002780:	d829      	bhi.n	80027d6 <I2C_ITError+0x7a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002782:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002786:	4837      	ldr	r0, [pc, #220]	; (8002864 <I2C_ITError+0x108>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002788:	f002 0228 	and.w	r2, r2, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800278c:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002790:	2a28      	cmp	r2, #40	; 0x28
 8002792:	bf0c      	ite	eq
 8002794:	2246      	moveq	r2, #70	; 0x46
 8002796:	22f6      	movne	r2, #246	; 0xf6
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002798:	2928      	cmp	r1, #40	; 0x28
 800279a:	bf08      	it	eq
 800279c:	43d1      	mvneq	r1, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800279e:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027a0:	bf18      	it	ne
 80027a2:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027a6:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027a8:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027aa:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80027b0:	6360      	str	r0, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80027b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 80027b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80027b6:	b118      	cbz	r0, 80027c0 <I2C_ITError+0x64>
 80027b8:	2a11      	cmp	r2, #17
 80027ba:	d01c      	beq.n	80027f6 <I2C_ITError+0x9a>
 80027bc:	2a21      	cmp	r2, #33	; 0x21
 80027be:	d01a      	beq.n	80027f6 <I2C_ITError+0x9a>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80027c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027c2:	b118      	cbz	r0, 80027cc <I2C_ITError+0x70>
 80027c4:	2a12      	cmp	r2, #18
 80027c6:	d02b      	beq.n	8002820 <I2C_ITError+0xc4>
 80027c8:	2a22      	cmp	r2, #34	; 0x22
 80027ca:	d029      	beq.n	8002820 <I2C_ITError+0xc4>
      I2C_TreatErrorCallback(hi2c);
 80027cc:	4620      	mov	r0, r4
}
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_TreatErrorCallback(hi2c);
 80027d2:	f7ff bfad 	b.w	8002730 <I2C_TreatErrorCallback>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027d6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80027e0:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80027e2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80027e6:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80027e8:	bf1c      	itt	ne
 80027ea:	2220      	movne	r2, #32
 80027ec:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80027f0:	2200      	movs	r2, #0
 80027f2:	6362      	str	r2, [r4, #52]	; 0x34
 80027f4:	e7dd      	b.n	80027b2 <I2C_ITError+0x56>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	0451      	lsls	r1, r2, #17
 80027fa:	d42a      	bmi.n	8002852 <I2C_ITError+0xf6>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027fc:	f7ff f904 	bl	8001a08 <HAL_DMA_GetState>
 8002800:	2801      	cmp	r0, #1
 8002802:	d0e3      	beq.n	80027cc <I2C_ITError+0x70>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002804:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <I2C_ITError+0x10c>)
 8002808:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002810:	f7ff f884 	bl	800191c <HAL_DMA_Abort_IT>
 8002814:	b310      	cbz	r0, 800285c <I2C_ITError+0x100>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002816:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8002818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800281c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800281e:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	0412      	lsls	r2, r2, #16
 8002824:	d503      	bpl.n	800282e <I2C_ITError+0xd2>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800282c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800282e:	f7ff f8eb 	bl	8001a08 <HAL_DMA_GetState>
 8002832:	2801      	cmp	r0, #1
 8002834:	d0ca      	beq.n	80027cc <I2C_ITError+0x70>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002836:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <I2C_ITError+0x10c>)
 800283a:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800283c:	2300      	movs	r3, #0
 800283e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002842:	f7ff f86b 	bl	800191c <HAL_DMA_Abort_IT>
 8002846:	b148      	cbz	r0, 800285c <I2C_ITError+0x100>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002848:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800284a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800284e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002850:	4718      	bx	r3
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e7cf      	b.n	80027fc <I2C_ITError+0xa0>
}
 800285c:	bd10      	pop	{r4, pc}
 800285e:	bf00      	nop
 8002860:	ffff0000 	.word	0xffff0000
 8002864:	080029b1 	.word	0x080029b1
 8002868:	08002b6d 	.word	0x08002b6d

0800286c <I2C_ITSlaveCplt>:
{
 800286c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800286e:	6803      	ldr	r3, [r0, #0]
{
 8002870:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002872:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002874:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002878:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	2520      	movs	r5, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800287e:	2a21      	cmp	r2, #33	; 0x21
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002880:	61dd      	str	r5, [r3, #28]
{
 8002882:	460d      	mov	r5, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002884:	d04f      	beq.n	8002926 <I2C_ITSlaveCplt+0xba>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002886:	2a22      	cmp	r2, #34	; 0x22
 8002888:	d074      	beq.n	8002974 <I2C_ITSlaveCplt+0x108>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800288a:	6859      	ldr	r1, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800288c:	4e46      	ldr	r6, [pc, #280]	; (80029a8 <I2C_ITSlaveCplt+0x13c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800288e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002892:	6059      	str	r1, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4032      	ands	r2, r6
 8002898:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800289e:	bf44      	itt	mi
 80028a0:	2200      	movmi	r2, #0
 80028a2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	07d2      	lsls	r2, r2, #31
 80028a8:	d403      	bmi.n	80028b2 <I2C_ITSlaveCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028b2:	0446      	lsls	r6, r0, #17
 80028b4:	d53f      	bpl.n	8002936 <I2C_ITSlaveCplt+0xca>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028b6:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80028b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028be:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80028c0:	b119      	cbz	r1, 80028ca <I2C_ITSlaveCplt+0x5e>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80028c2:	680a      	ldr	r2, [r1, #0]
 80028c4:	6852      	ldr	r2, [r2, #4]
 80028c6:	b292      	uxth	r2, r2
 80028c8:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80028ca:	076a      	lsls	r2, r5, #29
 80028cc:	d50a      	bpl.n	80028e4 <I2C_ITSlaveCplt+0x78>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80028d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80028d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80028d8:	3301      	adds	r3, #1
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80028da:	f025 0504 	bic.w	r5, r5, #4
    hi2c->pBuffPtr++;
 80028de:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80028e0:	2a00      	cmp	r2, #0
 80028e2:	d140      	bne.n	8002966 <I2C_ITSlaveCplt+0xfa>
  if (hi2c->XferCount != 0U)
 80028e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b11b      	cbz	r3, 80028f2 <I2C_ITSlaveCplt+0x86>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028f8:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80028fa:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028fc:	2e00      	cmp	r6, #0
 80028fe:	d141      	bne.n	8002984 <I2C_ITSlaveCplt+0x118>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002900:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002902:	4d2a      	ldr	r5, [pc, #168]	; (80029ac <I2C_ITSlaveCplt+0x140>)
 8002904:	42ab      	cmp	r3, r5
 8002906:	d120      	bne.n	800294a <I2C_ITSlaveCplt+0xde>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002908:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800290c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002910:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	f04f 0320 	mov.w	r3, #32
 8002916:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800291a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800291c:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800291e:	d03f      	beq.n	80029a0 <I2C_ITSlaveCplt+0x134>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002920:	f7ff fe34 	bl	800258c <HAL_I2C_SlaveTxCpltCallback>
}
 8002924:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002926:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	f021 01fa 	bic.w	r1, r1, #250	; 0xfa
 8002930:	6019      	str	r1, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002932:	6322      	str	r2, [r4, #48]	; 0x30
 8002934:	e7a9      	b.n	800288a <I2C_ITSlaveCplt+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002936:	0401      	lsls	r1, r0, #16
 8002938:	d5c7      	bpl.n	80028ca <I2C_ITSlaveCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800293a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800293c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800293e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002942:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002944:	2900      	cmp	r1, #0
 8002946:	d1bc      	bne.n	80028c2 <I2C_ITSlaveCplt+0x56>
 8002948:	e7bf      	b.n	80028ca <I2C_ITSlaveCplt+0x5e>
    I2C_ITSlaveSeqCplt(hi2c);
 800294a:	4620      	mov	r0, r4
 800294c:	f7ff fe22 	bl	8002594 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002952:	62e5      	str	r5, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 8002954:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 800295c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002960:	f7ff fea8 	bl	80026b4 <HAL_I2C_ListenCpltCallback>
}
 8002964:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 8002966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002968:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800296a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800296c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800296e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002970:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002972:	e7b7      	b.n	80028e4 <I2C_ITSlaveCplt+0x78>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002974:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 800297e:	6019      	str	r1, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002980:	6322      	str	r2, [r4, #48]	; 0x30
 8002982:	e782      	b.n	800288a <I2C_ITSlaveCplt+0x1e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002984:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fee8 	bl	800275c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800298c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002990:	2b28      	cmp	r3, #40	; 0x28
 8002992:	d1c7      	bne.n	8002924 <I2C_ITSlaveCplt+0xb8>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002994:	4629      	mov	r1, r5
 8002996:	4620      	mov	r0, r4
}
 8002998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800299c:	f7ff be8c 	b.w	80026b8 <I2C_ITListenCplt>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029a0:	f7ff fdf6 	bl	8002590 <HAL_I2C_SlaveRxCpltCallback>
}
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	bf00      	nop
 80029a8:	fe00e800 	.word	0xfe00e800
 80029ac:	ffff0000 	.word	0xffff0000

080029b0 <I2C_Slave_ISR_IT>:
{
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80029b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80029b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d078      	beq.n	8002aae <I2C_Slave_ISR_IT+0xfe>
 80029bc:	4616      	mov	r6, r2
 80029be:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029c0:	068a      	lsls	r2, r1, #26
 80029c2:	4604      	mov	r4, r0
 80029c4:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 80029c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029ca:	d501      	bpl.n	80029d0 <I2C_Slave_ISR_IT+0x20>
 80029cc:	06b3      	lsls	r3, r6, #26
 80029ce:	d45a      	bmi.n	8002a86 <I2C_Slave_ISR_IT+0xd6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029d0:	06ea      	lsls	r2, r5, #27
 80029d2:	d515      	bpl.n	8002a00 <I2C_Slave_ISR_IT+0x50>
 80029d4:	06f3      	lsls	r3, r6, #27
 80029d6:	d513      	bpl.n	8002a00 <I2C_Slave_ISR_IT+0x50>
    if (hi2c->XferCount == 0U)
 80029d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d157      	bne.n	8002a90 <I2C_Slave_ISR_IT+0xe0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80029e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80029e4:	2b28      	cmp	r3, #40	; 0x28
 80029e6:	d078      	beq.n	8002ada <I2C_Slave_ISR_IT+0x12a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029e8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	2a29      	cmp	r2, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f0:	f04f 0210 	mov.w	r2, #16
 80029f4:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029f6:	d060      	beq.n	8002aba <I2C_Slave_ISR_IT+0x10a>
  __HAL_UNLOCK(hi2c);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80029fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a00:	076a      	lsls	r2, r5, #29
 8002a02:	d40d      	bmi.n	8002a20 <I2C_Slave_ISR_IT+0x70>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a04:	0728      	lsls	r0, r5, #28
 8002a06:	d529      	bpl.n	8002a5c <I2C_Slave_ISR_IT+0xac>
 8002a08:	0731      	lsls	r1, r6, #28
 8002a0a:	d527      	bpl.n	8002a5c <I2C_Slave_ISR_IT+0xac>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a14:	2b28      	cmp	r3, #40	; 0x28
 8002a16:	d068      	beq.n	8002aea <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	61da      	str	r2, [r3, #28]
 8002a1e:	e7eb      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a20:	0773      	lsls	r3, r6, #29
 8002a22:	d5ef      	bpl.n	8002a04 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8002a24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b16b      	cbz	r3, 8002a46 <I2C_Slave_ISR_IT+0x96>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a30:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002a32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002a34:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a36:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002a3c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8002a3e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002a40:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002a42:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a44:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8002a46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1d4      	bne.n	80029f8 <I2C_Slave_ISR_IT+0x48>
 8002a4e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8002a52:	d0d1      	beq.n	80029f8 <I2C_Slave_ISR_IT+0x48>
        I2C_ITSlaveSeqCplt(hi2c);
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff fd9d 	bl	8002594 <I2C_ITSlaveSeqCplt>
 8002a5a:	e7cd      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a5c:	07aa      	lsls	r2, r5, #30
 8002a5e:	d5cb      	bpl.n	80029f8 <I2C_Slave_ISR_IT+0x48>
 8002a60:	07b3      	lsls	r3, r6, #30
 8002a62:	d5c9      	bpl.n	80029f8 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8002a64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	b31b      	cbz	r3, 8002ab2 <I2C_Slave_ISR_IT+0x102>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a76:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002a78:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002a7e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002a80:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a82:	8522      	strh	r2, [r4, #40]	; 0x28
 8002a84:	e7b8      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a86:	f7ff fef1 	bl	800286c <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a8a:	06ea      	lsls	r2, r5, #27
 8002a8c:	d5b8      	bpl.n	8002a00 <I2C_Slave_ISR_IT+0x50>
 8002a8e:	e7a1      	b.n	80029d4 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	2210      	movs	r2, #16
 8002a94:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a9e:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8002aa2:	d1a9      	bne.n	80029f8 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002aa4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff fe58 	bl	800275c <I2C_ITError>
 8002aac:	e7a4      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8002aae:	2002      	movs	r0, #2
}
 8002ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ab2:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8002ab6:	d0cd      	beq.n	8002a54 <I2C_Slave_ISR_IT+0xa4>
 8002ab8:	e79e      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002aba:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8002abe:	d09b      	beq.n	80029f8 <I2C_Slave_ISR_IT+0x48>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002ac4:	bf44      	itt	mi
 8002ac6:	2200      	movmi	r2, #0
 8002ac8:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	07d1      	lsls	r1, r2, #31
 8002ace:	d4c1      	bmi.n	8002a54 <I2C_Slave_ISR_IT+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	619a      	str	r2, [r3, #24]
 8002ad8:	e7bc      	b.n	8002a54 <I2C_Slave_ISR_IT+0xa4>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002ada:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8002ade:	d183      	bne.n	80029e8 <I2C_Slave_ISR_IT+0x38>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff fde8 	bl	80026b8 <I2C_ITListenCplt>
 8002ae8:	e786      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff fda6 	bl	800263c <I2C_ITAddrCplt.isra.8.part.9>
 8002af0:	e782      	b.n	80029f8 <I2C_Slave_ISR_IT+0x48>
 8002af2:	bf00      	nop

08002af4 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002af4:	6802      	ldr	r2, [r0, #0]
 8002af6:	6993      	ldr	r3, [r2, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002af8:	f413 7f80 	tst.w	r3, #256	; 0x100
{
 8002afc:	b430      	push	{r4, r5}
 8002afe:	f3c3 2180 	ubfx	r1, r3, #10, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b02:	6814      	ldr	r4, [r2, #0]
 8002b04:	f3c3 2340 	ubfx	r3, r3, #9, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b08:	d017      	beq.n	8002b3a <HAL_I2C_ER_IRQHandler+0x46>
 8002b0a:	0625      	lsls	r5, r4, #24
 8002b0c:	d51f      	bpl.n	8002b4e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b10:	f44f 7580 	mov.w	r5, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b14:	f044 0401 	orr.w	r4, r4, #1
 8002b18:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b1a:	61d5      	str	r5, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b1c:	b131      	cbz	r1, 8002b2c <HAL_I2C_ER_IRQHandler+0x38>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b1e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b20:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b24:	f041 0108 	orr.w	r1, r1, #8
 8002b28:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b2a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b2c:	b9ab      	cbnz	r3, 8002b5a <HAL_I2C_ER_IRQHandler+0x66>
  tmperror = hi2c->ErrorCode;
 8002b2e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b30:	f011 0f0b 	tst.w	r1, #11
 8002b34:	d108      	bne.n	8002b48 <HAL_I2C_ER_IRQHandler+0x54>
}
 8002b36:	bc30      	pop	{r4, r5}
 8002b38:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b3a:	b151      	cbz	r1, 8002b52 <HAL_I2C_ER_IRQHandler+0x5e>
 8002b3c:	0621      	lsls	r1, r4, #24
 8002b3e:	d4ee      	bmi.n	8002b1e <HAL_I2C_ER_IRQHandler+0x2a>
  tmperror = hi2c->ErrorCode;
 8002b40:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b42:	f011 0f0b 	tst.w	r1, #11
 8002b46:	d0f6      	beq.n	8002b36 <HAL_I2C_ER_IRQHandler+0x42>
}
 8002b48:	bc30      	pop	{r4, r5}
    I2C_ITError(hi2c, tmperror);
 8002b4a:	f7ff be07 	b.w	800275c <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d1ed      	bne.n	8002b2e <HAL_I2C_ER_IRQHandler+0x3a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0eb      	beq.n	8002b2e <HAL_I2C_ER_IRQHandler+0x3a>
 8002b56:	0623      	lsls	r3, r4, #24
 8002b58:	d5e9      	bpl.n	8002b2e <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b66:	61d1      	str	r1, [r2, #28]
 8002b68:	e7e1      	b.n	8002b2e <HAL_I2C_ER_IRQHandler+0x3a>
 8002b6a:	bf00      	nop

08002b6c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8002b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b70:	b10b      	cbz	r3, 8002b76 <I2C_DMAAbort+0xa>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b72:	2200      	movs	r2, #0
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8002b76:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002b78:	b10b      	cbz	r3, 8002b7e <I2C_DMAAbort+0x12>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8002b7e:	f7ff bdd7 	b.w	8002730 <I2C_TreatErrorCallback>
 8002b82:	bf00      	nop

08002b84 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d120      	bne.n	8002bd0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	d01c      	beq.n	8002bd0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
{
 8002b96:	b410      	push	{r4}

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b98:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9a:	2424      	movs	r4, #36	; 0x24
 8002b9c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002ba0:	6814      	ldr	r4, [r2, #0]
 8002ba2:	f024 0401 	bic.w	r4, r4, #1
 8002ba6:	6014      	str	r4, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba8:	6814      	ldr	r4, [r2, #0]
 8002baa:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002bae:	6014      	str	r4, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bb0:	6814      	ldr	r4, [r2, #0]
 8002bb2:	4321      	orrs	r1, r4
 8002bb4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb6:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002bba:	f041 0101 	orr.w	r1, r1, #1
 8002bbe:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002bc0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bce:	4770      	bx	lr
    return HAL_BUSY;
 8002bd0:	2202      	movs	r2, #2
}
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d11f      	bne.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002be6:	2a01      	cmp	r2, #1
 8002be8:	d01b      	beq.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
{
 8002bea:	b410      	push	{r4}

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bec:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bee:	2424      	movs	r4, #36	; 0x24
 8002bf0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002bf4:	6814      	ldr	r4, [r2, #0]
 8002bf6:	f024 0401 	bic.w	r4, r4, #1
 8002bfa:	6014      	str	r4, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bfc:	6814      	ldr	r4, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bfe:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c02:	ea44 2101 	orr.w	r1, r4, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c06:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	f041 0101 	orr.w	r1, r1, #1
 8002c10:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002c12:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c20:	4770      	bx	lr
    return HAL_BUSY;
 8002c22:	2202      	movs	r2, #2
}
 8002c24:	4610      	mov	r0, r2
 8002c26:	4770      	bx	lr

08002c28 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_PWREx_GetVoltageRange+0xc>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002c2c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c44:	d00a      	beq.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4a:	d02e      	beq.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x72>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c58:	2000      	movs	r0, #0
 8002c5a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d023      	beq.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x72>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c62:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002c66:	4815      	ldr	r0, [pc, #84]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c68:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002c6c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
{
 8002c70:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c72:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c74:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c76:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c78:	2332      	movs	r3, #50	; 0x32
 8002c7a:	fb03 f304 	mul.w	r3, r3, r4
 8002c7e:	fba0 0303 	umull	r0, r3, r0, r3
 8002c82:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c84:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c86:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c8a:	d506      	bpl.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x62>
 8002c8c:	e000      	b.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x58>
 8002c8e:	b123      	cbz	r3, 8002c9a <HAL_PWREx_ControlVoltageScaling+0x62>
 8002c90:	6951      	ldr	r1, [r2, #20]
 8002c92:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002c94:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c98:	d4f9      	bmi.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x56>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	055b      	lsls	r3, r3, #21
 8002ca0:	d405      	bmi.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8002ca2:	2000      	movs	r0, #0
}
 8002ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca8:	4770      	bx	lr
  return HAL_OK;
 8002caa:	2000      	movs	r0, #0
}
 8002cac:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002cae:	2003      	movs	r0, #3
 8002cb0:	e7f8      	b.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8002cb2:	bf00      	nop
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	20000058 	.word	0x20000058
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc0:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cc2:	4d20      	ldr	r5, [pc, #128]	; (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002cc4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002cc6:	00db      	lsls	r3, r3, #3
{
 8002cc8:	b083      	sub	sp, #12
 8002cca:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ccc:	d51a      	bpl.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cce:	f7ff ffab 	bl	8002c28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002cd6:	d027      	beq.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cd8:	2c80      	cmp	r4, #128	; 0x80
 8002cda:	d82c      	bhi.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cdc:	d02f      	beq.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cde:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8002ce2:	fab4 f484 	clz	r4, r4
 8002ce6:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce8:	4917      	ldr	r1, [pc, #92]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002cea:	680b      	ldr	r3, [r1, #0]
 8002cec:	f023 0307 	bic.w	r3, r3, #7
 8002cf0:	4323      	orrs	r3, r4
 8002cf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cf4:	6808      	ldr	r0, [r1, #0]
 8002cf6:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002cfa:	1b00      	subs	r0, r0, r4
 8002cfc:	bf18      	it	ne
 8002cfe:	2001      	movne	r0, #1
 8002d00:	b003      	add	sp, #12
 8002d02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	65ab      	str	r3, [r5, #88]	; 0x58
 8002d0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002d16:	f7ff ff87 	bl	8002c28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d26:	d1d7      	bne.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002d28:	2c80      	cmp	r4, #128	; 0x80
 8002d2a:	d906      	bls.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if(msirange > RCC_MSIRANGE_10)
 8002d2c:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2e:	bf8c      	ite	hi
 8002d30:	2402      	movhi	r4, #2
 8002d32:	2401      	movls	r4, #1
 8002d34:	e7d8      	b.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d36:	2403      	movs	r4, #3
 8002d38:	e7d6      	b.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d3a:	2400      	movs	r4, #0
 8002d3c:	e7d4      	b.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3e:	2402      	movs	r4, #2
 8002d40:	e7d2      	b.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40022000 	.word	0x40022000

08002d4c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4c:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d4e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d50:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d52:	f013 030c 	ands.w	r3, r3, #12
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1e>
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d038      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d034      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x7e>
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	4824      	ldr	r0, [pc, #144]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d64:	bf18      	it	ne
 8002d66:	2000      	movne	r0, #0
 8002d68:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d6a:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d6c:	6811      	ldr	r1, [r2, #0]
 8002d6e:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d70:	bf54      	ite	pl
 8002d72:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d76:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002d78:	491f      	ldr	r1, [pc, #124]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d7a:	bf54      	ite	pl
 8002d7c:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d80:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002d84:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d88:	b303      	cbz	r3, 8002dcc <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d12d      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d025      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x9a>
      pllvco = HSE_VALUE;
 8002d9a:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	bf08      	it	eq
 8002da0:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da4:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002da6:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002dae:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db0:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002db8:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dbc:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dbe:	0058      	lsls	r0, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dc0:	fbb2 f3f1 	udiv	r3, r2, r1
    sysclockfreq = pllvco / pllr;
 8002dc4:	fbb3 f0f0 	udiv	r0, r3, r0
 8002dc8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8002dcc:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dce:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dd2:	2a01      	cmp	r2, #1
 8002dd4:	d0c9      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002dde:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002de0:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002de4:	d1d9      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de8:	e7db      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x56>
 8002dea:	2000      	movs	r0, #0
  return sysclockfreq;
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	007a1200 	.word	0x007a1200
 8002df8:	0800ba28 	.word	0x0800ba28
 8002dfc:	00f42400 	.word	0x00f42400

08002e00 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f000 81ca 	beq.w	800319a <HAL_RCC_OscConfig+0x39a>
{
 8002e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4aa4      	ldr	r2, [pc, #656]	; (800309c <HAL_RCC_OscConfig+0x29c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e0c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e10:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e12:	06df      	lsls	r7, r3, #27
{
 8002e14:	b083      	sub	sp, #12
 8002e16:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e1c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e20:	d52e      	bpl.n	8002e80 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	f000 8141 	beq.w	80030aa <HAL_RCC_OscConfig+0x2aa>
 8002e28:	2d0c      	cmp	r5, #12
 8002e2a:	f000 813b 	beq.w	80030a4 <HAL_RCC_OscConfig+0x2a4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e2e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002e30:	4f9a      	ldr	r7, [pc, #616]	; (800309c <HAL_RCC_OscConfig+0x29c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 819d 	beq.w	8003172 <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_MSI_ENABLE();
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002e40:	f7fd ff32 	bl	8000ca8 <HAL_GetTick>
 8002e44:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e46:	e006      	b.n	8002e56 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e48:	f7fd ff2e 	bl	8000ca8 <HAL_GetTick>
 8002e4c:	eba0 0008 	sub.w	r0, r0, r8
 8002e50:	2802      	cmp	r0, #2
 8002e52:	f200 819e 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	079a      	lsls	r2, r3, #30
 8002e5a:	d5f5      	bpl.n	8002e48 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a22      	ldr	r2, [r4, #32]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e80:	07d8      	lsls	r0, r3, #31
 8002e82:	f100 80e2 	bmi.w	800304a <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	0798      	lsls	r0, r3, #30
 8002e88:	d523      	bpl.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8a:	2d04      	cmp	r5, #4
 8002e8c:	f000 8161 	beq.w	8003152 <HAL_RCC_OscConfig+0x352>
 8002e90:	2d0c      	cmp	r5, #12
 8002e92:	f000 815b 	beq.w	800314c <HAL_RCC_OscConfig+0x34c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e96:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002e98:	4e80      	ldr	r6, [pc, #512]	; (800309c <HAL_RCC_OscConfig+0x29c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8193 	beq.w	80031c6 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	6833      	ldr	r3, [r6, #0]
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002ea8:	f7fd fefe 	bl	8000ca8 <HAL_GetTick>
 8002eac:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eae:	e005      	b.n	8002ebc <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fd fefa 	bl	8000ca8 <HAL_GetTick>
 8002eb4:	1bc0      	subs	r0, r0, r7
 8002eb6:	2802      	cmp	r0, #2
 8002eb8:	f200 816b 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ebc:	6833      	ldr	r3, [r6, #0]
 8002ebe:	055a      	lsls	r2, r3, #21
 8002ec0:	d5f6      	bpl.n	8002eb0 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	6873      	ldr	r3, [r6, #4]
 8002ec4:	6922      	ldr	r2, [r4, #16]
 8002ec6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002eca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ece:	6073      	str	r3, [r6, #4]
 8002ed0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	071e      	lsls	r6, r3, #28
 8002ed4:	d531      	bpl.n	8002f3a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed6:	6963      	ldr	r3, [r4, #20]
      uint32_t csr_temp = RCC->CSR;
 8002ed8:	4e70      	ldr	r6, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x29c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8187 	beq.w	80031ee <HAL_RCC_OscConfig+0x3ee>
      uint32_t csr_temp = RCC->CSR;
 8002ee0:	f8d6 2094 	ldr.w	r2, [r6, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002ee4:	69a1      	ldr	r1, [r4, #24]
 8002ee6:	f002 0010 	and.w	r0, r2, #16
 8002eea:	4281      	cmp	r1, r0
 8002eec:	d00f      	beq.n	8002f0e <HAL_RCC_OscConfig+0x10e>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002eee:	f002 0003 	and.w	r0, r2, #3
 8002ef2:	2802      	cmp	r0, #2
 8002ef4:	f000 811a 	beq.w	800312c <HAL_RCC_OscConfig+0x32c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ef8:	07d0      	lsls	r0, r2, #31
 8002efa:	f100 822d 	bmi.w	8003358 <HAL_RCC_OscConfig+0x558>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002efe:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x29c>)
 8002f00:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002f04:	f023 0310 	bic.w	r3, r3, #16
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4e63      	ldr	r6, [pc, #396]	; (800309c <HAL_RCC_OscConfig+0x29c>)
 8002f10:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f1c:	f7fd fec4 	bl	8000ca8 <HAL_GetTick>
 8002f20:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f22:	e005      	b.n	8002f30 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fd fec0 	bl	8000ca8 <HAL_GetTick>
 8002f28:	1bc0      	subs	r0, r0, r7
 8002f2a:	2811      	cmp	r0, #17
 8002f2c:	f200 8131 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f30:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002f34:	079a      	lsls	r2, r3, #30
 8002f36:	d5f5      	bpl.n	8002f24 <HAL_RCC_OscConfig+0x124>
 8002f38:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3a:	075f      	lsls	r7, r3, #29
 8002f3c:	d546      	bpl.n	8002fcc <HAL_RCC_OscConfig+0x1cc>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x29c>)
 8002f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f42:	00d6      	lsls	r6, r2, #3
 8002f44:	f100 8151 	bmi.w	80031ea <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f5a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	4e50      	ldr	r6, [pc, #320]	; (80030a0 <HAL_RCC_OscConfig+0x2a0>)
 8002f5e:	6832      	ldr	r2, [r6, #0]
 8002f60:	05d0      	lsls	r0, r2, #23
 8002f62:	f140 821f 	bpl.w	80033a4 <HAL_RCC_OscConfig+0x5a4>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f66:	68a3      	ldr	r3, [r4, #8]
 8002f68:	07d9      	lsls	r1, r3, #31
 8002f6a:	f140 816b 	bpl.w	8003244 <HAL_RCC_OscConfig+0x444>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002f6e:	4a4b      	ldr	r2, [pc, #300]	; (800309c <HAL_RCC_OscConfig+0x29c>)
 8002f70:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002f74:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8002f78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002f7c:	4301      	orrs	r1, r0
 8002f7e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f82:	f013 0f04 	tst.w	r3, #4
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f8a:	bf1e      	ittt	ne
 8002f8c:	f043 0304 	orrne.w	r3, r3, #4
 8002f90:	f8c2 3090 	strne.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f94:	f8d2 3090 	ldrne.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002fa0:	f7fd fe82 	bl	8000ca8 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa4:	4e3d      	ldr	r6, [pc, #244]	; (800309c <HAL_RCC_OscConfig+0x29c>)
      tickstart = HAL_GetTick();
 8002fa6:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e006      	b.n	8002fbc <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fd fe7b 	bl	8000ca8 <HAL_GetTick>
 8002fb2:	eba0 0009 	sub.w	r0, r0, r9
 8002fb6:	4540      	cmp	r0, r8
 8002fb8:	f200 80eb 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002fc0:	079b      	lsls	r3, r3, #30
 8002fc2:	d5f4      	bpl.n	8002fae <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 8002fc4:	2f00      	cmp	r7, #0
 8002fc6:	f040 81e7 	bne.w	8003398 <HAL_RCC_OscConfig+0x598>
 8002fca:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fcc:	0699      	lsls	r1, r3, #26
 8002fce:	d518      	bpl.n	8003002 <HAL_RCC_OscConfig+0x202>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_RCC_HSI48_ENABLE();
 8002fd2:	4e32      	ldr	r6, [pc, #200]	; (800309c <HAL_RCC_OscConfig+0x29c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 815f 	beq.w	8003298 <HAL_RCC_OscConfig+0x498>
      __HAL_RCC_HSI48_ENABLE();
 8002fda:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002fe6:	f7fd fe5f 	bl	8000ca8 <HAL_GetTick>
 8002fea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fec:	e005      	b.n	8002ffa <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fd fe5b 	bl	8000ca8 <HAL_GetTick>
 8002ff2:	1bc0      	subs	r0, r0, r7
 8002ff4:	2802      	cmp	r0, #2
 8002ff6:	f200 80cc 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ffa:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002ffe:	079a      	lsls	r2, r3, #30
 8003000:	d5f5      	bpl.n	8002fee <HAL_RCC_OscConfig+0x1ee>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003004:	b1fb      	cbz	r3, 8003046 <HAL_RCC_OscConfig+0x246>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003006:	2b02      	cmp	r3, #2
 8003008:	f000 815b 	beq.w	80032c2 <HAL_RCC_OscConfig+0x4c2>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300c:	2d0c      	cmp	r5, #12
 800300e:	f000 808d 	beq.w	800312c <HAL_RCC_OscConfig+0x32c>
        __HAL_RCC_PLL_DISABLE();
 8003012:	4c22      	ldr	r4, [pc, #136]	; (800309c <HAL_RCC_OscConfig+0x29c>)
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6023      	str	r3, [r4, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003024:	68e3      	ldr	r3, [r4, #12]
 8003026:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800302a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800302c:	f7fd fe3c 	bl	8000ca8 <HAL_GetTick>
 8003030:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003032:	e005      	b.n	8003040 <HAL_RCC_OscConfig+0x240>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fd fe38 	bl	8000ca8 <HAL_GetTick>
 8003038:	1b40      	subs	r0, r0, r5
 800303a:	2802      	cmp	r0, #2
 800303c:	f200 80a9 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	d4f6      	bmi.n	8003034 <HAL_RCC_OscConfig+0x234>
  return HAL_OK;
 8003046:	2000      	movs	r0, #0
 8003048:	e071      	b.n	800312e <HAL_RCC_OscConfig+0x32e>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800304a:	2d08      	cmp	r5, #8
 800304c:	d074      	beq.n	8003138 <HAL_RCC_OscConfig+0x338>
 800304e:	2d0c      	cmp	r5, #12
 8003050:	d070      	beq.n	8003134 <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003052:	6863      	ldr	r3, [r4, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	f000 80a1 	beq.w	800319e <HAL_RCC_OscConfig+0x39e>
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	f000 81b8 	beq.w	80033d4 <HAL_RCC_OscConfig+0x5d4>
 8003064:	4f0d      	ldr	r7, [pc, #52]	; (800309c <HAL_RCC_OscConfig+0x29c>)
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800306c:	603a      	str	r2, [r7, #0]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003074:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 8096 	bne.w	80031a8 <HAL_RCC_OscConfig+0x3a8>
        tickstart = HAL_GetTick();
 800307c:	f7fd fe14 	bl	8000ca8 <HAL_GetTick>
 8003080:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	e006      	b.n	8003092 <HAL_RCC_OscConfig+0x292>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fd fe10 	bl	8000ca8 <HAL_GetTick>
 8003088:	eba0 0008 	sub.w	r0, r0, r8
 800308c:	2864      	cmp	r0, #100	; 0x64
 800308e:	f200 8080 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	039b      	lsls	r3, r3, #14
 8003096:	d4f5      	bmi.n	8003084 <HAL_RCC_OscConfig+0x284>
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	e6f4      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
 800309c:	40021000 	.word	0x40021000
 80030a0:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030a4:	2e01      	cmp	r6, #1
 80030a6:	f47f aec2 	bne.w	8002e2e <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030aa:	4bb0      	ldr	r3, [pc, #704]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0798      	lsls	r0, r3, #30
 80030b0:	d439      	bmi.n	8003126 <HAL_RCC_OscConfig+0x326>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b2:	4bae      	ldr	r3, [pc, #696]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 80030b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	0711      	lsls	r1, r2, #28
 80030ba:	bf56      	itet	pl
 80030bc:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80030c0:	681b      	ldrmi	r3, [r3, #0]
 80030c2:	091b      	lsrpl	r3, r3, #4
 80030c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c8:	4298      	cmp	r0, r3
 80030ca:	f200 80a4 	bhi.w	8003216 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ce:	4ba7      	ldr	r3, [pc, #668]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030de:	4302      	orrs	r2, r0
 80030e0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	6a21      	ldr	r1, [r4, #32]
 80030e6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030ee:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f0:	2d00      	cmp	r5, #0
 80030f2:	f000 8169 	beq.w	80033c8 <HAL_RCC_OscConfig+0x5c8>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f6:	f7ff fe29 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 80030fa:	4b9c      	ldr	r3, [pc, #624]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 80030fc:	4a9c      	ldr	r2, [pc, #624]	; (8003370 <HAL_RCC_OscConfig+0x570>)
 80030fe:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 8003100:	499c      	ldr	r1, [pc, #624]	; (8003374 <HAL_RCC_OscConfig+0x574>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003102:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	4a9b      	ldr	r2, [pc, #620]	; (8003378 <HAL_RCC_OscConfig+0x578>)
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8003112:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003114:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003116:	f7fd fd81 	bl	8000c1c <HAL_InitTick>
        if(status != HAL_OK)
 800311a:	b940      	cbnz	r0, 800312e <HAL_RCC_OscConfig+0x32e>
 800311c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	07d8      	lsls	r0, r3, #31
 8003120:	f57f aeb1 	bpl.w	8002e86 <HAL_RCC_OscConfig+0x86>
 8003124:	e791      	b.n	800304a <HAL_RCC_OscConfig+0x24a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003126:	69e3      	ldr	r3, [r4, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1c2      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2b2>
    return HAL_ERROR;
 800312c:	2001      	movs	r0, #1
}
 800312e:	b003      	add	sp, #12
 8003130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003134:	2e03      	cmp	r6, #3
 8003136:	d18c      	bne.n	8003052 <HAL_RCC_OscConfig+0x252>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4a8c      	ldr	r2, [pc, #560]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	0391      	lsls	r1, r2, #14
 800313e:	f57f aea2 	bpl.w	8002e86 <HAL_RCC_OscConfig+0x86>
 8003142:	6862      	ldr	r2, [r4, #4]
 8003144:	2a00      	cmp	r2, #0
 8003146:	f47f ae9e 	bne.w	8002e86 <HAL_RCC_OscConfig+0x86>
 800314a:	e7ef      	b.n	800312c <HAL_RCC_OscConfig+0x32c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800314c:	2e02      	cmp	r6, #2
 800314e:	f47f aea2 	bne.w	8002e96 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003152:	4a86      	ldr	r2, [pc, #536]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	0551      	lsls	r1, r2, #21
 8003158:	d502      	bpl.n	8003160 <HAL_RCC_OscConfig+0x360>
 800315a:	68e2      	ldr	r2, [r4, #12]
 800315c:	2a00      	cmp	r2, #0
 800315e:	d0e5      	beq.n	800312c <HAL_RCC_OscConfig+0x32c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	4982      	ldr	r1, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 8003162:	6920      	ldr	r0, [r4, #16]
 8003164:	684a      	ldr	r2, [r1, #4]
 8003166:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800316a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800316e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003170:	e6af      	b.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800317a:	f7fd fd95 	bl	8000ca8 <HAL_GetTick>
 800317e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	079b      	lsls	r3, r3, #30
 8003184:	d5ca      	bpl.n	800311c <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003186:	f7fd fd8f 	bl	8000ca8 <HAL_GetTick>
 800318a:	eba0 0008 	sub.w	r0, r0, r8
 800318e:	2802      	cmp	r0, #2
 8003190:	d9f6      	bls.n	8003180 <HAL_RCC_OscConfig+0x380>
            return HAL_TIMEOUT;
 8003192:	2003      	movs	r0, #3
}
 8003194:	b003      	add	sp, #12
 8003196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 800319a:	2001      	movs	r0, #1
}
 800319c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	4a73      	ldr	r2, [pc, #460]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031a8:	f7fd fd7e 	bl	8000ca8 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ac:	4f6f      	ldr	r7, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x56c>)
        tickstart = HAL_GetTick();
 80031ae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b0:	e005      	b.n	80031be <HAL_RCC_OscConfig+0x3be>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b2:	f7fd fd79 	bl	8000ca8 <HAL_GetTick>
 80031b6:	eba0 0008 	sub.w	r0, r0, r8
 80031ba:	2864      	cmp	r0, #100	; 0x64
 80031bc:	d8e9      	bhi.n	8003192 <HAL_RCC_OscConfig+0x392>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	039a      	lsls	r2, r3, #14
 80031c2:	d5f6      	bpl.n	80031b2 <HAL_RCC_OscConfig+0x3b2>
 80031c4:	e768      	b.n	8003098 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_DISABLE();
 80031c6:	6833      	ldr	r3, [r6, #0]
 80031c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031cc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80031ce:	f7fd fd6b 	bl	8000ca8 <HAL_GetTick>
 80031d2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d4:	e004      	b.n	80031e0 <HAL_RCC_OscConfig+0x3e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fd fd67 	bl	8000ca8 <HAL_GetTick>
 80031da:	1bc0      	subs	r0, r0, r7
 80031dc:	2802      	cmp	r0, #2
 80031de:	d8d8      	bhi.n	8003192 <HAL_RCC_OscConfig+0x392>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e0:	6833      	ldr	r3, [r6, #0]
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	d4f7      	bmi.n	80031d6 <HAL_RCC_OscConfig+0x3d6>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	e673      	b.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2700      	movs	r7, #0
 80031ec:	e6b6      	b.n	8002f5c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_LSI_DISABLE();
 80031ee:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031fa:	f7fd fd55 	bl	8000ca8 <HAL_GetTick>
 80031fe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003200:	e004      	b.n	800320c <HAL_RCC_OscConfig+0x40c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003202:	f7fd fd51 	bl	8000ca8 <HAL_GetTick>
 8003206:	1bc0      	subs	r0, r0, r7
 8003208:	2811      	cmp	r0, #17
 800320a:	d8c2      	bhi.n	8003192 <HAL_RCC_OscConfig+0x392>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003210:	079b      	lsls	r3, r3, #30
 8003212:	d4f6      	bmi.n	8003202 <HAL_RCC_OscConfig+0x402>
 8003214:	e690      	b.n	8002f38 <HAL_RCC_OscConfig+0x138>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003216:	f7ff fd53 	bl	8002cc0 <RCC_SetFlashLatencyFromMSIRange>
 800321a:	2800      	cmp	r0, #0
 800321c:	d186      	bne.n	800312c <HAL_RCC_OscConfig+0x32c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321e:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800322c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	6a21      	ldr	r1, [r4, #32]
 8003238:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800323c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e758      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003244:	4e49      	ldr	r6, [pc, #292]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 8003246:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003252:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f ae9e 	bne.w	8002fa0 <HAL_RCC_OscConfig+0x1a0>
      tickstart = HAL_GetTick();
 8003264:	f7fd fd20 	bl	8000ca8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800326c:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800326e:	e005      	b.n	800327c <HAL_RCC_OscConfig+0x47c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fd fd1a 	bl	8000ca8 <HAL_GetTick>
 8003274:	eba0 0009 	sub.w	r0, r0, r9
 8003278:	4540      	cmp	r0, r8
 800327a:	d88a      	bhi.n	8003192 <HAL_RCC_OscConfig+0x392>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800327c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003280:	0798      	lsls	r0, r3, #30
 8003282:	d4f5      	bmi.n	8003270 <HAL_RCC_OscConfig+0x470>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003284:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003290:	2f00      	cmp	r7, #0
 8003292:	f43f ae9a 	beq.w	8002fca <HAL_RCC_OscConfig+0x1ca>
 8003296:	e07f      	b.n	8003398 <HAL_RCC_OscConfig+0x598>
      __HAL_RCC_HSI48_DISABLE();
 8003298:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80032a4:	f7fd fd00 	bl	8000ca8 <HAL_GetTick>
 80032a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ac:	f7fd fcfc 	bl	8000ca8 <HAL_GetTick>
 80032b0:	1bc0      	subs	r0, r0, r7
 80032b2:	2802      	cmp	r0, #2
 80032b4:	f63f af6d 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80032bc:	079b      	lsls	r3, r3, #30
 80032be:	d4f5      	bmi.n	80032ac <HAL_RCC_OscConfig+0x4ac>
 80032c0:	e69f      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      pll_config = RCC->PLLCFGR;
 80032c2:	4a2a      	ldr	r2, [pc, #168]	; (800336c <HAL_RCC_OscConfig+0x56c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
      pll_config = RCC->PLLCFGR;
 80032c6:	68d3      	ldr	r3, [r2, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c8:	f003 0003 	and.w	r0, r3, #3
 80032cc:	4288      	cmp	r0, r1
 80032ce:	f000 808e 	beq.w	80033ee <HAL_RCC_OscConfig+0x5ee>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d2:	2d0c      	cmp	r5, #12
 80032d4:	f43f af2a 	beq.w	800312c <HAL_RCC_OscConfig+0x32c>
            __HAL_RCC_PLL_DISABLE();
 80032d8:	4d24      	ldr	r5, [pc, #144]	; (800336c <HAL_RCC_OscConfig+0x56c>)
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e0:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80032e2:	f7fd fce1 	bl	8000ca8 <HAL_GetTick>
 80032e6:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e005      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fd fcdd 	bl	8000ca8 <HAL_GetTick>
 80032ee:	1b80      	subs	r0, r0, r6
 80032f0:	2802      	cmp	r0, #2
 80032f2:	f63f af4e 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	019f      	lsls	r7, r3, #6
 80032fa:	d4f6      	bmi.n	80032ea <HAL_RCC_OscConfig+0x4ea>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fc:	68ea      	ldr	r2, [r5, #12]
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <HAL_RCC_OscConfig+0x57c>)
 8003300:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003302:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003304:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003306:	4013      	ands	r3, r2
 8003308:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800330c:	433b      	orrs	r3, r7
 800330e:	3801      	subs	r0, #1
 8003310:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003314:	0849      	lsrs	r1, r1, #1
 8003316:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800331a:	3901      	subs	r1, #1
 800331c:	0852      	lsrs	r2, r2, #1
 800331e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003322:	3a01      	subs	r2, #1
 8003324:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003328:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800332a:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332c:	4c0f      	ldr	r4, [pc, #60]	; (800336c <HAL_RCC_OscConfig+0x56c>)
            __HAL_RCC_PLL_ENABLE();
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003334:	68eb      	ldr	r3, [r5, #12]
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800333c:	f7fd fcb4 	bl	8000ca8 <HAL_GetTick>
 8003340:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	e005      	b.n	8003350 <HAL_RCC_OscConfig+0x550>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd fcb0 	bl	8000ca8 <HAL_GetTick>
 8003348:	1b40      	subs	r0, r0, r5
 800334a:	2802      	cmp	r0, #2
 800334c:	f63f af21 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	0198      	lsls	r0, r3, #6
 8003354:	d5f6      	bpl.n	8003344 <HAL_RCC_OscConfig+0x544>
 8003356:	e676      	b.n	8003046 <HAL_RCC_OscConfig+0x246>
          __HAL_RCC_LSI_DISABLE();
 8003358:	f8d6 2094 	ldr.w	r2, [r6, #148]	; 0x94
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003364:	f7fd fca0 	bl	8000ca8 <HAL_GetTick>
 8003368:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800336a:	e00f      	b.n	800338c <HAL_RCC_OscConfig+0x58c>
 800336c:	40021000 	.word	0x40021000
 8003370:	0800ba18 	.word	0x0800ba18
 8003374:	20000004 	.word	0x20000004
 8003378:	20000058 	.word	0x20000058
 800337c:	f99f808c 	.word	0xf99f808c
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003380:	f7fd fc92 	bl	8000ca8 <HAL_GetTick>
 8003384:	1bc0      	subs	r0, r0, r7
 8003386:	2811      	cmp	r0, #17
 8003388:	f63f af03 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003390:	0799      	lsls	r1, r3, #30
 8003392:	d4f5      	bmi.n	8003380 <HAL_RCC_OscConfig+0x580>
 8003394:	69a1      	ldr	r1, [r4, #24]
 8003396:	e5b2      	b.n	8002efe <HAL_RCC_OscConfig+0xfe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4a33      	ldr	r2, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x668>)
 800339a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6593      	str	r3, [r2, #88]	; 0x58
 80033a2:	e612      	b.n	8002fca <HAL_RCC_OscConfig+0x1ca>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a4:	6832      	ldr	r2, [r6, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 80033ac:	f7fd fc7c 	bl	8000ca8 <HAL_GetTick>
 80033b0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b2:	6833      	ldr	r3, [r6, #0]
 80033b4:	05da      	lsls	r2, r3, #23
 80033b6:	f53f add6 	bmi.w	8002f66 <HAL_RCC_OscConfig+0x166>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fd fc75 	bl	8000ca8 <HAL_GetTick>
 80033be:	eba0 0008 	sub.w	r0, r0, r8
 80033c2:	2802      	cmp	r0, #2
 80033c4:	d9f5      	bls.n	80033b2 <HAL_RCC_OscConfig+0x5b2>
 80033c6:	e6e4      	b.n	8003192 <HAL_RCC_OscConfig+0x392>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c8:	f7ff fc7a 	bl	8002cc0 <RCC_SetFlashLatencyFromMSIRange>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	f43f ae92 	beq.w	80030f6 <HAL_RCC_OscConfig+0x2f6>
 80033d2:	e6ab      	b.n	800312c <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033d8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e6dc      	b.n	80031a8 <HAL_RCC_OscConfig+0x3a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033f0:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80033f4:	3801      	subs	r0, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	ebb1 1f00 	cmp.w	r1, r0, lsl #4
 80033fa:	f47f af6a 	bne.w	80032d2 <HAL_RCC_OscConfig+0x4d2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003400:	f403 41fe 	and.w	r1, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003404:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
 8003408:	f47f af63 	bne.w	80032d2 <HAL_RCC_OscConfig+0x4d2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800340e:	0849      	lsrs	r1, r1, #1
 8003410:	3901      	subs	r1, #1
 8003412:	f403 00c0 	and.w	r0, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003416:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800341a:	f47f af5a 	bne.w	80032d2 <HAL_RCC_OscConfig+0x4d2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800341e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003420:	0849      	lsrs	r1, r1, #1
 8003422:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003426:	3901      	subs	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003428:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 800342c:	f47f af51 	bne.w	80032d2 <HAL_RCC_OscConfig+0x4d2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	0199      	lsls	r1, r3, #6
 8003434:	f53f ae07 	bmi.w	8003046 <HAL_RCC_OscConfig+0x246>
          __HAL_RCC_PLL_ENABLE();
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	68d3      	ldr	r3, [r2, #12]
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003448:	4614      	mov	r4, r2
          tickstart = HAL_GetTick();
 800344a:	f7fd fc2d 	bl	8000ca8 <HAL_GetTick>
 800344e:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003450:	e005      	b.n	800345e <HAL_RCC_OscConfig+0x65e>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003452:	f7fd fc29 	bl	8000ca8 <HAL_GetTick>
 8003456:	1b40      	subs	r0, r0, r5
 8003458:	2802      	cmp	r0, #2
 800345a:	f63f ae9a 	bhi.w	8003192 <HAL_RCC_OscConfig+0x392>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	019a      	lsls	r2, r3, #6
 8003462:	d5f6      	bpl.n	8003452 <HAL_RCC_OscConfig+0x652>
 8003464:	e5ef      	b.n	8003046 <HAL_RCC_OscConfig+0x246>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800346c:	b178      	cbz	r0, 800348e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <HAL_RCC_ClockConfig+0x11c>)
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	428b      	cmp	r3, r1
 8003478:	d20b      	bcs.n	8003492 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	f023 0307 	bic.w	r3, r3, #7
 8003480:	430b      	orrs	r3, r1
 8003482:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	428b      	cmp	r3, r1
 800348c:	d001      	beq.n	8003492 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800348e:	2001      	movs	r0, #1
}
 8003490:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	6803      	ldr	r3, [r0, #0]
{
 8003494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003498:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	07d9      	lsls	r1, r3, #31
 800349c:	4604      	mov	r4, r0
 800349e:	d524      	bpl.n	80034ea <HAL_RCC_ClockConfig+0x7e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a0:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a4:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a8:	d062      	beq.n	8003570 <HAL_RCC_ClockConfig+0x104>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d065      	beq.n	800357a <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d166      	bne.n	8003580 <HAL_RCC_ClockConfig+0x114>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b2:	0796      	lsls	r6, r2, #30
 80034b4:	d532      	bpl.n	800351c <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4e35      	ldr	r6, [pc, #212]	; (800358c <HAL_RCC_ClockConfig+0x120>)
 80034b8:	68b2      	ldr	r2, [r6, #8]
 80034ba:	f022 0203 	bic.w	r2, r2, #3
 80034be:	4313      	orrs	r3, r2
 80034c0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80034c2:	f7fd fbf1 	bl	8000ca8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80034ca:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034cc:	e005      	b.n	80034da <HAL_RCC_ClockConfig+0x6e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fd fbeb 	bl	8000ca8 <HAL_GetTick>
 80034d2:	eba0 0008 	sub.w	r0, r0, r8
 80034d6:	42b8      	cmp	r0, r7
 80034d8:	d84d      	bhi.n	8003576 <HAL_RCC_ClockConfig+0x10a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	68b3      	ldr	r3, [r6, #8]
 80034dc:	6862      	ldr	r2, [r4, #4]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034e6:	d1f2      	bne.n	80034ce <HAL_RCC_ClockConfig+0x62>
 80034e8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ea:	0799      	lsls	r1, r3, #30
 80034ec:	d506      	bpl.n	80034fc <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ee:	4927      	ldr	r1, [pc, #156]	; (800358c <HAL_RCC_ClockConfig+0x120>)
 80034f0:	68a0      	ldr	r0, [r4, #8]
 80034f2:	688a      	ldr	r2, [r1, #8]
 80034f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034f8:	4302      	orrs	r2, r0
 80034fa:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034fc:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x11c>)
 80034fe:	680a      	ldr	r2, [r1, #0]
 8003500:	f002 0207 	and.w	r2, r2, #7
 8003504:	42aa      	cmp	r2, r5
 8003506:	d90c      	bls.n	8003522 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003508:	680a      	ldr	r2, [r1, #0]
 800350a:	f022 0207 	bic.w	r2, r2, #7
 800350e:	432a      	orrs	r2, r5
 8003510:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	680a      	ldr	r2, [r1, #0]
 8003514:	f002 0207 	and.w	r2, r2, #7
 8003518:	42aa      	cmp	r2, r5
 800351a:	d002      	beq.n	8003522 <HAL_RCC_ClockConfig+0xb6>
    return HAL_ERROR;
 800351c:	2001      	movs	r0, #1
}
 800351e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003522:	075a      	lsls	r2, r3, #29
 8003524:	d506      	bpl.n	8003534 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003526:	4919      	ldr	r1, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x120>)
 8003528:	68e0      	ldr	r0, [r4, #12]
 800352a:	688a      	ldr	r2, [r1, #8]
 800352c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003530:	4302      	orrs	r2, r0
 8003532:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	d507      	bpl.n	8003548 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_RCC_ClockConfig+0x120>)
 800353a:	6921      	ldr	r1, [r4, #16]
 800353c:	6893      	ldr	r3, [r2, #8]
 800353e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003542:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003546:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003548:	f7ff fc00 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_RCC_ClockConfig+0x120>)
 800354e:	4c10      	ldr	r4, [pc, #64]	; (8003590 <HAL_RCC_ClockConfig+0x124>)
 8003550:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8003552:	4910      	ldr	r1, [pc, #64]	; (8003594 <HAL_RCC_ClockConfig+0x128>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003554:	4a10      	ldr	r2, [pc, #64]	; (8003598 <HAL_RCC_ClockConfig+0x12c>)
 8003556:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800355a:	5ce3      	ldrb	r3, [r4, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa20 f303 	lsr.w	r3, r0, r3
}
 8003564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003568:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356a:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800356c:	f7fd bb56 	b.w	8000c1c <HAL_InitTick>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003570:	0192      	lsls	r2, r2, #6
 8003572:	d4a0      	bmi.n	80034b6 <HAL_RCC_ClockConfig+0x4a>
 8003574:	e7d2      	b.n	800351c <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8003576:	2003      	movs	r0, #3
 8003578:	e7d1      	b.n	800351e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357a:	0397      	lsls	r7, r2, #14
 800357c:	d49b      	bmi.n	80034b6 <HAL_RCC_ClockConfig+0x4a>
 800357e:	e7cd      	b.n	800351c <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003580:	0550      	lsls	r0, r2, #21
 8003582:	d5cb      	bpl.n	800351c <HAL_RCC_ClockConfig+0xb0>
 8003584:	e797      	b.n	80034b6 <HAL_RCC_ClockConfig+0x4a>
 8003586:	bf00      	nop
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	0800ba18 	.word	0x0800ba18
 8003594:	20000004 	.word	0x20000004
 8003598:	20000058 	.word	0x20000058

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a0:	6803      	ldr	r3, [r0, #0]
{
 80035a2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a4:	f413 3000 	ands.w	r0, r3, #131072	; 0x20000
{
 80035a8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035aa:	d057      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xc0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ac:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035b0:	00d0      	lsls	r0, r2, #3
 80035b2:	f140 80d5 	bpl.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b8:	4d77      	ldr	r5, [pc, #476]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c2:	f7fd fb71 	bl	8000ca8 <HAL_GetTick>
 80035c6:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c8:	e005      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ca:	f7fd fb6d 	bl	8000ca8 <HAL_GetTick>
 80035ce:	1b80      	subs	r0, r0, r6
 80035d0:	2802      	cmp	r0, #2
 80035d2:	f200 80d7 	bhi.w	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d6:	682b      	ldr	r3, [r5, #0]
 80035d8:	05d9      	lsls	r1, r3, #23
 80035da:	d5f6      	bpl.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e4:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80035e8:	d028      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80035ea:	428a      	cmp	r2, r1
 80035ec:	d026      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ee:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80035f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360a:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800360e:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 8003610:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003614:	d512      	bpl.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8003618:	f7fd fb46 	bl	8000ca8 <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003620:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	e006      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fd fb40 	bl	8000ca8 <HAL_GetTick>
 8003628:	eba0 0008 	sub.w	r0, r0, r8
 800362c:	42b0      	cmp	r0, r6
 800362e:	f200 80a9 	bhi.w	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003632:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003636:	079b      	lsls	r3, r3, #30
 8003638:	d5f4      	bpl.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800363a:	6b21      	ldr	r1, [r4, #48]	; 0x30
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363c:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800363e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003646:	430b      	orrs	r3, r1
 8003648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800364c:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800364e:	b127      	cbz	r7, 800365a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4a50      	ldr	r2, [pc, #320]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003652:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
 800365a:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800365c:	07df      	lsls	r7, r3, #31
 800365e:	d508      	bpl.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003660:	494c      	ldr	r1, [pc, #304]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003662:	6865      	ldr	r5, [r4, #4]
 8003664:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003668:	f022 0203 	bic.w	r2, r2, #3
 800366c:	432a      	orrs	r2, r5
 800366e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003672:	079e      	lsls	r6, r3, #30
 8003674:	d508      	bpl.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003676:	4947      	ldr	r1, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003678:	68a5      	ldr	r5, [r4, #8]
 800367a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800367e:	f022 020c 	bic.w	r2, r2, #12
 8003682:	432a      	orrs	r2, r5
 8003684:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003688:	075d      	lsls	r5, r3, #29
 800368a:	d508      	bpl.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800368c:	4941      	ldr	r1, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800368e:	68e5      	ldr	r5, [r4, #12]
 8003690:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003694:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003698:	432a      	orrs	r2, r5
 800369a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800369e:	0699      	lsls	r1, r3, #26
 80036a0:	d508      	bpl.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a2:	493c      	ldr	r1, [pc, #240]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036a4:	6925      	ldr	r5, [r4, #16]
 80036a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80036aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036ae:	432a      	orrs	r2, r5
 80036b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036b4:	059a      	lsls	r2, r3, #22
 80036b6:	d508      	bpl.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b8:	4936      	ldr	r1, [pc, #216]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ba:	6a25      	ldr	r5, [r4, #32]
 80036bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80036c0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80036c4:	432a      	orrs	r2, r5
 80036c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ca:	055f      	lsls	r7, r3, #21
 80036cc:	d508      	bpl.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ce:	4931      	ldr	r1, [pc, #196]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80036d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80036d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80036da:	432a      	orrs	r2, r5
 80036dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e0:	065e      	lsls	r6, r3, #25
 80036e2:	d508      	bpl.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036e4:	492b      	ldr	r1, [pc, #172]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e6:	6965      	ldr	r5, [r4, #20]
 80036e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80036ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80036f0:	432a      	orrs	r2, r5
 80036f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036f6:	061d      	lsls	r5, r3, #24
 80036f8:	d508      	bpl.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036fa:	4926      	ldr	r1, [pc, #152]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036fc:	69a5      	ldr	r5, [r4, #24]
 80036fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003702:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003706:	432a      	orrs	r2, r5
 8003708:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800370c:	05d9      	lsls	r1, r3, #23
 800370e:	d508      	bpl.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003710:	4920      	ldr	r1, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003712:	69e5      	ldr	r5, [r4, #28]
 8003714:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003718:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800371c:	432a      	orrs	r2, r5
 800371e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003722:	049a      	lsls	r2, r3, #18
 8003724:	d50b      	bpl.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003726:	491b      	ldr	r1, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003728:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800372a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800372e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003732:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003734:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003738:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800373c:	d024      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800373e:	035b      	lsls	r3, r3, #13
 8003740:	d50b      	bpl.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003744:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003746:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800374a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800374e:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003750:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003758:	d00d      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800375a:	b002      	add	sp, #8
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003766:	659a      	str	r2, [r3, #88]	; 0x58
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003772:	2701      	movs	r7, #1
 8003774:	e720      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003776:	68d3      	ldr	r3, [r2, #12]
 8003778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377c:	60d3      	str	r3, [r2, #12]
}
 800377e:	b002      	add	sp, #8
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 8003784:	2003      	movs	r0, #3
 8003786:	e762      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003788:	68ca      	ldr	r2, [r1, #12]
 800378a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800378e:	60ca      	str	r2, [r1, #12]
 8003790:	e7d5      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000

0800379c <SPI_WaitFifoStateUntilTimeout.part.1>:
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	e9d0 3100 	ldrd	r3, r1, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037aa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ac:	d013      	beq.n	80037d6 <SPI_WaitFifoStateUntilTimeout.part.1+0x3a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80037b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80037b4:	d107      	bne.n	80037c6 <SPI_WaitFifoStateUntilTimeout.part.1+0x2a>
        {
          SPI_RESET_CRC(hspi);
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037c6:	2201      	movs	r2, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80037ca:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80037ce:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80037d2:	2003      	movs	r0, #3
 80037d4:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d6:	6882      	ldr	r2, [r0, #8]
 80037d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80037dc:	d002      	beq.n	80037e4 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80037e2:	d1e4      	bne.n	80037ae <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
          __HAL_SPI_DISABLE(hspi);
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e7df      	b.n	80037ae <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
 80037ee:	bf00      	nop

080037f0 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	460c      	mov	r4, r1
 80037f6:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	e001      	b.n	8003800 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x10>
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	1c62      	adds	r2, r4, #1
 80037fe:	d104      	bne.n	800380a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003800:	6898      	ldr	r0, [r3, #8]
 8003802:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003806:	d1f9      	bne.n	80037fc <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
}
 8003808:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800380a:	f7fd fa4d 	bl	8000ca8 <HAL_GetTick>
 800380e:	1b80      	subs	r0, r0, r6
 8003810:	4284      	cmp	r4, r0
 8003812:	d8f1      	bhi.n	80037f8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 8003814:	4628      	mov	r0, r5
}
 8003816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800381a:	f7ff bfbf 	b.w	800379c <SPI_WaitFifoStateUntilTimeout.part.1>
 800381e:	bf00      	nop

08003820 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	4606      	mov	r6, r0
 8003824:	460c      	mov	r4, r1
 8003826:	4615      	mov	r5, r2
 8003828:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800382a:	6831      	ldr	r1, [r6, #0]
 800382c:	e005      	b.n	800383a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800382e:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003832:	bf08      	it	eq
 8003834:	7b0a      	ldrbeq	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003836:	1c6b      	adds	r3, r5, #1
 8003838:	d103      	bne.n	8003842 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x22>
  while ((hspi->Instance->SR & Fifo) != State)
 800383a:	6888      	ldr	r0, [r1, #8]
 800383c:	4020      	ands	r0, r4
 800383e:	d1f6      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
      }
    }
  }

  return HAL_OK;
}
 8003840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003842:	f7fd fa31 	bl	8000ca8 <HAL_GetTick>
 8003846:	1bc0      	subs	r0, r0, r7
 8003848:	4285      	cmp	r5, r0
 800384a:	d8ee      	bhi.n	800382a <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800384c:	4630      	mov	r0, r6
}
 800384e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003852:	f7ff bfa3 	b.w	800379c <SPI_WaitFifoStateUntilTimeout.part.1>
 8003856:	bf00      	nop

08003858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800385a:	4613      	mov	r3, r2
{
 800385c:	460d      	mov	r5, r1
 800385e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003860:	460a      	mov	r2, r1
 8003862:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8003866:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003868:	f7ff ffda 	bl	8003820 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800386c:	b970      	cbnz	r0, 800388c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	4632      	mov	r2, r6
 8003870:	4629      	mov	r1, r5
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff ffbc 	bl	80037f0 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8003878:	b940      	cbnz	r0, 800388c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800387a:	4633      	mov	r3, r6
 800387c:	462a      	mov	r2, r5
 800387e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff ffcc 	bl	8003820 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8003888:	b900      	cbnz	r0, 800388c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800388a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003894:	2003      	movs	r0, #3
}
 8003896:	bd70      	pop	{r4, r5, r6, pc}

08003898 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003898:	2800      	cmp	r0, #0
 800389a:	d051      	beq.n	8003940 <HAL_SPI_Init+0xa8>
{
 800389c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800389e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a2:	2200      	movs	r2, #0
{
 80038a4:	b083      	sub	sp, #12
 80038a6:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d041      	beq.n	8003936 <HAL_SPI_Init+0x9e>
  hspi->State = HAL_SPI_STATE_BUSY;
 80038b2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80038b4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80038b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80038ba:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038bc:	68e6      	ldr	r6, [r4, #12]
 80038be:	6b22      	ldr	r2, [r4, #48]	; 0x30
  __HAL_SPI_DISABLE(hspi);
 80038c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038c4:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80038c8:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ca:	d92d      	bls.n	8003928 <HAL_SPI_Init+0x90>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038cc:	f5b6 6f70 	cmp.w	r6, #3840	; 0xf00
 80038d0:	d138      	bne.n	8003944 <HAL_SPI_Init+0xac>
 80038d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	d03a      	beq.n	800394e <HAL_SPI_Init+0xb6>
 80038d8:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80038dc:	68a2      	ldr	r2, [r4, #8]
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	6927      	ldr	r7, [r4, #16]
 80038e2:	4313      	orrs	r3, r2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80038e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038e6:	9201      	str	r2, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80038e8:	6962      	ldr	r2, [r4, #20]
 80038ea:	433b      	orrs	r3, r7
 80038ec:	4313      	orrs	r3, r2
 80038ee:	e9d4 7506 	ldrd	r7, r5, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80038f2:	9a01      	ldr	r2, [sp, #4]
 80038f4:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80038f6:	6a26      	ldr	r6, [r4, #32]
 80038f8:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80038fa:	6b65      	ldr	r5, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80038fc:	4333      	orrs	r3, r6
 80038fe:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003902:	0c3f      	lsrs	r7, r7, #16
 8003904:	f007 0704 	and.w	r7, r7, #4
 8003908:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800390a:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800390c:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800390e:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003910:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003912:	ea45 050c 	orr.w	r5, r5, ip
  hspi->State     = HAL_SPI_STATE_READY;
 8003916:	2601      	movs	r6, #1
  return HAL_OK;
 8003918:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800391a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800391c:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800391e:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003920:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 8003924:	b003      	add	sp, #12
 8003926:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003928:	d014      	beq.n	8003954 <HAL_SPI_Init+0xbc>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392a:	2000      	movs	r0, #0
 800392c:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800392e:	b1aa      	cbz	r2, 800395c <HAL_SPI_Init+0xc4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003930:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8003934:	e7d2      	b.n	80038dc <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 8003936:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800393a:	f004 fdbd 	bl	80084b8 <HAL_SPI_MspInit>
 800393e:	e7b8      	b.n	80038b2 <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 8003940:	2001      	movs	r0, #1
}
 8003942:	4770      	bx	lr
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003944:	2000      	movs	r0, #0
 8003946:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003948:	2a00      	cmp	r2, #0
 800394a:	d1c5      	bne.n	80038d8 <HAL_SPI_Init+0x40>
 800394c:	4610      	mov	r0, r2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800394e:	2302      	movs	r3, #2
 8003950:	6323      	str	r3, [r4, #48]	; 0x30
 8003952:	e7c1      	b.n	80038d8 <HAL_SPI_Init+0x40>
 8003954:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003956:	2a00      	cmp	r2, #0
 8003958:	d1ea      	bne.n	8003930 <HAL_SPI_Init+0x98>
 800395a:	4602      	mov	r2, r0
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800395c:	2301      	movs	r3, #1
 800395e:	4610      	mov	r0, r2
 8003960:	6323      	str	r3, [r4, #48]	; 0x30
 8003962:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8003966:	e7b9      	b.n	80038dc <HAL_SPI_Init+0x44>

08003968 <HAL_SPI_Transmit>:
{
 8003968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 800396c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003970:	2c01      	cmp	r4, #1
{
 8003972:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003974:	d074      	beq.n	8003a60 <HAL_SPI_Transmit+0xf8>
 8003976:	461d      	mov	r5, r3
 8003978:	2301      	movs	r3, #1
 800397a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800397e:	4604      	mov	r4, r0
 8003980:	4617      	mov	r7, r2
 8003982:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8003984:	f7fd f990 	bl	8000ca8 <HAL_GetTick>
 8003988:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800398a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800398e:	b2c0      	uxtb	r0, r0
 8003990:	2801      	cmp	r0, #1
 8003992:	d009      	beq.n	80039a8 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8003994:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003996:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003998:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800399a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800399e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80039a2:	b002      	add	sp, #8
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80039a8:	f1b8 0f00 	cmp.w	r8, #0
 80039ac:	d0f3      	beq.n	8003996 <HAL_SPI_Transmit+0x2e>
 80039ae:	2f00      	cmp	r7, #0
 80039b0:	d0f1      	beq.n	8003996 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b2:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b8:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039ba:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039c0:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039c6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = 0U;
 80039c8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039cc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 80039d0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039d2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039d4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80039d8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039da:	d103      	bne.n	80039e4 <HAL_SPI_Transmit+0x7c>
    SPI_1LINE_TX(hspi);
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e2:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	0652      	lsls	r2, r2, #25
 80039e8:	d403      	bmi.n	80039f2 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f2:	68e2      	ldr	r2, [r4, #12]
 80039f4:	6861      	ldr	r1, [r4, #4]
 80039f6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80039fa:	d835      	bhi.n	8003a68 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d06b      	beq.n	8003ad8 <HAL_SPI_Transmit+0x170>
 8003a00:	2f01      	cmp	r7, #1
 8003a02:	d069      	beq.n	8003ad8 <HAL_SPI_Transmit+0x170>
    while (hspi->TxXferCount > 0U)
 8003a04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	b1a3      	cbz	r3, 8003a34 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	0792      	lsls	r2, r2, #30
 8003a10:	d550      	bpl.n	8003ab4 <HAL_SPI_Transmit+0x14c>
        if (hspi->TxXferCount > 1U)
 8003a12:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8003a14:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a16:	2801      	cmp	r0, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a18:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 8003a1a:	d953      	bls.n	8003ac4 <HAL_SPI_Transmit+0x15c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003a20:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 8003a22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a24:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a26:	3b02      	subs	r3, #2
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003a2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ea      	bne.n	8003a0a <HAL_SPI_Transmit+0xa2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a34:	4632      	mov	r2, r6
 8003a36:	4629      	mov	r1, r5
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff ff0d 	bl	8003858 <SPI_EndRxTxTransaction>
 8003a3e:	b108      	cbz	r0, 8003a44 <HAL_SPI_Transmit+0xdc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	2320      	movs	r3, #32
 8003a42:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a44:	68a3      	ldr	r3, [r4, #8]
 8003a46:	b933      	cbnz	r3, 8003a56 <HAL_SPI_Transmit+0xee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	68d3      	ldr	r3, [r2, #12]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	6893      	ldr	r3, [r2, #8]
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a56:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003a58:	3000      	adds	r0, #0
 8003a5a:	bf18      	it	ne
 8003a5c:	2001      	movne	r0, #1
error:
 8003a5e:	e79a      	b.n	8003996 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8003a60:	2002      	movs	r0, #2
}
 8003a62:	b002      	add	sp, #8
 8003a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d042      	beq.n	8003af2 <HAL_SPI_Transmit+0x18a>
 8003a6c:	2f01      	cmp	r7, #1
 8003a6e:	d040      	beq.n	8003af2 <HAL_SPI_Transmit+0x18a>
    while (hspi->TxXferCount > 0U)
 8003a70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0dd      	beq.n	8003a34 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	0790      	lsls	r0, r2, #30
 8003a7e:	d510      	bpl.n	8003aa2 <HAL_SPI_Transmit+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a82:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003a86:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8003a88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003a92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0cc      	beq.n	8003a34 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	0790      	lsls	r0, r2, #30
 8003aa0:	d4ee      	bmi.n	8003a80 <HAL_SPI_Transmit+0x118>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa2:	f7fd f901 	bl	8000ca8 <HAL_GetTick>
 8003aa6:	1b80      	subs	r0, r0, r6
 8003aa8:	42a8      	cmp	r0, r5
 8003aaa:	d3e1      	bcc.n	8003a70 <HAL_SPI_Transmit+0x108>
 8003aac:	1c69      	adds	r1, r5, #1
 8003aae:	d0df      	beq.n	8003a70 <HAL_SPI_Transmit+0x108>
          errorcode = HAL_TIMEOUT;
 8003ab0:	2003      	movs	r0, #3
 8003ab2:	e770      	b.n	8003996 <HAL_SPI_Transmit+0x2e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab4:	f7fd f8f8 	bl	8000ca8 <HAL_GetTick>
 8003ab8:	1b80      	subs	r0, r0, r6
 8003aba:	42a8      	cmp	r0, r5
 8003abc:	d3a2      	bcc.n	8003a04 <HAL_SPI_Transmit+0x9c>
 8003abe:	1c6b      	adds	r3, r5, #1
 8003ac0:	d0a0      	beq.n	8003a04 <HAL_SPI_Transmit+0x9c>
 8003ac2:	e7f5      	b.n	8003ab0 <HAL_SPI_Transmit+0x148>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ac4:	780a      	ldrb	r2, [r1, #0]
 8003ac6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8003ac8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8003aca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8003ad0:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8003ad2:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8003ad4:	63a2      	str	r2, [r4, #56]	; 0x38
 8003ad6:	e795      	b.n	8003a04 <HAL_SPI_Transmit+0x9c>
      if (hspi->TxXferCount > 1U)
 8003ad8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ada:	2a01      	cmp	r2, #1
 8003adc:	d913      	bls.n	8003b06 <HAL_SPI_Transmit+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ade:	4641      	mov	r1, r8
 8003ae0:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003ae4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8003ae6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae8:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003aea:	3b02      	subs	r3, #2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003af0:	e788      	b.n	8003a04 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af2:	4641      	mov	r1, r8
 8003af4:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003af8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003afa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afc:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003b04:	e7b4      	b.n	8003a70 <HAL_SPI_Transmit+0x108>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b06:	f898 2000 	ldrb.w	r2, [r8]
 8003b0a:	e7dc      	b.n	8003ac6 <HAL_SPI_Transmit+0x15e>

08003b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b10:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003b12:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b14:	4d16      	ldr	r5, [pc, #88]	; (8003b70 <TIM_OC1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b16:	f024 0401 	bic.w	r4, r4, #1
 8003b1a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003b1c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003b1e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b20:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8003b26:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b2a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b2e:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003b30:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8003b34:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b38:	d007      	beq.n	8003b4a <TIM_OC1_SetConfig+0x3e>
 8003b3a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003b3e:	42a8      	cmp	r0, r5
 8003b40:	d003      	beq.n	8003b4a <TIM_OC1_SetConfig+0x3e>
 8003b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b46:	42a8      	cmp	r0, r5
 8003b48:	d10b      	bne.n	8003b62 <TIM_OC1_SetConfig+0x56>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b4a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b4c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003b50:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b52:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b56:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b5a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b60:	432c      	orrs	r4, r5

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b62:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b64:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b66:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003b68:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6a:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003b6c:	6203      	str	r3, [r0, #32]
}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b78:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003b7a:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b7c:	4d17      	ldr	r5, [pc, #92]	; (8003bdc <TIM_OC3_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003b82:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003b84:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003b86:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b88:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8003b8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b92:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b96:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b98:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba0:	d013      	beq.n	8003bca <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba2:	4d0f      	ldr	r5, [pc, #60]	; (8003be0 <TIM_OC3_SetConfig+0x6c>)
 8003ba4:	42a8      	cmp	r0, r5
 8003ba6:	d002      	beq.n	8003bae <TIM_OC3_SetConfig+0x3a>
 8003ba8:	4d0e      	ldr	r5, [pc, #56]	; (8003be4 <TIM_OC3_SetConfig+0x70>)
 8003baa:	42a8      	cmp	r0, r5
 8003bac:	d106      	bne.n	8003bbc <TIM_OC3_SetConfig+0x48>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bae:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bb2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb6:	4335      	orrs	r5, r6
 8003bb8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bbc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003bbe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003bc0:	61c3      	str	r3, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003bc2:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc4:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003bc6:	6202      	str	r2, [r0, #32]
}
 8003bc8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	e7e9      	b.n	8003bae <TIM_OC3_SetConfig+0x3a>
 8003bda:	bf00      	nop
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400

08003be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bea:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bec:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bee:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf0:	4d13      	ldr	r5, [pc, #76]	; (8003c40 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003bf6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003bf8:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003bfa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003bfc:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8003c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c06:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c0c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c10:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	d007      	beq.n	8003c26 <TIM_OC4_SetConfig+0x3e>
 8003c16:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003c1a:	42a8      	cmp	r0, r5
 8003c1c:	d003      	beq.n	8003c26 <TIM_OC4_SetConfig+0x3e>
 8003c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c22:	42a8      	cmp	r0, r5
 8003c24:	d104      	bne.n	8003c30 <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c26:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c28:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c2c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c30:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c32:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003c34:	61c3      	str	r3, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003c36:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8003c38:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003c3a:	6202      	str	r2, [r0, #32]
}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40012c00 	.word	0x40012c00

08003c44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c46:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c48:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003c4a:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4c:	4d13      	ldr	r5, [pc, #76]	; (8003c9c <TIM_OC5_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c4e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003c52:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003c54:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c56:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003c58:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8003c5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c66:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	d007      	beq.n	8003c82 <TIM_OC5_SetConfig+0x3e>
 8003c72:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003c76:	42a8      	cmp	r0, r5
 8003c78:	d003      	beq.n	8003c82 <TIM_OC5_SetConfig+0x3e>
 8003c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c7e:	42a8      	cmp	r0, r5
 8003c80:	d104      	bne.n	8003c8c <TIM_OC5_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c82:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c84:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c88:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c8c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c8e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003c90:	6543      	str	r3, [r0, #84]	; 0x54

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003c92:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR5 = OC_Config->Pulse;
 8003c94:	6581      	str	r1, [r0, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8003c96:	6202      	str	r2, [r0, #32]
}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00

08003ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ca2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ca4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca6:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca8:	4d13      	ldr	r5, [pc, #76]	; (8003cf8 <TIM_OC6_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003caa:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 8003cae:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8003cb0:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003cb2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003cb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc2:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cc4:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	d007      	beq.n	8003cde <TIM_OC6_SetConfig+0x3e>
 8003cce:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003cd2:	42a8      	cmp	r0, r5
 8003cd4:	d003      	beq.n	8003cde <TIM_OC6_SetConfig+0x3e>
 8003cd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cda:	42a8      	cmp	r0, r5
 8003cdc:	d104      	bne.n	8003ce8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cde:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ce0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ce4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ce8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003cea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003cec:	6543      	str	r3, [r0, #84]	; 0x54

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003cee:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR6 = OC_Config->Pulse;
 8003cf0:	65c1      	str	r1, [r0, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8003cf2:	6202      	str	r2, [r0, #32]
}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00

08003cfc <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cfe:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d04:	6891      	ldr	r1, [r2, #8]
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_TIM_Base_Start+0x2c>)
 8003d08:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d006      	beq.n	8003d1c <HAL_TIM_Base_Start+0x20>
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d003      	beq.n	8003d1c <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003d22:	2000      	movs	r0, #0
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	00010007 	.word	0x00010007

08003d2c <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d2c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d30:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d32:	f001 011f 	and.w	r1, r1, #31
 8003d36:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8003d3a:	ea20 0001 	bic.w	r0, r0, r1
{
 8003d3e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8003d40:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d42:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d44:	4c0f      	ldr	r4, [pc, #60]	; (8003d84 <HAL_TIM_OC_Start+0x58>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d46:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d48:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d4c:	d006      	beq.n	8003d5c <HAL_TIM_OC_Start+0x30>
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_TIM_OC_Start+0x5c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <HAL_TIM_OC_Start+0x30>
 8003d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d103      	bne.n	8003d64 <HAL_TIM_OC_Start+0x38>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_TIM_OC_Start+0x60>)
 8003d68:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6a:	2a06      	cmp	r2, #6
 8003d6c:	d006      	beq.n	8003d7c <HAL_TIM_OC_Start+0x50>
 8003d6e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d72:	d003      	beq.n	8003d7c <HAL_TIM_OC_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
}
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	00010007 	.word	0x00010007

08003d90 <HAL_TIM_PWM_MspInit>:
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop

08003d94 <HAL_TIM_PWM_Start>:
 8003d94:	f7ff bfca 	b.w	8003d2c <HAL_TIM_OC_Start>

08003d98 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d98:	6803      	ldr	r3, [r0, #0]
{
 8003d9a:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d9e:	4c1b      	ldr	r4, [pc, #108]	; (8003e0c <HAL_TIM_PWM_Stop+0x74>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003da0:	f001 051f 	and.w	r5, r1, #31
 8003da4:	2101      	movs	r1, #1
 8003da6:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 8003da8:	ea22 0101 	bic.w	r1, r2, r1
 8003dac:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	d01a      	beq.n	8003dec <HAL_TIM_PWM_Stop+0x54>
 8003db6:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <HAL_TIM_PWM_Stop+0x78>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d017      	beq.n	8003dec <HAL_TIM_PWM_Stop+0x54>
 8003dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_TIM_PWM_Stop+0x54>
  __HAL_TIM_DISABLE(htim);
 8003dc4:	6a19      	ldr	r1, [r3, #32]
 8003dc6:	f241 1211 	movw	r2, #4369	; 0x1111
 8003dca:	4211      	tst	r1, r2
 8003dcc:	d108      	bne.n	8003de0 <HAL_TIM_PWM_Stop+0x48>
 8003dce:	6a19      	ldr	r1, [r3, #32]
 8003dd0:	f240 4244 	movw	r2, #1092	; 0x444
 8003dd4:	4211      	tst	r1, r2
 8003dd6:	d103      	bne.n	8003de0 <HAL_TIM_PWM_Stop+0x48>
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003de6:	bc30      	pop	{r4, r5}
 8003de8:	2000      	movs	r0, #0
 8003dea:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8003dec:	6a19      	ldr	r1, [r3, #32]
 8003dee:	f241 1211 	movw	r2, #4369	; 0x1111
 8003df2:	4211      	tst	r1, r2
 8003df4:	d1e6      	bne.n	8003dc4 <HAL_TIM_PWM_Stop+0x2c>
 8003df6:	6a19      	ldr	r1, [r3, #32]
 8003df8:	f240 4244 	movw	r2, #1092	; 0x444
 8003dfc:	4211      	tst	r1, r2
 8003dfe:	d1e1      	bne.n	8003dc4 <HAL_TIM_PWM_Stop+0x2c>
 8003e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
 8003e08:	e7dc      	b.n	8003dc4 <HAL_TIM_PWM_Stop+0x2c>
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40014000 	.word	0x40014000

08003e14 <HAL_TIM_OnePulse_MspInit>:
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop

08003e18 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d05a      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003e22:	6803      	ldr	r3, [r0, #0]
{
 8003e24:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003e26:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003e2a:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e2c:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2e:	4c4d      	ldr	r4, [pc, #308]	; (8003f64 <HAL_TIM_ConfigClockSource+0x14c>)
  switch (sClockSourceConfig->ClockSource)
 8003e30:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e32:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 8003e36:	f04f 0501 	mov.w	r5, #1
 8003e3a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8003e3e:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e40:	d074      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x114>
 8003e42:	d94a      	bls.n	8003eda <HAL_TIM_ConfigClockSource+0xc2>
 8003e44:	2a60      	cmp	r2, #96	; 0x60
 8003e46:	d02d      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0x8c>
 8003e48:	d956      	bls.n	8003ef8 <HAL_TIM_ConfigClockSource+0xe0>
 8003e4a:	2a70      	cmp	r2, #112	; 0x70
 8003e4c:	d01a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x6c>
 8003e4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e52:	d10e      	bne.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e54:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003e58:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003e5a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e5c:	432a      	orrs	r2, r5
 8003e5e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e62:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e66:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003e68:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e70:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8003e72:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	2201      	movs	r2, #1
 8003e76:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003e7e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003e80:	4618      	mov	r0, r3
}
 8003e82:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e84:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003e88:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003e8a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	432a      	orrs	r2, r5
 8003e8e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e92:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e96:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003e98:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e9a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003ea0:	609a      	str	r2, [r3, #8]
      break;
 8003ea2:	e7e6      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea6:	684d      	ldr	r5, [r1, #4]
 8003ea8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eaa:	f024 0410 	bic.w	r4, r4, #16
 8003eae:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ebc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec6:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003ec8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ece:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	e7cd      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003ed6:	2002      	movs	r0, #2
}
 8003ed8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003eda:	2a10      	cmp	r2, #16
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_ConfigClockSource+0xd0>
 8003ede:	d93d      	bls.n	8003f5c <HAL_TIM_ConfigClockSource+0x144>
 8003ee0:	2a20      	cmp	r2, #32
 8003ee2:	d001      	beq.n	8003ee8 <HAL_TIM_ConfigClockSource+0xd0>
 8003ee4:	2a30      	cmp	r2, #48	; 0x30
 8003ee6:	d1c4      	bne.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8003ee8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eea:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eee:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	e7bc      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003ef8:	2a50      	cmp	r2, #80	; 0x50
 8003efa:	d1ba      	bne.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003efc:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f00:	684c      	ldr	r4, [r1, #4]
 8003f02:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f04:	f026 0601 	bic.w	r6, r6, #1
 8003f08:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f0c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f14:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003f18:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003f1e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f24:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	e7a2      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003f2c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f30:	684c      	ldr	r4, [r1, #4]
 8003f32:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f34:	f026 0601 	bic.w	r6, r6, #1
 8003f38:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f44:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003f48:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003f4e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f54:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	e78a      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	d0c3      	beq.n	8003ee8 <HAL_TIM_ConfigClockSource+0xd0>
 8003f60:	e787      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x5a>
 8003f62:	bf00      	nop
 8003f64:	fffe0088 	.word	0xfffe0088

08003f68 <HAL_TIM_PeriodElapsedCallback>:
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop

08003f6c <HAL_TIM_OC_DelayElapsedCallback>:
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop

08003f70 <HAL_TIM_IC_CaptureCallback>:
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop

08003f74 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop

08003f78 <HAL_TIM_TriggerCallback>:
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f7c:	6803      	ldr	r3, [r0, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	0791      	lsls	r1, r2, #30
{
 8003f82:	b510      	push	{r4, lr}
 8003f84:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f86:	d502      	bpl.n	8003f8e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	0792      	lsls	r2, r2, #30
 8003f8c:	d468      	bmi.n	8004060 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	0752      	lsls	r2, r2, #29
 8003f92:	d502      	bpl.n	8003f9a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	0750      	lsls	r0, r2, #29
 8003f98:	d44f      	bmi.n	800403a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	0711      	lsls	r1, r2, #28
 8003f9e:	d502      	bpl.n	8003fa6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	0712      	lsls	r2, r2, #28
 8003fa4:	d437      	bmi.n	8004016 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	06d0      	lsls	r0, r2, #27
 8003faa:	d502      	bpl.n	8003fb2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	06d1      	lsls	r1, r2, #27
 8003fb0:	d41e      	bmi.n	8003ff0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	07d2      	lsls	r2, r2, #31
 8003fb6:	d502      	bpl.n	8003fbe <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	07d0      	lsls	r0, r2, #31
 8003fbc:	d469      	bmi.n	8004092 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	0611      	lsls	r1, r2, #24
 8003fc2:	d502      	bpl.n	8003fca <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	0612      	lsls	r2, r2, #24
 8003fc8:	d46b      	bmi.n	80040a2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	05d0      	lsls	r0, r2, #23
 8003fce:	d502      	bpl.n	8003fd6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	0611      	lsls	r1, r2, #24
 8003fd4:	d46d      	bmi.n	80040b2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	0652      	lsls	r2, r2, #25
 8003fda:	d502      	bpl.n	8003fe2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	0650      	lsls	r0, r2, #25
 8003fe0:	d46f      	bmi.n	80040c2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	0691      	lsls	r1, r2, #26
 8003fe6:	d502      	bpl.n	8003fee <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	0692      	lsls	r2, r2, #26
 8003fec:	d449      	bmi.n	8004082 <HAL_TIM_IRQHandler+0x106>
}
 8003fee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ff0:	f06f 0210 	mvn.w	r2, #16
 8003ff4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ffa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ffe:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004000:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004002:	d16f      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004004:	f7ff ffb2 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	4620      	mov	r0, r4
 800400a:	f7ff ffb3 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	2200      	movs	r2, #0
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	7722      	strb	r2, [r4, #28]
 8004014:	e7cd      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004016:	f06f 0208 	mvn.w	r2, #8
 800401a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800401c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004022:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004026:	d15a      	bne.n	80040de <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004028:	f7ff ffa0 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff ffa1 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	2200      	movs	r2, #0
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	7722      	strb	r2, [r4, #28]
 8004038:	e7b5      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403a:	f06f 0204 	mvn.w	r2, #4
 800403e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004040:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004042:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004044:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004048:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	d144      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	f7ff ff8d 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	4620      	mov	r0, r4
 8004054:	f7ff ff8e 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	2200      	movs	r2, #0
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	7722      	strb	r2, [r4, #28]
 800405e:	e79c      	b.n	8003f9a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004060:	f06f 0202 	mvn.w	r2, #2
 8004064:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004066:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004068:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800406a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800406e:	d130      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004070:	f7ff ff7c 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	4620      	mov	r0, r4
 8004076:	f7ff ff7d 	bl	8003f74 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	2200      	movs	r2, #0
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	7722      	strb	r2, [r4, #28]
 8004080:	e785      	b.n	8003f8e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004082:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004086:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004088:	611a      	str	r2, [r3, #16]
}
 800408a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800408e:	f000 ba2f 	b.w	80044f0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004092:	f06f 0201 	mvn.w	r2, #1
 8004096:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004098:	4620      	mov	r0, r4
 800409a:	f7ff ff65 	bl	8003f68 <HAL_TIM_PeriodElapsedCallback>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	e78d      	b.n	8003fbe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040a8:	4620      	mov	r0, r4
 80040aa:	f000 fa23 	bl	80044f4 <HAL_TIMEx_BreakCallback>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	e78b      	b.n	8003fca <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 fa1d 	bl	80044f8 <HAL_TIMEx_Break2Callback>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	e789      	b.n	8003fd6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7ff ff55 	bl	8003f78 <HAL_TIM_TriggerCallback>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	e787      	b.n	8003fe2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	f7ff ff4d 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 80040d6:	e7d0      	b.n	800407a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	f7ff ff4a 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e7bc      	b.n	8004058 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80040de:	f7ff ff47 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 80040e2:	e7a6      	b.n	8004032 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80040e4:	f7ff ff44 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e791      	b.n	800400e <HAL_TIM_IRQHandler+0x92>
 80040ea:	bf00      	nop

080040ec <TIM_Base_SetConfig>:
{
 80040ec:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ee:	4c1d      	ldr	r4, [pc, #116]	; (8004164 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 80040f0:	6803      	ldr	r3, [r0, #0]
 80040f2:	694f      	ldr	r7, [r1, #20]
 80040f4:	688d      	ldr	r5, [r1, #8]
 80040f6:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d01d      	beq.n	8004138 <TIM_Base_SetConfig+0x4c>
 80040fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004100:	d011      	beq.n	8004126 <TIM_Base_SetConfig+0x3a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004102:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004106:	42a0      	cmp	r0, r4
 8004108:	d02a      	beq.n	8004160 <TIM_Base_SetConfig+0x74>
 800410a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800410e:	42a0      	cmp	r0, r4
 8004110:	d026      	beq.n	8004160 <TIM_Base_SetConfig+0x74>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004116:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8004118:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800411a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800411c:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800411e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004120:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8004122:	6143      	str	r3, [r0, #20]
}
 8004124:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004126:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004128:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800412e:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004134:	430b      	orrs	r3, r1
 8004136:	e7ec      	b.n	8004112 <TIM_Base_SetConfig+0x26>
    tmpcr1 |= Structure->CounterMode;
 8004138:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004140:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414c:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800414e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004152:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004154:	690b      	ldr	r3, [r1, #16]
 8004156:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004158:	2301      	movs	r3, #1
 800415a:	6143      	str	r3, [r0, #20]
}
 800415c:	bcf0      	pop	{r4, r5, r6, r7}
 800415e:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004160:	68cc      	ldr	r4, [r1, #12]
 8004162:	e7ee      	b.n	8004142 <TIM_Base_SetConfig+0x56>
 8004164:	40012c00 	.word	0x40012c00

08004168 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004168:	b1b8      	cbz	r0, 800419a <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 800416a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800416e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004170:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004174:	4604      	mov	r4, r0
 8004176:	b15b      	cbz	r3, 8004190 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	2302      	movs	r3, #2
 800417a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	1d21      	adds	r1, r4, #4
 8004182:	f7ff ffb3 	bl	80040ec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004186:	2301      	movs	r3, #1
 8004188:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800418c:	2000      	movs	r0, #0
}
 800418e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004190:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004194:	f004 f9c6 	bl	8008524 <HAL_TIM_Base_MspInit>
 8004198:	e7ee      	b.n	8004178 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800419a:	2001      	movs	r0, #1
}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop

080041a0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80041a0:	b1b8      	cbz	r0, 80041d2 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80041a6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80041a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041ac:	4604      	mov	r4, r0
 80041ae:	b15b      	cbz	r3, 80041c8 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	2302      	movs	r3, #2
 80041b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b6:	6820      	ldr	r0, [r4, #0]
 80041b8:	1d21      	adds	r1, r4, #4
 80041ba:	f7ff ff97 	bl	80040ec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80041be:	2301      	movs	r3, #1
 80041c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80041c4:	2000      	movs	r0, #0
}
 80041c6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80041cc:	f7ff fde0 	bl	8003d90 <HAL_TIM_PWM_MspInit>
 80041d0:	e7ee      	b.n	80041b0 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80041d2:	2001      	movs	r0, #1
}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop

080041d8 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 80041d8:	b300      	cbz	r0, 800421c <HAL_TIM_OnePulse_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80041de:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80041e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041e4:	4604      	mov	r4, r0
 80041e6:	460d      	mov	r5, r1
 80041e8:	b19b      	cbz	r3, 8004212 <HAL_TIM_OnePulse_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 80041ea:	2302      	movs	r3, #2
 80041ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	1d21      	adds	r1, r4, #4
 80041f4:	f7ff ff7a 	bl	80040ec <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f022 0208 	bic.w	r2, r2, #8
 8004200:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8004202:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004204:	2601      	movs	r6, #1
  htim->Instance->CR1 |= OnePulseMode;
 8004206:	432a      	orrs	r2, r5
 8004208:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800420a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800420c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 8004210:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004212:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8004216:	f7ff fdfd 	bl	8003e14 <HAL_TIM_OnePulse_MspInit>
 800421a:	e7e6      	b.n	80041ea <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 800421c:	2001      	movs	r0, #1
}
 800421e:	4770      	bx	lr

08004220 <TIM_OC2_SetConfig>:
{
 8004220:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004222:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004226:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004228:	4d17      	ldr	r5, [pc, #92]	; (8004288 <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	f024 0410 	bic.w	r4, r4, #16
 800422e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004230:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004232:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004234:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800423a:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800423e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004242:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004244:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800424c:	d013      	beq.n	8004276 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	4d0f      	ldr	r5, [pc, #60]	; (800428c <TIM_OC2_SetConfig+0x6c>)
 8004250:	42a8      	cmp	r0, r5
 8004252:	d002      	beq.n	800425a <TIM_OC2_SetConfig+0x3a>
 8004254:	4d0e      	ldr	r5, [pc, #56]	; (8004290 <TIM_OC2_SetConfig+0x70>)
 8004256:	42a8      	cmp	r0, r5
 8004258:	d106      	bne.n	8004268 <TIM_OC2_SetConfig+0x48>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800425a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004262:	4335      	orrs	r5, r6
 8004264:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004268:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800426a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800426c:	6183      	str	r3, [r0, #24]
}
 800426e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004270:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004272:	6202      	str	r2, [r0, #32]
}
 8004274:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004276:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004284:	e7e9      	b.n	800425a <TIM_OC2_SetConfig+0x3a>
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400

08004294 <HAL_TIM_PWM_ConfigChannel>:
{
 8004294:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004296:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	f000 80aa 	beq.w	80043f4 <HAL_TIM_PWM_ConfigChannel+0x160>
 80042a0:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80042a4:	2101      	movs	r1, #1
 80042a6:	4604      	mov	r4, r0
 80042a8:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80042b0:	2a14      	cmp	r2, #20
 80042b2:	d81d      	bhi.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80042b4:	e8df f002 	tbb	[pc, r2]
 80042b8:	1c1c1c0b 	.word	0x1c1c1c0b
 80042bc:	1c1c1c3c 	.word	0x1c1c1c3c
 80042c0:	1c1c1c55 	.word	0x1c1c1c55
 80042c4:	1c1c1c6d 	.word	0x1c1c1c6d
 80042c8:	1c1c1c86 	.word	0x1c1c1c86
 80042cc:	23          	.byte	0x23
 80042cd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042ce:	4629      	mov	r1, r5
 80042d0:	6800      	ldr	r0, [r0, #0]
 80042d2:	f7ff fc1b 	bl	8003b0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042da:	6999      	ldr	r1, [r3, #24]
 80042dc:	f041 0108 	orr.w	r1, r1, #8
 80042e0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e2:	6999      	ldr	r1, [r3, #24]
 80042e4:	f021 0104 	bic.w	r1, r1, #4
 80042e8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	4302      	orrs	r2, r0
 80042ee:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80042f2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80042f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80042fc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042fe:	4629      	mov	r1, r5
 8004300:	6800      	ldr	r0, [r0, #0]
 8004302:	f7ff fccd 	bl	8003ca0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004306:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004308:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800430a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800430c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004310:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004312:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004314:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004318:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800431a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004322:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004324:	2301      	movs	r3, #1
 8004326:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800432a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800432e:	e7e5      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004330:	4629      	mov	r1, r5
 8004332:	6800      	ldr	r0, [r0, #0]
 8004334:	f7ff ff74 	bl	8004220 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004338:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800433a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004342:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004344:	6999      	ldr	r1, [r3, #24]
 8004346:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800434a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004352:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004354:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004356:	2301      	movs	r3, #1
 8004358:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800435c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004360:	e7cc      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004362:	4629      	mov	r1, r5
 8004364:	6800      	ldr	r0, [r0, #0]
 8004366:	f7ff fc05 	bl	8003b74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800436a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800436c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800436e:	69d9      	ldr	r1, [r3, #28]
 8004370:	f041 0108 	orr.w	r1, r1, #8
 8004374:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004376:	69d9      	ldr	r1, [r3, #28]
 8004378:	f021 0104 	bic.w	r1, r1, #4
 800437c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	4302      	orrs	r2, r0
 8004382:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004384:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004386:	2301      	movs	r3, #1
 8004388:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800438c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004390:	e7b4      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004392:	4629      	mov	r1, r5
 8004394:	6800      	ldr	r0, [r0, #0]
 8004396:	f7ff fc27 	bl	8003be8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800439c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80043a4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043a6:	69d9      	ldr	r1, [r3, #28]
 80043a8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80043ac:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80043b4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80043b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80043c2:	e79b      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043c4:	4629      	mov	r1, r5
 80043c6:	6800      	ldr	r0, [r0, #0]
 80043c8:	f7ff fc3c 	bl	8003c44 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043ce:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043d2:	f041 0108 	orr.w	r1, r1, #8
 80043d6:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043da:	f021 0104 	bic.w	r1, r1, #4
 80043de:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	4302      	orrs	r2, r0
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80043e6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80043f2:	e783      	b.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 80043f4:	2002      	movs	r0, #2
}
 80043f6:	bd38      	pop	{r3, r4, r5, pc}

080043f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d02e      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x66>
{
 8004400:	b4f0      	push	{r4, r5, r6, r7}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004402:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004404:	4c17      	ldr	r4, [pc, #92]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004406:	680e      	ldr	r6, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	2202      	movs	r2, #2
 800440a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800440e:	2501      	movs	r5, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004410:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8004412:	685a      	ldr	r2, [r3, #4]
  __HAL_LOCK(htim);
 8004414:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004418:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800441a:	d017      	beq.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800441c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004420:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004426:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004428:	d002      	beq.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800442a:	4a0f      	ldr	r2, [pc, #60]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d104      	bne.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004430:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004436:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004438:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800443a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800443c:	2201      	movs	r2, #1
 800443e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004442:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004446:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004448:	4618      	mov	r0, r3
}
 800444a:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800444c:	684f      	ldr	r7, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800444e:	f422 0470 	bic.w	r4, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004452:	433c      	orrs	r4, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 8004454:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004458:	4334      	orrs	r4, r6
  htim->Instance->CR2 = tmpcr2;
 800445a:	605c      	str	r4, [r3, #4]
 800445c:	e7e8      	b.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  __HAL_LOCK(htim);
 800445e:	2002      	movs	r0, #2
}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40014000 	.word	0x40014000

0800446c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800446c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d038      	beq.n	80044e6 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
{
 8004474:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004476:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800447a:	4602      	mov	r2, r0
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004480:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004484:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800448a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800448c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004490:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004494:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800449a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800449c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044a0:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044a2:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044a4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044ac:	4c0f      	ldr	r4, [pc, #60]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
 80044ae:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044b4:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044b6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044ba:	d006      	beq.n	80044ca <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80044bc:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80044be:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 80044c0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80044c2:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 80044c4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 80044c8:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044ca:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80044cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044d0:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044d4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044dc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044e2:	430b      	orrs	r3, r1
 80044e4:	e7ea      	b.n	80044bc <HAL_TIMEx_ConfigBreakDeadTime+0x50>
  __HAL_LOCK(htim);
 80044e6:	2002      	movs	r0, #2
}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <HAL_TIMEx_CommutCallback>:
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop

080044f4 <HAL_TIMEx_BreakCallback>:
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop

080044f8 <HAL_TIMEx_Break2Callback>:
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop

080044fc <EncodersInit>:
 speed = 4000/420*60*(42*3.1415) = 4000/7 * 42 *3.1415
 speed = 4000 / 7 * 132
 */

//=======================================================================
void EncodersInit(void) {
 80044fc:	b470      	push	{r4, r5, r6}
	enc_leftCounter = 0;
	enc_rightCounter = 0;

	enc_last_leftCounter = 0;
	enc_last_rightCounter = 0;
 80044fe:	4807      	ldr	r0, [pc, #28]	; (800451c <EncodersInit+0x20>)
	enc_leftCounter = 0;
 8004500:	4e07      	ldr	r6, [pc, #28]	; (8004520 <EncodersInit+0x24>)
	enc_rightCounter = 0;
 8004502:	4d08      	ldr	r5, [pc, #32]	; (8004524 <EncodersInit+0x28>)
	enc_last_leftCounter = 0;
 8004504:	4c08      	ldr	r4, [pc, #32]	; (8004528 <EncodersInit+0x2c>)

	enc_left_speed = 0;
 8004506:	4909      	ldr	r1, [pc, #36]	; (800452c <EncodersInit+0x30>)
	enc_right_speed = 0;
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <EncodersInit+0x34>)
	enc_leftCounter = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	6033      	str	r3, [r6, #0]
	enc_rightCounter = 0;
 800450e:	602b      	str	r3, [r5, #0]
	enc_last_leftCounter = 0;
 8004510:	6023      	str	r3, [r4, #0]
	enc_last_rightCounter = 0;
 8004512:	6003      	str	r3, [r0, #0]

}
 8004514:	bc70      	pop	{r4, r5, r6}
	enc_left_speed = 0;
 8004516:	600b      	str	r3, [r1, #0]
	enc_right_speed = 0;
 8004518:	6013      	str	r3, [r2, #0]
}
 800451a:	4770      	bx	lr
 800451c:	200001b8 	.word	0x200001b8
 8004520:	200001bc 	.word	0x200001bc
 8004524:	200001b4 	.word	0x200001b4
 8004528:	200001ac 	.word	0x200001ac
 800452c:	200001b0 	.word	0x200001b0
 8004530:	200001a8 	.word	0x200001a8

08004534 <clear_encoders>:
 8004534:	f7ff bfe2 	b.w	80044fc <EncodersInit>

08004538 <LcdErase>:
** display memory of the S6B0724 LCD controller.
**
*/

void LcdErase(void)
{
 8004538:	b538      	push	{r3, r4, r5, lr}
	//memset( lcd_display_array,0xFF,sizeof(lcd_display_array));
	memset( lcd_display_array,0x00,sizeof(lcd_display_array));
 800453a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800453e:	2100      	movs	r1, #0
 8004540:	4809      	ldr	r0, [pc, #36]	; (8004568 <LcdErase+0x30>)

    //  Reset current position.
	X_pos = 0;
 8004542:	4c0a      	ldr	r4, [pc, #40]	; (800456c <LcdErase+0x34>)
	Y_pos = 0;

	Y_lo = 0;			// set update area to full screen;
 8004544:	4d0a      	ldr	r5, [pc, #40]	; (8004570 <LcdErase+0x38>)
	memset( lcd_display_array,0x00,sizeof(lcd_display_array));
 8004546:	f004 fbe5 	bl	8008d14 <memset>
	Y_pos = 0;
 800454a:	490a      	ldr	r1, [pc, #40]	; (8004574 <LcdErase+0x3c>)
	Y_hi = Y_BYTES -1;
 800454c:	480a      	ldr	r0, [pc, #40]	; (8004578 <LcdErase+0x40>)
    UpdateLcd = TRUE;
 800454e:	4a0b      	ldr	r2, [pc, #44]	; (800457c <LcdErase+0x44>)
	X_pos = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	7023      	strb	r3, [r4, #0]
	Y_pos = 0;
 8004554:	700b      	strb	r3, [r1, #0]
	Y_hi = Y_BYTES -1;
 8004556:	2407      	movs	r4, #7
    UpdateLcd = TRUE;
 8004558:	2101      	movs	r1, #1
	Y_hi = Y_BYTES -1;
 800455a:	7004      	strb	r4, [r0, #0]
    UpdateLcd = TRUE;
 800455c:	7011      	strb	r1, [r2, #0]
	Y_lo = 0;			// set update area to full screen;
 800455e:	702b      	strb	r3, [r5, #0]
	LcdUpdate();
}
 8004560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LcdUpdate();
 8004564:	f000 bc60 	b.w	8004e28 <LcdUpdate>
 8004568:	200001d4 	.word	0x200001d4
 800456c:	200000dc 	.word	0x200000dc
 8004570:	200005d6 	.word	0x200005d6
 8004574:	200000dd 	.word	0x200000dd
 8004578:	200005d5 	.word	0x200005d5
 800457c:	200005d4 	.word	0x200005d4

08004580 <LcdTextXY>:





void LcdTextXY( unsigned char x, unsigned char y, unsigned char font_type, unsigned char style, char *str){
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	b087      	sub	sp, #28
unsigned char font_width;
unsigned char font_height;
unsigned char column;				//, l_columns;						//column of grf display in pixels
unsigned char i;

	switch (font_type) {
 8004586:	3a01      	subs	r2, #1
void LcdTextXY( unsigned char x, unsigned char y, unsigned char font_type, unsigned char style, char *str){
 8004588:	4689      	mov	r9, r1
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
	switch (font_type) {
 8004590:	2a03      	cmp	r2, #3
 8004592:	d80b      	bhi.n	80045ac <LcdTextXY+0x2c>
 8004594:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004598:	01260118 	.word	0x01260118
 800459c:	0004011f 	.word	0x0004011f
			font_width = Font_3.charWidth;
			font_height = Font_3.charHeight;
			font = Font_3.FontTable;
		break;
		case 4:
			font_width = Font_4.charWidth;
 80045a0:	4b95      	ldr	r3, [pc, #596]	; (80047f8 <LcdTextXY+0x278>)
 80045a2:	f893 8000 	ldrb.w	r8, [r3]
			font_height = Font_4.charHeight;
 80045a6:	785c      	ldrb	r4, [r3, #1]
			font = Font_4.FontTable;
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	9305      	str	r3, [sp, #20]
		break;
	}
	
	//l_columns = X_BYTES/(font_width+1);
	if ( style & CENTERED )	
 80045ac:	9b00      	ldr	r3, [sp, #0]
 80045ae:	075f      	lsls	r7, r3, #29
 80045b0:	f140 8100 	bpl.w	80047b4 <LcdTextXY+0x234>
		column = (X_BYTES - (strlen(str)*(font_width+1))) /2;
 80045b4:	4650      	mov	r0, sl
 80045b6:	f7fb fe0b 	bl	80001d0 <strlen>
 80045ba:	fb08 0000 	mla	r0, r8, r0, r0
 80045be:	f1c0 0380 	rsb	r3, r0, #128	; 0x80
 80045c2:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80045c6:	9800      	ldr	r0, [sp, #0]
 80045c8:	f000 0e08 	and.w	lr, r0, #8
	 else 
		column = x * (font_width+1);
		
	// If centered or inverse line - fill the beggining 		
	for (i=0; i<column; i++) {
 80045cc:	b323      	cbz	r3, 8004618 <LcdTextXY+0x98>
 80045ce:	4e8b      	ldr	r6, [pc, #556]	; (80047fc <LcdTextXY+0x27c>)
 80045d0:	f000 0501 	and.w	r5, r0, #1
 80045d4:	2200      	movs	r2, #0
		if ( style &(  INV_LINE) )	{
			lcd_display_array[y][i] = 0xFF;
 80045d6:	4630      	mov	r0, r6
 80045d8:	eb06 11c9 	add.w	r1, r6, r9, lsl #7
			}
		} 
		if ( style &(  NORM_LINE) ) {
			lcd_display_array[y][i] = 0x00;
			if (font_height >8) {
				lcd_display_array[y+1][i] = 0x00;	
 80045dc:	4694      	mov	ip, r2
			lcd_display_array[y][i] = 0xFF;
 80045de:	462e      	mov	r6, r5
 80045e0:	f109 0b01 	add.w	fp, r9, #1
 80045e4:	4675      	mov	r5, lr
 80045e6:	27ff      	movs	r7, #255	; 0xff
 80045e8:	4686      	mov	lr, r0
		if ( style &(  INV_LINE) )	{
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	f000 80b4 	beq.w	8004758 <LcdTextXY+0x1d8>
			if (font_height >8) {
 80045f0:	2c08      	cmp	r4, #8
			lcd_display_array[y][i] = 0xFF;
 80045f2:	700f      	strb	r7, [r1, #0]
			if (font_height >8) {
 80045f4:	f240 80c0 	bls.w	8004778 <LcdTextXY+0x1f8>
				lcd_display_array[y+1][i] = 0xFF;	
 80045f8:	f881 7080 	strb.w	r7, [r1, #128]	; 0x80
		if ( style &(  NORM_LINE) ) {
 80045fc:	b12e      	cbz	r6, 800460a <LcdTextXY+0x8a>
			lcd_display_array[y][i] = 0x00;
 80045fe:	f881 c000 	strb.w	ip, [r1]
				lcd_display_array[y+1][i] = 0x00;	
 8004602:	eb0e 10cb 	add.w	r0, lr, fp, lsl #7
 8004606:	f800 c002 	strb.w	ip, [r0, r2]
 800460a:	3201      	adds	r2, #1
	for (i=0; i<column; i++) {
 800460c:	b2d0      	uxtb	r0, r2
 800460e:	4298      	cmp	r0, r3
 8004610:	f101 0101 	add.w	r1, r1, #1
 8004614:	d3e9      	bcc.n	80045ea <LcdTextXY+0x6a>
 8004616:	46ae      	mov	lr, r5
			}
		}
	}
	
	if ( Y_lo > y) 
 8004618:	4a79      	ldr	r2, [pc, #484]	; (8004800 <LcdTextXY+0x280>)
 800461a:	7811      	ldrb	r1, [r2, #0]
 800461c:	4549      	cmp	r1, r9
		Y_lo = y;
 800461e:	bf88      	it	hi
 8004620:	f882 9000 	strbhi.w	r9, [r2]
//	LcdOutCtl(LCD_SET_PG+y);				// set row
//	LcdOutCtl(LCD_SET_COL+column);			// set column
	while(*str != 0x00)	{
 8004624:	f89a 1000 	ldrb.w	r1, [sl]
 8004628:	2900      	cmp	r1, #0
 800462a:	d065      	beq.n	80046f8 <LcdTextXY+0x178>
					}   
				} else {  
					lcd_display_array[y][column] = *glyph_ptr;
					if (font_height >8) {
						glyph_ptr++;	
						lcd_display_array[y+1][column] = *glyph_ptr;
 800462c:	4d73      	ldr	r5, [pc, #460]	; (80047fc <LcdTextXY+0x27c>)
 800462e:	f8cd e010 	str.w	lr, [sp, #16]
					lcd_display_array[y+1][column] = 0xFF;	
				}
			} else { 		
				lcd_display_array[y][column] = 0x00;
				if (font_height >8) {
					lcd_display_array[y+1][column] = 0x00;	
 8004632:	f109 0201 	add.w	r2, r9, #1
 8004636:	01d2      	lsls	r2, r2, #7
 8004638:	9203      	str	r2, [sp, #12]
						lcd_display_array[y+1][column] = *glyph_ptr;
 800463a:	eb05 0b02 	add.w	fp, r5, r2
 800463e:	9a00      	ldr	r2, [sp, #0]
 8004640:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004644:	ea4f 10c9 	mov.w	r0, r9, lsl #7
 8004648:	f002 020a 	and.w	r2, r2, #10
 800464c:	9002      	str	r0, [sp, #8]
					lcd_display_array[y][column] = *glyph_ptr;
 800464e:	eb05 0c00 	add.w	ip, r5, r0
 8004652:	9201      	str	r2, [sp, #4]
 8004654:	e005      	b.n	8004662 <LcdTextXY+0xe2>
	while(*str != 0x00)	{
 8004656:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
				}
			}
		}
		column++;
 800465a:	3301      	adds	r3, #1
 800465c:	b2db      	uxtb	r3, r3
	while(*str != 0x00)	{
 800465e:	2900      	cmp	r1, #0
 8004660:	d048      	beq.n	80046f4 <LcdTextXY+0x174>
		glyph -= ASCII_BOT;
 8004662:	f1a1 0220 	sub.w	r2, r1, #32
 8004666:	b2d2      	uxtb	r2, r2
		if (font_height < 9)
 8004668:	2c08      	cmp	r4, #8
 800466a:	fb12 f208 	smulbb	r2, r2, r8
			glyph_ptr = font + (glyph * font_width);		// font width = 6, 7x5 + 1 pixel interval
 800466e:	bf94      	ite	ls
 8004670:	4472      	addls	r2, lr
			glyph_ptr = font + (glyph * font_width *2);		// font width  * 2 rows
 8004672:	eb0e 0242 	addhi.w	r2, lr, r2, lsl #1
		if ( *str >= ASCII_BOT ) {							// character 
 8004676:	291f      	cmp	r1, #31
 8004678:	d9ed      	bls.n	8004656 <LcdTextXY+0xd6>
 800467a:	f89d 7004 	ldrb.w	r7, [sp, #4]
			for (i=0; i<font_width; i++)
 800467e:	f1b8 0f00 	cmp.w	r8, #0
 8004682:	f000 80b6 	beq.w	80047f2 <LcdTextXY+0x272>
 8004686:	eb08 0503 	add.w	r5, r8, r3
 800468a:	b2ed      	uxtb	r5, r5
 800468c:	e00c      	b.n	80046a8 <LcdTextXY+0x128>
					if (font_height >8) {
 800468e:	2c08      	cmp	r4, #8
					lcd_display_array[y][column] = ~(*glyph_ptr);
 8004690:	f80c 6003 	strb.w	r6, [ip, r3]
					if (font_height >8) {
 8004694:	d95e      	bls.n	8004754 <LcdTextXY+0x1d4>
						lcd_display_array[y+1][column] = ~(*glyph_ptr);
 8004696:	7851      	ldrb	r1, [r2, #1]
 8004698:	43c9      	mvns	r1, r1
 800469a:	f80b 1003 	strb.w	r1, [fp, r3]
 800469e:	3202      	adds	r2, #2
				column++;
 80046a0:	3301      	adds	r3, #1
 80046a2:	b2db      	uxtb	r3, r3
			for (i=0; i<font_width; i++)
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	d012      	beq.n	80046ce <LcdTextXY+0x14e>
 80046a8:	4611      	mov	r1, r2
 80046aa:	f811 0b01 	ldrb.w	r0, [r1], #1
					lcd_display_array[y][column] = ~(*glyph_ptr);
 80046ae:	43c6      	mvns	r6, r0
				if ( style &(INVERSE | INV_LINE) ) {		// Inverse{
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	d1ec      	bne.n	800468e <LcdTextXY+0x10e>
					if (font_height >8) {
 80046b4:	2c08      	cmp	r4, #8
					lcd_display_array[y][column] = *glyph_ptr;
 80046b6:	f80c 0003 	strb.w	r0, [ip, r3]
					if (font_height >8) {
 80046ba:	d94b      	bls.n	8004754 <LcdTextXY+0x1d4>
						lcd_display_array[y+1][column] = *glyph_ptr;
 80046bc:	7851      	ldrb	r1, [r2, #1]
 80046be:	f80b 1003 	strb.w	r1, [fp, r3]
				column++;
 80046c2:	3301      	adds	r3, #1
 80046c4:	b2db      	uxtb	r3, r3
			for (i=0; i<font_width; i++)
 80046c6:	42ab      	cmp	r3, r5
 80046c8:	f102 0202 	add.w	r2, r2, #2
 80046cc:	d1ec      	bne.n	80046a8 <LcdTextXY+0x128>
			if ( style & (INVERSE | INV_LINE) ) {   	// one pixel interval
 80046ce:	2f00      	cmp	r7, #0
 80046d0:	d04a      	beq.n	8004768 <LcdTextXY+0x1e8>
				lcd_display_array[y][column] = 0xFF;
 80046d2:	494a      	ldr	r1, [pc, #296]	; (80047fc <LcdTextXY+0x27c>)
 80046d4:	9b02      	ldr	r3, [sp, #8]
 80046d6:	18cb      	adds	r3, r1, r3
 80046d8:	22ff      	movs	r2, #255	; 0xff
				if (font_height >8) {
 80046da:	2c08      	cmp	r4, #8
				lcd_display_array[y][column] = 0xFF;
 80046dc:	555a      	strb	r2, [r3, r5]
				if (font_height >8) {
 80046de:	d949      	bls.n	8004774 <LcdTextXY+0x1f4>
					lcd_display_array[y+1][column] = 0xFF;	
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	4419      	add	r1, r3
 80046e4:	462b      	mov	r3, r5
 80046e6:	554a      	strb	r2, [r1, r5]
	while(*str != 0x00)	{
 80046e8:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
		column++;
 80046ec:	3301      	adds	r3, #1
 80046ee:	b2db      	uxtb	r3, r3
	while(*str != 0x00)	{
 80046f0:	2900      	cmp	r1, #0
 80046f2:	d1b6      	bne.n	8004662 <LcdTextXY+0xe2>
 80046f4:	f8dd e010 	ldr.w	lr, [sp, #16]
		str++;										// point to next character in string
	}
	if (style & INV_LINE ){
 80046f8:	f1be 0f00 	cmp.w	lr, #0
 80046fc:	d042      	beq.n	8004784 <LcdTextXY+0x204>
		while (column <X_BYTES) {
 80046fe:	061e      	lsls	r6, r3, #24
 8004700:	d411      	bmi.n	8004726 <LcdTextXY+0x1a6>
 8004702:	4e3e      	ldr	r6, [pc, #248]	; (80047fc <LcdTextXY+0x27c>)
			lcd_display_array[y][column] = 0xFF;
			if (font_height >8) {
				lcd_display_array[y+1][column] = 0xFF;	
 8004704:	f109 0201 	add.w	r2, r9, #1
			lcd_display_array[y][column] = 0xFF;
 8004708:	eb06 10c9 	add.w	r0, r6, r9, lsl #7
 800470c:	21ff      	movs	r1, #255	; 0xff
				lcd_display_array[y+1][column] = 0xFF;	
 800470e:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
			if (font_height >8) {
 8004712:	2c08      	cmp	r4, #8
			}
			column++;
 8004714:	f103 0201 	add.w	r2, r3, #1
			lcd_display_array[y][column] = 0xFF;
 8004718:	54c1      	strb	r1, [r0, r3]
				lcd_display_array[y+1][column] = 0xFF;	
 800471a:	bf88      	it	hi
 800471c:	54f1      	strbhi	r1, [r6, r3]
			column++;
 800471e:	b2d3      	uxtb	r3, r2
		while (column <X_BYTES) {
 8004720:	061d      	lsls	r5, r3, #24
 8004722:	d5f6      	bpl.n	8004712 <LcdTextXY+0x192>
 8004724:	2380      	movs	r3, #128	; 0x80
			}
			column++;
		}
	}
	
	X_pos = column;
 8004726:	4937      	ldr	r1, [pc, #220]	; (8004804 <LcdTextXY+0x284>)
	Y_pos = y;
 8004728:	4a37      	ldr	r2, [pc, #220]	; (8004808 <LcdTextXY+0x288>)
	X_pos = column;
 800472a:	700b      	strb	r3, [r1, #0]
	
	if ( font_height >8 )
			y++;
	
	if ( Y_hi < y ) {
 800472c:	4b37      	ldr	r3, [pc, #220]	; (800480c <LcdTextXY+0x28c>)
	Y_pos = y;
 800472e:	f882 9000 	strb.w	r9, [r2]
	if ( font_height >8 )
 8004732:	2c08      	cmp	r4, #8
	if ( Y_hi < y ) {
 8004734:	781a      	ldrb	r2, [r3, #0]
			y++;
 8004736:	bf84      	itt	hi
 8004738:	f109 0901 	addhi.w	r9, r9, #1
 800473c:	fa5f f989 	uxtbhi.w	r9, r9
	if ( Y_hi < y ) {
 8004740:	454a      	cmp	r2, r9
		Y_hi = y;
 8004742:	bf38      	it	cc
 8004744:	f883 9000 	strbcc.w	r9, [r3]
	}
	
	UpdateLcd = TRUE;
 8004748:	4b31      	ldr	r3, [pc, #196]	; (8004810 <LcdTextXY+0x290>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
}
 800474e:	b007      	add	sp, #28
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	460a      	mov	r2, r1
 8004756:	e7a3      	b.n	80046a0 <LcdTextXY+0x120>
		if ( style &(  NORM_LINE) ) {
 8004758:	2e00      	cmp	r6, #0
 800475a:	f43f af56 	beq.w	800460a <LcdTextXY+0x8a>
			if (font_height >8) {
 800475e:	2c08      	cmp	r4, #8
			lcd_display_array[y][i] = 0x00;
 8004760:	700d      	strb	r5, [r1, #0]
			if (font_height >8) {
 8004762:	f67f af52 	bls.w	800460a <LcdTextXY+0x8a>
 8004766:	e74c      	b.n	8004602 <LcdTextXY+0x82>
				lcd_display_array[y][column] = 0x00;
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <LcdTextXY+0x27c>)
 800476a:	9b02      	ldr	r3, [sp, #8]
 800476c:	18d3      	adds	r3, r2, r3
				if (font_height >8) {
 800476e:	2c08      	cmp	r4, #8
				lcd_display_array[y][column] = 0x00;
 8004770:	555f      	strb	r7, [r3, r5]
				if (font_height >8) {
 8004772:	d824      	bhi.n	80047be <LcdTextXY+0x23e>
 8004774:	462b      	mov	r3, r5
 8004776:	e76e      	b.n	8004656 <LcdTextXY+0xd6>
		if ( style &(  NORM_LINE) ) {
 8004778:	2e00      	cmp	r6, #0
 800477a:	f43f af46 	beq.w	800460a <LcdTextXY+0x8a>
			lcd_display_array[y][i] = 0x00;
 800477e:	f881 c000 	strb.w	ip, [r1]
 8004782:	e742      	b.n	800460a <LcdTextXY+0x8a>
	} else if (style & NORM_LINE) {
 8004784:	9a00      	ldr	r2, [sp, #0]
 8004786:	07d0      	lsls	r0, r2, #31
 8004788:	d5cd      	bpl.n	8004726 <LcdTextXY+0x1a6>
		 while (column <X_BYTES) {
 800478a:	0619      	lsls	r1, r3, #24
 800478c:	d4cb      	bmi.n	8004726 <LcdTextXY+0x1a6>
 800478e:	4e1b      	ldr	r6, [pc, #108]	; (80047fc <LcdTextXY+0x27c>)
				lcd_display_array[y+1][column] = 0x00;	
 8004790:	f109 0201 	add.w	r2, r9, #1
			lcd_display_array[y][column] = 0x00;
 8004794:	eb06 11c9 	add.w	r1, r6, r9, lsl #7
				lcd_display_array[y+1][column] = 0x00;	
 8004798:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
			column++;
 800479c:	1c5a      	adds	r2, r3, #1
			if (font_height >8) {
 800479e:	2c08      	cmp	r4, #8
			lcd_display_array[y][column] = 0x00;
 80047a0:	f801 e003 	strb.w	lr, [r1, r3]
				lcd_display_array[y+1][column] = 0x00;	
 80047a4:	bf88      	it	hi
 80047a6:	f806 e003 	strbhi.w	lr, [r6, r3]
			column++;
 80047aa:	b2d3      	uxtb	r3, r2
		 while (column <X_BYTES) {
 80047ac:	061a      	lsls	r2, r3, #24
 80047ae:	d5f5      	bpl.n	800479c <LcdTextXY+0x21c>
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	e7b8      	b.n	8004726 <LcdTextXY+0x1a6>
		column = x * (font_width+1);
 80047b4:	fb08 0000 	mla	r0, r8, r0, r0
 80047b8:	f000 03ff 	and.w	r3, r0, #255	; 0xff
 80047bc:	e703      	b.n	80045c6 <LcdTextXY+0x46>
					lcd_display_array[y+1][column] = 0x00;	
 80047be:	9b03      	ldr	r3, [sp, #12]
 80047c0:	441a      	add	r2, r3
 80047c2:	462b      	mov	r3, r5
 80047c4:	5557      	strb	r7, [r2, r5]
 80047c6:	e746      	b.n	8004656 <LcdTextXY+0xd6>
			font_width = Font_1.charWidth;
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <LcdTextXY+0x294>)
 80047ca:	f893 8000 	ldrb.w	r8, [r3]
			font_height = Font_1.charHeight;
 80047ce:	785c      	ldrb	r4, [r3, #1]
			font = Font_1.FontTable;
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	9305      	str	r3, [sp, #20]
		break;
 80047d4:	e6ea      	b.n	80045ac <LcdTextXY+0x2c>
			font_width = Font_3.charWidth;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <LcdTextXY+0x298>)
 80047d8:	f893 8000 	ldrb.w	r8, [r3]
			font_height = Font_3.charHeight;
 80047dc:	785c      	ldrb	r4, [r3, #1]
			font = Font_3.FontTable;
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	9305      	str	r3, [sp, #20]
		break;
 80047e2:	e6e3      	b.n	80045ac <LcdTextXY+0x2c>
			font_width = Font_2.charWidth;
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <LcdTextXY+0x29c>)
 80047e6:	f893 8000 	ldrb.w	r8, [r3]
			font_height = Font_2.charHeight;
 80047ea:	785c      	ldrb	r4, [r3, #1]
			font = Font_2.FontTable;
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	9305      	str	r3, [sp, #20]
		break;
 80047f0:	e6dc      	b.n	80045ac <LcdTextXY+0x2c>
			for (i=0; i<font_width; i++)
 80047f2:	461d      	mov	r5, r3
 80047f4:	e76b      	b.n	80046ce <LcdTextXY+0x14e>
 80047f6:	bf00      	nop
 80047f8:	0800a1ec 	.word	0x0800a1ec
 80047fc:	200001d4 	.word	0x200001d4
 8004800:	200005d6 	.word	0x200005d6
 8004804:	200000dc 	.word	0x200000dc
 8004808:	200000dd 	.word	0x200000dd
 800480c:	200005d5 	.word	0x200005d5
 8004810:	200005d4 	.word	0x200005d4
 8004814:	0800a1d4 	.word	0x0800a1d4
 8004818:	0800a1e4 	.word	0x0800a1e4
 800481c:	0800a1dc 	.word	0x0800a1dc

08004820 <LcdHLine>:
**
*/

void LcdHLine(unsigned char left, unsigned char right,
		           unsigned char row, unsigned char dot_mask)
{
 8004820:	b4f0      	push	{r4, r5, r6, r7}
	unsigned char mask;
	unsigned char col;
	
	bit_pos = row & 0x07;			/* get the bit offset into a byte */
  	byte_offset = row >> 3;		    /* get the byte offset into x array */
	mask = l_mask_array[bit_pos]; 	/* get the mask for this bit */
 8004822:	f002 0407 	and.w	r4, r2, #7
 8004826:	4d11      	ldr	r5, [pc, #68]	; (800486c <LcdHLine+0x4c>)
	
	for(col = left; col <= right; col++)\
 8004828:	4288      	cmp	r0, r1
  	byte_offset = row >> 3;		    /* get the byte offset into x array */
 800482a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
	mask = l_mask_array[bit_pos]; 	/* get the mask for this bit */
 800482e:	5d2f      	ldrb	r7, [r5, r4]
	for(col = left; col <= right; col++)\
 8004830:	d80c      	bhi.n	800484c <LcdHLine+0x2c>
	{
		if ( !(col & dot_mask) ) 
			//lcd_display_array[byte_offset][col] &= mask;
			lcd_display_array[byte_offset][col] |= mask;
 8004832:	4e0f      	ldr	r6, [pc, #60]	; (8004870 <LcdHLine+0x50>)
 8004834:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
		if ( !(col & dot_mask) ) 
 8004838:	4203      	tst	r3, r0
	for(col = left; col <= right; col++)\
 800483a:	f100 0401 	add.w	r4, r0, #1
		if ( !(col & dot_mask) ) 
 800483e:	d102      	bne.n	8004846 <LcdHLine+0x26>
			lcd_display_array[byte_offset][col] |= mask;
 8004840:	5c35      	ldrb	r5, [r6, r0]
 8004842:	433d      	orrs	r5, r7
 8004844:	5435      	strb	r5, [r6, r0]
	for(col = left; col <= right; col++)\
 8004846:	b2e0      	uxtb	r0, r4
 8004848:	4281      	cmp	r1, r0
 800484a:	d2f5      	bcs.n	8004838 <LcdHLine+0x18>
	}
	if ( Y_hi < byte_offset ) 
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <LcdHLine+0x54>)
 800484e:	7819      	ldrb	r1, [r3, #0]
 8004850:	4291      	cmp	r1, r2
		Y_hi = byte_offset;
 8004852:	bf38      	it	cc
 8004854:	701a      	strbcc	r2, [r3, #0]
	if ( Y_lo > byte_offset) 
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <LcdHLine+0x58>)
 8004858:	7819      	ldrb	r1, [r3, #0]
 800485a:	4291      	cmp	r1, r2
		Y_lo = byte_offset;
 800485c:	bf88      	it	hi
 800485e:	701a      	strbhi	r2, [r3, #0]
	UpdateLcd = TRUE;
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <LcdHLine+0x5c>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
}
 8004866:	bcf0      	pop	{r4, r5, r6, r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	0800b8f4 	.word	0x0800b8f4
 8004870:	200001d4 	.word	0x200001d4
 8004874:	200005d5 	.word	0x200005d5
 8004878:	200005d6 	.word	0x200005d6
 800487c:	200005d4 	.word	0x200005d4

08004880 <LcdVLine>:
**
*/

void LcdVLine(unsigned char top, unsigned char bottom,
		           unsigned char column, unsigned char dot_mask)
{
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bit_pos = top & 0x07;		   /* get starting bit offset into byte */
	byte_offset = top >> 3;		   /* get byte offset into y direction */
	y_bits = (bottom - top) + 1;   /* get length in the x direction to write */
	remaining_bits = 8 - bit_pos;  /* number of bits left in byte */
	mask = l_mask_array[bit_pos];  /* get mask for this bit */
	if ( Y_hi < byte_offset ) 
 8004884:	f8df e120 	ldr.w	lr, [pc, #288]	; 80049a8 <LcdVLine+0x128>
		Y_hi = byte_offset;
	if ( Y_lo > byte_offset) 
 8004888:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80049ac <LcdVLine+0x12c>
	if ( Y_hi < byte_offset ) 
 800488c:	f89e c000 	ldrb.w	ip, [lr]
	if ( Y_lo > byte_offset) 
 8004890:	f899 8000 	ldrb.w	r8, [r9]
	mask = l_mask_array[bit_pos];  /* get mask for this bit */
 8004894:	4d41      	ldr	r5, [pc, #260]	; (800499c <LcdVLine+0x11c>)
	y_bits = (bottom - top) + 1;   /* get length in the x direction to write */
 8004896:	3101      	adds	r1, #1
	bit_pos = top & 0x07;		   /* get starting bit offset into byte */
 8004898:	f000 0607 	and.w	r6, r0, #7
	y_bits = (bottom - top) + 1;   /* get length in the x direction to write */
 800489c:	1a09      	subs	r1, r1, r0
	byte_offset = top >> 3;		   /* get byte offset into y direction */
 800489e:	08c0      	lsrs	r0, r0, #3
	if ( Y_hi < byte_offset ) 
 80048a0:	4584      	cmp	ip, r0
	remaining_bits = 8 - bit_pos;  /* number of bits left in byte */
 80048a2:	f1c6 0408 	rsb	r4, r6, #8
		Y_hi = byte_offset;
 80048a6:	bf3c      	itt	cc
 80048a8:	f88e 0000 	strbcc.w	r0, [lr]
 80048ac:	4684      	movcc	ip, r0
	y_bits = (bottom - top) + 1;   /* get length in the x direction to write */
 80048ae:	b2c9      	uxtb	r1, r1
	if ( Y_lo > byte_offset) 
 80048b0:	4580      	cmp	r8, r0
{
 80048b2:	b083      	sub	sp, #12
	remaining_bits = 8 - bit_pos;  /* number of bits left in byte */
 80048b4:	b2e4      	uxtb	r4, r4
	mask = l_mask_array[bit_pos];  /* get mask for this bit */
 80048b6:	5dad      	ldrb	r5, [r5, r6]
		Y_lo = byte_offset;
 80048b8:	bf84      	itt	hi
 80048ba:	f889 0000 	strbhi.w	r0, [r9]
 80048be:	4680      	movhi	r8, r0
	while(y_bits)				   /* while there are still bits to write */
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d033      	beq.n	800492c <LcdVLine+0xac>
		else
		{
      		/* we are not byte aligned or an entire byte does not need written */
			/* do each individual bit   */
			
			if ( !(remaining_bits & dot_mask ))
 80048c4:	f003 0608 	and.w	r6, r3, #8
				//lcd_display_array[byte_offset][column] &= mask;
				lcd_display_array[byte_offset][column] |= mask;
 80048c8:	4f35      	ldr	r7, [pc, #212]	; (80049a0 <LcdVLine+0x120>)
			if ( !(remaining_bits & dot_mask ))
 80048ca:	9601      	str	r6, [sp, #4]
		if((remaining_bits == 8) && (y_bits > 7))
 80048cc:	2c08      	cmp	r4, #8
 80048ce:	bf08      	it	eq
 80048d0:	462e      	moveq	r6, r5
 80048d2:	d017      	beq.n	8004904 <LcdVLine+0x84>
 80048d4:	3901      	subs	r1, #1
			if ( !(remaining_bits & dot_mask ))
 80048d6:	ea03 0a04 	and.w	sl, r3, r4
 80048da:	006e      	lsls	r6, r5, #1
 80048dc:	3c01      	subs	r4, #1
 80048de:	b2c9      	uxtb	r1, r1
 80048e0:	b2e4      	uxtb	r4, r4
 80048e2:	b2f6      	uxtb	r6, r6
 80048e4:	f1ba 0f00 	cmp.w	sl, #0
 80048e8:	d107      	bne.n	80048fa <LcdVLine+0x7a>
				lcd_display_array[byte_offset][column] |= mask;
 80048ea:	eb07 1bc0 	add.w	fp, r7, r0, lsl #7
 80048ee:	f81b a002 	ldrb.w	sl, [fp, r2]
 80048f2:	ea45 050a 	orr.w	r5, r5, sl
 80048f6:	f80b 5002 	strb.w	r5, [fp, r2]
			//mask |= 0x01;
			 mask &= 0xFE;

			y_bits--;
			remaining_bits--;
			if(remaining_bits == 0)
 80048fa:	bb2c      	cbnz	r4, 8004948 <LcdVLine+0xc8>
			{
				/* might have bust gotton byte aligned */
				/* so reset for beginning of a byte */
				remaining_bits = 8;
				byte_offset++;
 80048fc:	3001      	adds	r0, #1
 80048fe:	b2c0      	uxtb	r0, r0
	while(y_bits)				   /* while there are still bits to write */
 8004900:	b1a1      	cbz	r1, 800492c <LcdVLine+0xac>
				mask = l_mask_array[0];
 8004902:	2601      	movs	r6, #1
		if((remaining_bits == 8) && (y_bits > 7))
 8004904:	2907      	cmp	r1, #7
 8004906:	d823      	bhi.n	8004950 <LcdVLine+0xd0>
			if ( !(remaining_bits & dot_mask ))
 8004908:	9c01      	ldr	r4, [sp, #4]
 800490a:	3901      	subs	r1, #1
 800490c:	0075      	lsls	r5, r6, #1
 800490e:	b2c9      	uxtb	r1, r1
 8004910:	b2ed      	uxtb	r5, r5
 8004912:	2c00      	cmp	r4, #0
 8004914:	d13d      	bne.n	8004992 <LcdVLine+0x112>
				lcd_display_array[byte_offset][column] |= mask;
 8004916:	eb07 1ac0 	add.w	sl, r7, r0, lsl #7
 800491a:	2407      	movs	r4, #7
 800491c:	f81a b002 	ldrb.w	fp, [sl, r2]
 8004920:	ea46 060b 	orr.w	r6, r6, fp
 8004924:	f80a 6002 	strb.w	r6, [sl, r2]
	while(y_bits)				   /* while there are still bits to write */
 8004928:	2900      	cmp	r1, #0
 800492a:	d1cf      	bne.n	80048cc <LcdVLine+0x4c>
			}
		}
	}
	if ( Y_hi < byte_offset ) 
 800492c:	4584      	cmp	ip, r0
		Y_hi = byte_offset;
	if ( Y_lo > byte_offset) 
		Y_lo = byte_offset;
	UpdateLcd = TRUE;
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <LcdVLine+0x124>)
		Y_hi = byte_offset;
 8004930:	bf38      	it	cc
 8004932:	f88e 0000 	strbcc.w	r0, [lr]
	UpdateLcd = TRUE;
 8004936:	2201      	movs	r2, #1
	if ( Y_lo > byte_offset) 
 8004938:	4580      	cmp	r8, r0
		Y_lo = byte_offset;
 800493a:	bf88      	it	hi
 800493c:	f889 0000 	strbhi.w	r0, [r9]
	UpdateLcd = TRUE;
 8004940:	701a      	strb	r2, [r3, #0]
	
}
 8004942:	b003      	add	sp, #12
 8004944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004948:	4635      	mov	r5, r6
	while(y_bits)				   /* while there are still bits to write */
 800494a:	2900      	cmp	r1, #0
 800494c:	d1be      	bne.n	80048cc <LcdVLine+0x4c>
 800494e:	e7ed      	b.n	800492c <LcdVLine+0xac>
 8004950:	f1a1 0408 	sub.w	r4, r1, #8
 8004954:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8004958:	1c45      	adds	r5, r0, #1
 800495a:	442c      	add	r4, r5
 800495c:	b2e4      	uxtb	r4, r4
 800495e:	e005      	b.n	800496c <LcdVLine+0xec>
				byte_offset++;
 8004960:	b2e8      	uxtb	r0, r5
			while(y_bits > 7)			/* while there are at least 8 more bits to do */
 8004962:	42a0      	cmp	r0, r4
					lcd_display_array[byte_offset][column] = dot_mask;  
 8004964:	f80a 3002 	strb.w	r3, [sl, r2]
			while(y_bits > 7)			/* while there are at least 8 more bits to do */
 8004968:	d00c      	beq.n	8004984 <LcdVLine+0x104>
 800496a:	1c45      	adds	r5, r0, #1
					lcd_display_array[byte_offset][column] = dot_mask;  
 800496c:	eb07 1ac0 	add.w	sl, r7, r0, lsl #7
					lcd_display_array[byte_offset][column] = 0xFF;
 8004970:	4650      	mov	r0, sl
				if ( dot_mask)
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f4      	bne.n	8004960 <LcdVLine+0xe0>
					lcd_display_array[byte_offset][column] = 0xFF;
 8004976:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800497a:	f800 a002 	strb.w	sl, [r0, r2]
				byte_offset++;
 800497e:	b2e8      	uxtb	r0, r5
			while(y_bits > 7)			/* while there are at least 8 more bits to do */
 8004980:	42a0      	cmp	r0, r4
 8004982:	d1f2      	bne.n	800496a <LcdVLine+0xea>
 8004984:	f001 0107 	and.w	r1, r1, #7
 8004988:	4635      	mov	r5, r6
 800498a:	2408      	movs	r4, #8
	while(y_bits)				   /* while there are still bits to write */
 800498c:	2900      	cmp	r1, #0
 800498e:	d19d      	bne.n	80048cc <LcdVLine+0x4c>
 8004990:	e7cc      	b.n	800492c <LcdVLine+0xac>
			remaining_bits--;
 8004992:	2407      	movs	r4, #7
	while(y_bits)				   /* while there are still bits to write */
 8004994:	2900      	cmp	r1, #0
 8004996:	d199      	bne.n	80048cc <LcdVLine+0x4c>
 8004998:	e7c8      	b.n	800492c <LcdVLine+0xac>
 800499a:	bf00      	nop
 800499c:	0800b8f4 	.word	0x0800b8f4
 80049a0:	200001d4 	.word	0x200001d4
 80049a4:	200005d4 	.word	0x200005d4
 80049a8:	200005d5 	.word	0x200005d5
 80049ac:	200005d6 	.word	0x200005d6

080049b0 <LcdBox>:
** 
*/

void LcdBox(unsigned char left, unsigned char top,
			 unsigned char right, unsigned char bottom)
{
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	460f      	mov	r7, r1
 80049b6:	4615      	mov	r5, r2
 80049b8:	4604      	mov	r4, r0
 80049ba:	461e      	mov	r6, r3
	/* to draw a box requires two vertical lines */
	LcdVLine(top,bottom,left,0);
 80049bc:	4619      	mov	r1, r3
 80049be:	4602      	mov	r2, r0
 80049c0:	2300      	movs	r3, #0
 80049c2:	4638      	mov	r0, r7
 80049c4:	f7ff ff5c 	bl	8004880 <LcdVLine>
	LcdVLine(top,bottom,right,0);
 80049c8:	462a      	mov	r2, r5
 80049ca:	4631      	mov	r1, r6
 80049cc:	4638      	mov	r0, r7
 80049ce:	2300      	movs	r3, #0
 80049d0:	f7ff ff56 	bl	8004880 <LcdVLine>
	//LcdVLine(top+1,bottom+1,right+1,0);
	
	/* and two horizonal lines */
	LcdHLine(left,right,top,0);
 80049d4:	463a      	mov	r2, r7
 80049d6:	4629      	mov	r1, r5
 80049d8:	4620      	mov	r0, r4
 80049da:	2300      	movs	r3, #0
 80049dc:	f7ff ff20 	bl	8004820 <LcdHLine>
	LcdHLine(left,right,bottom,0);
 80049e0:	4632      	mov	r2, r6
 80049e2:	4629      	mov	r1, r5
 80049e4:	4620      	mov	r0, r4
 80049e6:	2300      	movs	r3, #0
	//LcdHLine(left+1,right+1,bottom+1,0);
}
 80049e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LcdHLine(left,right,bottom,0);
 80049ec:	f7ff bf18 	b.w	8004820 <LcdHLine>

080049f0 <LcdScrollBar>:
	0x2F, 0x68, 0xE8, 0x68, 0x2F,
	0x2F, 0x6F, 0xEF, 0x6F, 0x2F
};


void LcdScrollBar (unsigned char pos) {
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
unsigned char i,j;

	Y_hi = Y_BYTES - 1;
 80049f4:	4a37      	ldr	r2, [pc, #220]	; (8004ad4 <LcdScrollBar+0xe4>)
	Y_lo = 0;
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <LcdScrollBar+0xe8>)
	for (i=0; i < Y_BYTES; i++) {
		switch (i) {
		case 0:
			for (j = 0; j<5; j++) {
				if ( (pos>>1) != 0) 
					lcd_display_array[i][X_BYTES -5+ j] = arrows[j];
 80049f8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004ae0 <LcdScrollBar+0xf0>
	Y_lo = 0;
 80049fc:	2400      	movs	r4, #0
	Y_hi = Y_BYTES - 1;
 80049fe:	2107      	movs	r1, #7
		switch (i) {
 8004a00:	f014 05ff 	ands.w	r5, r4, #255	; 0xff
				if ( (pos>>1) != 0) 
 8004a04:	ea4f 0650 	mov.w	r6, r0, lsr #1
	Y_hi = Y_BYTES - 1;
 8004a08:	7011      	strb	r1, [r2, #0]
		break;
		default:
			for (j = 0; j<5; j++) {
				lcd_display_array[i][X_BYTES -5+ j] = arrows[10+j];
				if (i == (pos>>1)) {
					if ( pos & 1) {
 8004a0a:	f000 0001 	and.w	r0, r0, #1
	Y_lo = 0;
 8004a0e:	701c      	strb	r4, [r3, #0]
 8004a10:	f10c 0b7b 	add.w	fp, ip, #123	; 0x7b
					lcd_display_array[i][X_BYTES -5+ j] = arrows[j];
 8004a14:	f04f 08f4 	mov.w	r8, #244	; 0xf4
 8004a18:	f04f 0a16 	mov.w	sl, #22
					lcd_display_array[i][X_BYTES -5+ j] = arrows[5 + j];	
 8004a1c:	f04f 09f6 	mov.w	r9, #246	; 0xf6
		switch (i) {
 8004a20:	d022      	beq.n	8004a68 <LcdScrollBar+0x78>
 8004a22:	2d07      	cmp	r5, #7
 8004a24:	d02d      	beq.n	8004a82 <LcdScrollBar+0x92>
 8004a26:	4a2d      	ldr	r2, [pc, #180]	; (8004adc <LcdScrollBar+0xec>)
				if (i == (pos>>1)) {
 8004a28:	42ae      	cmp	r6, r5
 8004a2a:	eb0b 13c4 	add.w	r3, fp, r4, lsl #7
 8004a2e:	f102 0704 	add.w	r7, r2, #4
		switch (i) {
 8004a32:	f04f 01ff 	mov.w	r1, #255	; 0xff
				if (i == (pos>>1)) {
 8004a36:	d008      	beq.n	8004a4a <LcdScrollBar+0x5a>
			for (j = 0; j<5; j++) {
 8004a38:	4297      	cmp	r7, r2
						lcd_display_array[i][X_BYTES -5+ j] |= 0xF0;
					}else {	
						lcd_display_array[i][X_BYTES -5+ j] |= 0x0F; 
 8004a3a:	7019      	strb	r1, [r3, #0]
 8004a3c:	f103 0301 	add.w	r3, r3, #1
			for (j = 0; j<5; j++) {
 8004a40:	d00c      	beq.n	8004a5c <LcdScrollBar+0x6c>
				if (i == (pos>>1)) {
 8004a42:	42ae      	cmp	r6, r5
 8004a44:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004a48:	d1f6      	bne.n	8004a38 <LcdScrollBar+0x48>
						lcd_display_array[i][X_BYTES -5+ j] |= 0xF0;
 8004a4a:	f061 0e0f 	orn	lr, r1, #15
					if ( pos & 1) {
 8004a4e:	b368      	cbz	r0, 8004aac <LcdScrollBar+0xbc>
			for (j = 0; j<5; j++) {
 8004a50:	4297      	cmp	r7, r2
						lcd_display_array[i][X_BYTES -5+ j] |= 0xF0;
 8004a52:	f883 e000 	strb.w	lr, [r3]
 8004a56:	f103 0301 	add.w	r3, r3, #1
			for (j = 0; j<5; j++) {
 8004a5a:	d1f2      	bne.n	8004a42 <LcdScrollBar+0x52>
	for (i=0; i < Y_BYTES; i++) {
 8004a5c:	2d07      	cmp	r5, #7
 8004a5e:	d020      	beq.n	8004aa2 <LcdScrollBar+0xb2>
 8004a60:	3401      	adds	r4, #1
		switch (i) {
 8004a62:	f014 05ff 	ands.w	r5, r4, #255	; 0xff
 8004a66:	d1dc      	bne.n	8004a22 <LcdScrollBar+0x32>
				if ( (pos>>1) != 0) 
 8004a68:	bb1e      	cbnz	r6, 8004ab2 <LcdScrollBar+0xc2>
					lcd_display_array[i][X_BYTES -5+ j] = arrows[5 + j];	
 8004a6a:	23f7      	movs	r3, #247	; 0xf7
 8004a6c:	f88c 807b 	strb.w	r8, [ip, #123]	; 0x7b
 8004a70:	f88c 907c 	strb.w	r9, [ip, #124]	; 0x7c
 8004a74:	f88c 907e 	strb.w	r9, [ip, #126]	; 0x7e
 8004a78:	f88c 807f 	strb.w	r8, [ip, #127]	; 0x7f
 8004a7c:	f88c 307d 	strb.w	r3, [ip, #125]	; 0x7d
 8004a80:	e7ee      	b.n	8004a60 <LcdScrollBar+0x70>
				if ( (pos>>1) != Y_BYTES -1)
 8004a82:	2e07      	cmp	r6, #7
					lcd_display_array[i][X_BYTES -5+ j] = arrows[15+j];
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <LcdScrollBar+0xf0>)
				if ( (pos>>1) != Y_BYTES -1)
 8004a86:	d021      	beq.n	8004acc <LcdScrollBar+0xdc>
					lcd_display_array[i][X_BYTES -5+ j] = arrows[15+j];
 8004a88:	20e8      	movs	r0, #232	; 0xe8
 8004a8a:	212f      	movs	r1, #47	; 0x2f
 8004a8c:	2268      	movs	r2, #104	; 0x68
 8004a8e:	f883 03fd 	strb.w	r0, [r3, #1021]	; 0x3fd
 8004a92:	f883 13fb 	strb.w	r1, [r3, #1019]	; 0x3fb
 8004a96:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
 8004a9a:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
 8004a9e:	f883 23fe 	strb.w	r2, [r3, #1022]	; 0x3fe
				}
			}		
		break;
		}
	}
	UpdateLcd = TRUE;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <LcdScrollBar+0xf4>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
}
 8004aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						lcd_display_array[i][X_BYTES -5+ j] |= 0x0F; 
 8004aac:	f041 010f 	orr.w	r1, r1, #15
 8004ab0:	e7c2      	b.n	8004a38 <LcdScrollBar+0x48>
					lcd_display_array[i][X_BYTES -5+ j] = arrows[j];
 8004ab2:	f04f 0317 	mov.w	r3, #23
 8004ab6:	f88c 807b 	strb.w	r8, [ip, #123]	; 0x7b
 8004aba:	f88c a07c 	strb.w	sl, [ip, #124]	; 0x7c
 8004abe:	f88c 307d 	strb.w	r3, [ip, #125]	; 0x7d
 8004ac2:	f88c a07e 	strb.w	sl, [ip, #126]	; 0x7e
 8004ac6:	f88c 807f 	strb.w	r8, [ip, #127]	; 0x7f
 8004aca:	e7c9      	b.n	8004a60 <LcdScrollBar+0x70>
					lcd_display_array[i][X_BYTES -5+ j] = arrows[20+j];	
 8004acc:	20ef      	movs	r0, #239	; 0xef
 8004ace:	212f      	movs	r1, #47	; 0x2f
 8004ad0:	226f      	movs	r2, #111	; 0x6f
 8004ad2:	e7dc      	b.n	8004a8e <LcdScrollBar+0x9e>
 8004ad4:	200005d5 	.word	0x200005d5
 8004ad8:	200005d6 	.word	0x200005d6
 8004adc:	0800b8e3 	.word	0x0800b8e3
 8004ae0:	200001d4 	.word	0x200001d4
 8004ae4:	200005d4 	.word	0x200005d4

08004ae8 <LcdBitmap>:
}
		*/



void LcdBitmap( unsigned char x_pos, unsigned char y_pos,IMG_DEF  * bitmap) {
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
unsigned long i,j;
unsigned char rows_nr;
unsigned char const * pixel;

	if ( Y_hi < (y_pos + 1) ) 
 8004aec:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8004ba8 <LcdBitmap+0xc0>
 8004af0:	f89e 3000 	ldrb.w	r3, [lr]
 8004af4:	428b      	cmp	r3, r1
		Y_hi = y_pos+1;
 8004af6:	bf9c      	itt	ls
 8004af8:	1c4b      	addls	r3, r1, #1
 8004afa:	f88e 3000 	strbls.w	r3, [lr]
	if ( Y_lo > y_pos) 
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <LcdBitmap+0xac>)
void LcdBitmap( unsigned char x_pos, unsigned char y_pos,IMG_DEF  * bitmap) {
 8004b00:	4691      	mov	r9, r2
	if ( Y_lo > y_pos) 
 8004b02:	781a      	ldrb	r2, [r3, #0]
		Y_lo = y_pos;

	
	rows_nr = bitmap->height / 8;
	pixel = (unsigned char *)bitmap->char_table;
 8004b04:	f8d9 c004 	ldr.w	ip, [r9, #4]
	if ( Y_lo > y_pos) 
 8004b08:	428a      	cmp	r2, r1
		Y_lo = y_pos;
 8004b0a:	bf88      	it	hi
 8004b0c:	7019      	strbhi	r1, [r3, #0]
	//rows_nr = 5;
	
	for (i=x_pos; i< bitmap->width + x_pos; i++) {
 8004b0e:	f8b9 3000 	ldrh.w	r3, [r9]
	rows_nr = bitmap->height / 8;
 8004b12:	f899 2002 	ldrb.w	r2, [r9, #2]
	for (i=x_pos; i< bitmap->width + x_pos; i++) {
 8004b16:	181c      	adds	r4, r3, r0
 8004b18:	42a0      	cmp	r0, r4
	rows_nr = bitmap->height / 8;
 8004b1a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
	for (i=x_pos; i< bitmap->width + x_pos; i++) {
 8004b1e:	4607      	mov	r7, r0
 8004b20:	d234      	bcs.n	8004b8c <LcdBitmap+0xa4>
 8004b22:	4c1d      	ldr	r4, [pc, #116]	; (8004b98 <LcdBitmap+0xb0>)
 8004b24:	eb01 0802 	add.w	r8, r1, r2
 8004b28:	eb04 1ac8 	add.w	sl, r4, r8, lsl #7
 8004b2c:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
	//for (i=x_pos; i< ( 60+ x_pos ); i++) {
		for ( j=rows_nr; j >0; j--) {
 8004b30:	b172      	cbz	r2, 8004b50 <LcdBitmap+0x68>
 8004b32:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8004b36:	eb0a 0407 	add.w	r4, sl, r7
 8004b3a:	eb0c 060b 	add.w	r6, ip, fp
			//prn_buff[j-1][i] = *(bitmap->char_table);
			//(bitmap->char_table)++;
			lcd_display_array[j-1 + y_pos][i] = *pixel;
 8004b3e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8004b42:	f804 5d80 	strb.w	r5, [r4, #-128]!
		for ( j=rows_nr; j >0; j--) {
 8004b46:	42b3      	cmp	r3, r6
 8004b48:	d1f9      	bne.n	8004b3e <LcdBitmap+0x56>
 8004b4a:	f8b9 3000 	ldrh.w	r3, [r9]
 8004b4e:	4494      	add	ip, r2
	for (i=x_pos; i< bitmap->width + x_pos; i++) {
 8004b50:	3701      	adds	r7, #1
 8004b52:	181c      	adds	r4, r3, r0
 8004b54:	42bc      	cmp	r4, r7
 8004b56:	d8eb      	bhi.n	8004b30 <LcdBitmap+0x48>
 8004b58:	b2ff      	uxtb	r7, r7
			pixel++;
		}
	}
	
	
	Y_pos = y_pos ;
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <LcdBitmap+0xb4>)
	X_pos = x_pos+i+1;
 8004b5c:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <LcdBitmap+0xb8>)
	Y_pos = y_pos ;
 8004b5e:	7019      	strb	r1, [r3, #0]
	Y_hi = y_pos  + rows_nr;
 8004b60:	fa5f f888 	uxtb.w	r8, r8
	if (Y_hi >= Y_BYTES)
 8004b64:	f1b8 0f07 	cmp.w	r8, #7
		 Y_hi = Y_BYTES-1;
 8004b68:	bf88      	it	hi
 8004b6a:	2307      	movhi	r3, #7
	X_pos = x_pos+i+1;
 8004b6c:	f100 0001 	add.w	r0, r0, #1
 8004b70:	4407      	add	r7, r0
		 Y_hi = Y_BYTES-1;
 8004b72:	bf88      	it	hi
 8004b74:	f88e 3000 	strbhi.w	r3, [lr]
	UpdateLcd = 1;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <LcdBitmap+0xbc>)
	X_pos = x_pos+i+1;
 8004b7a:	7017      	strb	r7, [r2, #0]
	UpdateLcd = 1;
 8004b7c:	f04f 0201 	mov.w	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
	Y_hi = y_pos  + rows_nr;
 8004b82:	bf98      	it	ls
 8004b84:	f88e 8000 	strbls.w	r8, [lr]
}
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8c:	eb01 0802 	add.w	r8, r1, r2
 8004b90:	e7e3      	b.n	8004b5a <LcdBitmap+0x72>
 8004b92:	bf00      	nop
 8004b94:	200005d6 	.word	0x200005d6
 8004b98:	200001d4 	.word	0x200001d4
 8004b9c:	200000dd 	.word	0x200000dd
 8004ba0:	200000dc 	.word	0x200000dc
 8004ba4:	200005d4 	.word	0x200005d4
 8004ba8:	200005d5 	.word	0x200005d5

08004bac <ir_init>:
volatile unsigned char edge = 0;
volatile IRDATA ir_data;
volatile unsigned long *ir_command;

//-------------------------------------------------------------------------------
void ir_init(void) {
 8004bac:	b470      	push	{r4, r5, r6}
	 * Variables
	 */
	status = IR_STARTBIT1;
	ir_data_ready = 0;
	bits = 0;
	ir_command = 0;
 8004bae:	4808      	ldr	r0, [pc, #32]	; (8004bd0 <ir_init+0x24>)
	status = IR_STARTBIT1;
 8004bb0:	4e08      	ldr	r6, [pc, #32]	; (8004bd4 <ir_init+0x28>)
	ir_data_ready = 0;
 8004bb2:	4d09      	ldr	r5, [pc, #36]	; (8004bd8 <ir_init+0x2c>)
	bits = 0;
 8004bb4:	4c09      	ldr	r4, [pc, #36]	; (8004bdc <ir_init+0x30>)
	pinIRQenable = 1;
 8004bb6:	490a      	ldr	r1, [pc, #40]	; (8004be0 <ir_init+0x34>)
	edge = 0;
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <ir_init+0x38>)
	status = IR_STARTBIT1;
 8004bba:	2300      	movs	r3, #0
	ir_command = 0;
 8004bbc:	6003      	str	r3, [r0, #0]
	pinIRQenable = 1;
 8004bbe:	2001      	movs	r0, #1
	status = IR_STARTBIT1;
 8004bc0:	7033      	strb	r3, [r6, #0]
	ir_data_ready = 0;
 8004bc2:	702b      	strb	r3, [r5, #0]
	bits = 0;
 8004bc4:	7023      	strb	r3, [r4, #0]
	pinIRQenable = 1;
 8004bc6:	7008      	strb	r0, [r1, #0]
	edge = 0;
 8004bc8:	7013      	strb	r3, [r2, #0]
}
 8004bca:	bc70      	pop	{r4, r5, r6}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	200001d0 	.word	0x200001d0
 8004bd4:	200000e0 	.word	0x200000e0
 8004bd8:	200001cd 	.word	0x200001cd
 8004bdc:	200000de 	.word	0x200000de
 8004be0:	20000028 	.word	0x20000028
 8004be4:	200000df 	.word	0x200000df

08004be8 <IRpinIntHandler>:

//-------------------------------------------------------------------------------
//-------------------------------------------------------------------------------
void IRpinIntHandler(void) {
 8004be8:	b538      	push	{r3, r4, r5, lr}
	unsigned long period;

	if (HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin) == edge) {
 8004bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bf2:	f7fd f947 	bl	8001e84 <HAL_GPIO_ReadPin>
 8004bf6:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <IRpinIntHandler+0xd0>)
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	4290      	cmp	r0, r2
 8004bfc:	d000      	beq.n	8004c00 <IRpinIntHandler+0x18>
			break;

		}
	}

}
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
		switch (status) {
 8004c00:	4d2e      	ldr	r5, [pc, #184]	; (8004cbc <IRpinIntHandler+0xd4>)
		period = IR_CNT_GET;
 8004c02:	492f      	ldr	r1, [pc, #188]	; (8004cc0 <IRpinIntHandler+0xd8>)
		switch (status) {
 8004c04:	782a      	ldrb	r2, [r5, #0]
		period = IR_CNT_GET;
 8004c06:	680c      	ldr	r4, [r1, #0]
		switch (status) {
 8004c08:	b252      	sxtb	r2, r2
		IR_CNT_SET(0);
 8004c0a:	2000      	movs	r0, #0
		switch (status) {
 8004c0c:	2a01      	cmp	r2, #1
		IR_CNT_SET(0);
 8004c0e:	6008      	str	r0, [r1, #0]
		switch (status) {
 8004c10:	d02e      	beq.n	8004c70 <IRpinIntHandler+0x88>
 8004c12:	2a04      	cmp	r2, #4
 8004c14:	d00f      	beq.n	8004c36 <IRpinIntHandler+0x4e>
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	d1f1      	bne.n	8004bfe <IRpinIntHandler+0x16>
			if (!edge) {
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	d036      	beq.n	8004c8e <IRpinIntHandler+0xa6>
				if ((period >= 85) && (period < 96) && !ir_data_ready) {
 8004c20:	3c55      	subs	r4, #85	; 0x55
 8004c22:	2c0a      	cmp	r4, #10
 8004c24:	d804      	bhi.n	8004c30 <IRpinIntHandler+0x48>
 8004c26:	4a27      	ldr	r2, [pc, #156]	; (8004cc4 <IRpinIntHandler+0xdc>)
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	b90a      	cbnz	r2, 8004c30 <IRpinIntHandler+0x48>
					status = IR_STARTBIT2;
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	702a      	strb	r2, [r5, #0]
				edge = 0;
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
}
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
			if ((bits < 32) && (period < 30)) {
 8004c36:	4a24      	ldr	r2, [pc, #144]	; (8004cc8 <IRpinIntHandler+0xe0>)
 8004c38:	7811      	ldrb	r1, [r2, #0]
 8004c3a:	291f      	cmp	r1, #31
 8004c3c:	d80f      	bhi.n	8004c5e <IRpinIntHandler+0x76>
 8004c3e:	2c1d      	cmp	r4, #29
 8004c40:	d80d      	bhi.n	8004c5e <IRpinIntHandler+0x76>
				ir_command = (unsigned long*) &ir_data;
 8004c42:	4822      	ldr	r0, [pc, #136]	; (8004ccc <IRpinIntHandler+0xe4>)
 8004c44:	4922      	ldr	r1, [pc, #136]	; (8004cd0 <IRpinIntHandler+0xe8>)
 8004c46:	6001      	str	r1, [r0, #0]
				if ((period > 10) && (period < 15)) {
 8004c48:	f1a4 000b 	sub.w	r0, r4, #11
 8004c4c:	2803      	cmp	r0, #3
 8004c4e:	d828      	bhi.n	8004ca2 <IRpinIntHandler+0xba>
					*ir_command >>= 1;
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	0840      	lsrs	r0, r0, #1
 8004c54:	6008      	str	r0, [r1, #0]
				bits++;
 8004c56:	7811      	ldrb	r1, [r2, #0]
 8004c58:	3101      	adds	r1, #1
 8004c5a:	b2c9      	uxtb	r1, r1
 8004c5c:	7011      	strb	r1, [r2, #0]
			if (bits >= 32) {
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	2a1f      	cmp	r2, #31
 8004c62:	d817      	bhi.n	8004c94 <IRpinIntHandler+0xac>
			if (period > 30) {
 8004c64:	2c1e      	cmp	r4, #30
 8004c66:	d9ca      	bls.n	8004bfe <IRpinIntHandler+0x16>
				status = IR_STARTBIT1;
 8004c68:	2200      	movs	r2, #0
 8004c6a:	702a      	strb	r2, [r5, #0]
				edge = 0;
 8004c6c:	701a      	strb	r2, [r3, #0]
}
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
			if ((period > 40) && (period < 50)) {
 8004c70:	3c29      	subs	r4, #41	; 0x29
 8004c72:	2c08      	cmp	r4, #8
 8004c74:	d809      	bhi.n	8004c8a <IRpinIntHandler+0xa2>
				ir_command = (unsigned long*) &ir_data;
 8004c76:	4c15      	ldr	r4, [pc, #84]	; (8004ccc <IRpinIntHandler+0xe4>)
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <IRpinIntHandler+0xe8>)
				bits = 0;
 8004c7a:	4913      	ldr	r1, [pc, #76]	; (8004cc8 <IRpinIntHandler+0xe0>)
				ir_command = (unsigned long*) &ir_data;
 8004c7c:	6022      	str	r2, [r4, #0]
				status = IR_CMD;
 8004c7e:	2404      	movs	r4, #4
 8004c80:	702c      	strb	r4, [r5, #0]
				edge = 0;
 8004c82:	7018      	strb	r0, [r3, #0]
				*ir_command = 0;
 8004c84:	6010      	str	r0, [r2, #0]
				bits = 0;
 8004c86:	7008      	strb	r0, [r1, #0]
}
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
				status = IR_STARTBIT1;
 8004c8a:	7028      	strb	r0, [r5, #0]
}
 8004c8c:	bd38      	pop	{r3, r4, r5, pc}
				edge = 1;
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
}
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
				ir_data_ready = 1;
 8004c94:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <IRpinIntHandler+0xdc>)
				status = IR_STARTBIT1;
 8004c96:	2200      	movs	r2, #0
				ir_data_ready = 1;
 8004c98:	2001      	movs	r0, #1
 8004c9a:	7008      	strb	r0, [r1, #0]
				status = IR_STARTBIT1;
 8004c9c:	702a      	strb	r2, [r5, #0]
				edge = 0;
 8004c9e:	701a      	strb	r2, [r3, #0]
}
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
				} else if (period > 16) {
 8004ca2:	2c10      	cmp	r4, #16
 8004ca4:	d9d7      	bls.n	8004c56 <IRpinIntHandler+0x6e>
					*ir_command >>= 1;
 8004ca6:	6808      	ldr	r0, [r1, #0]
 8004ca8:	0840      	lsrs	r0, r0, #1
 8004caa:	6008      	str	r0, [r1, #0]
					*ir_command |= 0x80000000;
 8004cac:	6808      	ldr	r0, [r1, #0]
 8004cae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004cb2:	6008      	str	r0, [r1, #0]
 8004cb4:	e7cf      	b.n	8004c56 <IRpinIntHandler+0x6e>
 8004cb6:	bf00      	nop
 8004cb8:	200000df 	.word	0x200000df
 8004cbc:	200000e0 	.word	0x200000e0
 8004cc0:	200001c8 	.word	0x200001c8
 8004cc4:	200001cd 	.word	0x200001cd
 8004cc8:	200000de 	.word	0x200000de
 8004ccc:	200001d0 	.word	0x200001d0
 8004cd0:	200001c0 	.word	0x200001c0

08004cd4 <IR_TimerHandler>:
void IR_TimerHandler(void) {
//
// Clear the timer interrupt flag.
//

	gulTicks++;
 8004cd4:	4a05      	ldr	r2, [pc, #20]	; (8004cec <IR_TimerHandler+0x18>)
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	3301      	adds	r3, #1

	if (gulTicks > 110) {
 8004cda:	2b6e      	cmp	r3, #110	; 0x6e
	gulTicks++;
 8004cdc:	6013      	str	r3, [r2, #0]
	if (gulTicks > 110) {
 8004cde:	d904      	bls.n	8004cea <IR_TimerHandler+0x16>
		status = IR_STARTBIT1;
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <IR_TimerHandler+0x1c>)
		edge = 0;
 8004ce2:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <IR_TimerHandler+0x20>)
		status = IR_STARTBIT1;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	700b      	strb	r3, [r1, #0]
		edge = 0;
 8004ce8:	7013      	strb	r3, [r2, #0]
		// Reset to Falling Edge
		//ROM_GPIOIntTypeSet(IR_PORT, IR_PIN, GPIO_FALLING_EDGE);
	}
}
 8004cea:	4770      	bx	lr
 8004cec:	200001c8 	.word	0x200001c8
 8004cf0:	200000e0 	.word	0x200000e0
 8004cf4:	200000df 	.word	0x200000df

08004cf8 <LcdOutDat>:
**
**	po_DC_DP - control line = 1 - data register, 0 - control register
*/


void LcdOutDat(char ub_Data) {
 8004cf8:	b530      	push	{r4, r5, lr}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, SET);	// select register for data port
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <LcdOutDat+0x3c>)
void LcdOutDat(char ub_Data) {
 8004d00:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, SET);	// select register for data port
 8004d04:	2201      	movs	r2, #1
 8004d06:	2110      	movs	r1, #16
 8004d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d0c:	f7fd f8c0 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8004d10:	4628      	mov	r0, r5
 8004d12:	2200      	movs	r2, #0
 8004d14:	2120      	movs	r1, #32
 8004d16:	f7fd f8bb 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&ub_Data, 1, 10);
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4805      	ldr	r0, [pc, #20]	; (8004d38 <LcdOutDat+0x40>)
 8004d22:	f7fe fe21 	bl	8003968 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 8004d26:	4628      	mov	r0, r5
 8004d28:	2201      	movs	r2, #1
 8004d2a:	2120      	movs	r1, #32
 8004d2c:	f7fd f8b0 	bl	8001e90 <HAL_GPIO_WritePin>
} 
 8004d30:	b003      	add	sp, #12
 8004d32:	bd30      	pop	{r4, r5, pc}
 8004d34:	48000800 	.word	0x48000800
 8004d38:	2000099c 	.word	0x2000099c

08004d3c <LcdOutCtl>:
** to the LCD controller control register. entry argument is
** the command to output.
**
*/

void LcdOutCtl(char ub_Data) {
 8004d3c:	b530      	push	{r4, r5, lr}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, RESET);	// select register for command port
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8004d42:	4d0d      	ldr	r5, [pc, #52]	; (8004d78 <LcdOutCtl+0x3c>)
void LcdOutCtl(char ub_Data) {
 8004d44:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, RESET);	// select register for command port
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d50:	f7fd f89e 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8004d54:	4628      	mov	r0, r5
 8004d56:	2200      	movs	r2, #0
 8004d58:	2120      	movs	r1, #32
 8004d5a:	f7fd f899 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&ub_Data, 1, 10);
 8004d5e:	4621      	mov	r1, r4
 8004d60:	230a      	movs	r3, #10
 8004d62:	2201      	movs	r2, #1
 8004d64:	4805      	ldr	r0, [pc, #20]	; (8004d7c <LcdOutCtl+0x40>)
 8004d66:	f7fe fdff 	bl	8003968 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2120      	movs	r1, #32
 8004d70:	f7fd f88e 	bl	8001e90 <HAL_GPIO_WritePin>
} 
 8004d74:	b003      	add	sp, #12
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	48000800 	.word	0x48000800
 8004d7c:	2000099c 	.word	0x2000099c

08004d80 <LcdInit>:
  Return value :  None.

--------------------------------------------------------------------------------------------------*/

void LcdInit(void)
{
 8004d80:	b538      	push	{r3, r4, r5, lr}
//	int i;


	/* initialize the port control lines to the LCD module */
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);				/* set RST signal high off output */
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, RESET);				/* set the CD line low as output */
 8004d82:	2200      	movs	r2, #0
 8004d84:	2110      	movs	r1, #16
 8004d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	Delay_us(10);

	/* reset the LCD controller chip */
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, RESET);			/* set the reset line low */
//	for(i=0; i<1000; i++) ;			/* delay for the reset time */
	gulTickCountDown = 10; while (gulTickCountDown);
 8004d8a:	4c21      	ldr	r4, [pc, #132]	; (8004e10 <LcdInit+0x90>)
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, RESET);				/* set the CD line low as output */
 8004d8c:	f7fd f880 	bl	8001e90 <HAL_GPIO_WritePin>
	gulTickCountDown = 10; while (gulTickCountDown);
 8004d90:	230a      	movs	r3, #10
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1fc      	bne.n	8004d94 <LcdInit+0x14>
//	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);					/* release reset to back high */
	gulTickCountDown = 10; while (gulTickCountDown);
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1fc      	bne.n	8004d9e <LcdInit+0x1e>


	LcdOutCtl( 0xA8);	/* */
 8004da4:	20a8      	movs	r0, #168	; 0xa8
 8004da6:	f7ff ffc9 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl( 0x3F);	/*  */
 8004daa:	203f      	movs	r0, #63	; 0x3f
 8004dac:	f7ff ffc6 	bl	8004d3c <LcdOutCtl>

	/* program the controller operational state */
	//LcdOutCtl(LCD_SET_ADC_NOR);	/* set ADC reverse */
	//LcdOutCtl(LCD_SET_SHL_NOR);	/* set SHL normal */

	LcdOutCtl(LCD_SET_ADC_REV);	/* set ADC reverse */
 8004db0:	20a1      	movs	r0, #161	; 0xa1
 8004db2:	f7ff ffc3 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl(LCD_SET_SHL_REV);	/* set SHL normal */
 8004db6:	20c8      	movs	r0, #200	; 0xc8
 8004db8:	f7ff ffc0 	bl	8004d3c <LcdOutCtl>

	gulTickCountDown = 1000; while (gulTickCountDown);
 8004dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1fc      	bne.n	8004dc2 <LcdInit+0x42>


	LcdOutCtl(LCD_REF_VOLT_REG);	/* set default reference voltage select */
 8004dc8:	2081      	movs	r0, #129	; 0x81
 8004dca:	f7ff ffb7 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl(CONTRAST);
 8004dce:	207f      	movs	r0, #127	; 0x7f
 8004dd0:	f7ff ffb4 	bl	8004d3c <LcdOutCtl>
//	for(i=0; i<1000; i++);			 	/* delay for power stabilize */
	
	LcdOutCtl(LCD_CHARGE_EN);
 8004dd4:	208d      	movs	r0, #141	; 0x8d
 8004dd6:	f7ff ffb1 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl(0x14);
 8004dda:	2014      	movs	r0, #20
 8004ddc:	f7ff ffae 	bl	8004d3c <LcdOutCtl>

	gulTickCountDown = 1000; while (gulTickCountDown);
 8004de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	6825      	ldr	r5, [r4, #0]
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	d1fc      	bne.n	8004de6 <LcdInit+0x66>
	
	LcdOutCtl(LCD_DISP_ON);			/* put the display on */
 8004dec:	20af      	movs	r0, #175	; 0xaf
 8004dee:	f7ff ffa5 	bl	8004d3c <LcdOutCtl>

	LcdOutCtl(LCD_SET_LINE+0);		/* set line for row 0 of display */
 8004df2:	2040      	movs	r0, #64	; 0x40
 8004df4:	f7ff ffa2 	bl	8004d3c <LcdOutCtl>

	LcdOutCtl(LCD_SET_PAGE+0);		/* set page 0 */
 8004df8:	20b0      	movs	r0, #176	; 0xb0
 8004dfa:	f7ff ff9f 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl(LCD_SET_COL_HI+0);	/* set column 0 */
 8004dfe:	2010      	movs	r0, #16
 8004e00:	f7ff ff9c 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl(LCD_SET_COL_LO+0);
 8004e04:	4628      	mov	r0, r5
} 
 8004e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LcdOutCtl(LCD_SET_COL_LO+0);
 8004e0a:	f7ff bf97 	b.w	8004d3c <LcdOutCtl>
 8004e0e:	bf00      	nop
 8004e10:	2000088c 	.word	0x2000088c

08004e14 <LcdContrast>:

  Notes        :  No change visible at ambient temperature.

--------------------------------------------------------------------------------------------------*/
void LcdContrast ( unsigned char contrast )
{
 8004e14:	b510      	push	{r4, lr}
 8004e16:	4604      	mov	r4, r0
  	LcdOutCtl(LCD_REF_VOLT_REG);		 			// prime for the reference voltage
 8004e18:	2081      	movs	r0, #129	; 0x81
 8004e1a:	f7ff ff8f 	bl	8004d3c <LcdOutCtl>
	LcdOutCtl(contrast);			// set default reference voltage select
 8004e1e:	4620      	mov	r0, r4

}
 8004e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOutCtl(contrast);			// set default reference voltage select
 8004e24:	f7ff bf8a 	b.w	8004d3c <LcdOutCtl>

08004e28 <LcdUpdate>:
** 
**  for all screen - lcd_update(SCRN_TOP,SCRN_BOTTOM);
*/

void LcdUpdate( void)
{
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	unsigned char x;
	unsigned char y;
	unsigned char *colptr;
	
	if ( UpdateLcd ) {
 8004e2c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8004e94 <LcdUpdate+0x6c>
		for(y = Y_lo; y <= Y_hi; y++)
 8004e30:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004e98 <LcdUpdate+0x70>
	if ( UpdateLcd ) {
 8004e34:	f899 3000 	ldrb.w	r3, [r9]
		for(y = Y_lo; y <= Y_hi; y++)
 8004e38:	4f15      	ldr	r7, [pc, #84]	; (8004e90 <LcdUpdate+0x68>)
	if ( UpdateLcd ) {
 8004e3a:	b303      	cbz	r3, 8004e7e <LcdUpdate+0x56>
		for(y = Y_lo; y <= Y_hi; y++)
 8004e3c:	f89a 6000 	ldrb.w	r6, [sl]
 8004e40:	783b      	ldrb	r3, [r7, #0]
 8004e42:	42b3      	cmp	r3, r6
 8004e44:	d31b      	bcc.n	8004e7e <LcdUpdate+0x56>
 8004e46:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004e9c <LcdUpdate+0x74>
		{
			LcdOutCtl(LCD_SET_PAGE+y);	/* set page */
 8004e4a:	f1a6 0050 	sub.w	r0, r6, #80	; 0x50
 8004e4e:	b2c0      	uxtb	r0, r0
 8004e50:	f7ff ff74 	bl	8004d3c <LcdOutCtl>
			LcdOutCtl(LCD_SET_COL_HI+0);	/* set column 0 */
 8004e54:	2010      	movs	r0, #16
 8004e56:	f7ff ff71 	bl	8004d3c <LcdOutCtl>
			LcdOutCtl(LCD_SET_COL_LO);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7ff ff6e 	bl	8004d3c <LcdOutCtl>
	
			colptr = &lcd_display_array[y][0];
 8004e60:	eb08 14c6 	add.w	r4, r8, r6, lsl #7
 8004e64:	f104 0580 	add.w	r5, r4, #128	; 0x80
			for (x=0; x < X_BYTES; x++)
			{
				LcdOutDat( (*colptr++));
 8004e68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004e6c:	f7ff ff44 	bl	8004cf8 <LcdOutDat>
			for (x=0; x < X_BYTES; x++)
 8004e70:	42ac      	cmp	r4, r5
 8004e72:	d1f9      	bne.n	8004e68 <LcdUpdate+0x40>
		for(y = Y_lo; y <= Y_hi; y++)
 8004e74:	3601      	adds	r6, #1
 8004e76:	783b      	ldrb	r3, [r7, #0]
 8004e78:	b2f6      	uxtb	r6, r6
 8004e7a:	42b3      	cmp	r3, r6
 8004e7c:	d2e5      	bcs.n	8004e4a <LcdUpdate+0x22>
			}
		}
	}
	Y_lo = Y_BYTES;
	Y_hi = 0;
 8004e7e:	2300      	movs	r3, #0
	Y_lo = Y_BYTES;
 8004e80:	2208      	movs	r2, #8
	Y_hi = 0;
 8004e82:	703b      	strb	r3, [r7, #0]
	Y_lo = Y_BYTES;
 8004e84:	f88a 2000 	strb.w	r2, [sl]
    UpdateLcd = 0;				//FALSE;
 8004e88:	f889 3000 	strb.w	r3, [r9]
}
 8004e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e90:	200005d5 	.word	0x200005d5
 8004e94:	200005d4 	.word	0x200005d4
 8004e98:	200005d6 	.word	0x200005d6
 8004e9c:	200001d4 	.word	0x200001d4

08004ea0 <TurboStop>:
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
}

//----------------------
void TurboStop(void) {
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4801      	ldr	r0, [pc, #4]	; (8004ea8 <TurboStop+0x8>)
 8004ea4:	f7fe bf78 	b.w	8003d98 <HAL_TIM_PWM_Stop>
 8004ea8:	2000094c 	.word	0x2000094c

08004eac <MotorsStart>:
}


//============================================= Motors ========================================

void MotorsStart(void) {
 8004eac:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004eae:	4c05      	ldr	r4, [pc, #20]	; (8004ec4 <MotorsStart+0x18>)
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7fe ff6e 	bl	8003d94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004eb8:	4620      	mov	r0, r4
 8004eba:	2104      	movs	r1, #4
}
 8004ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004ec0:	f7fe bf68 	b.w	8003d94 <HAL_TIM_PWM_Start>
 8004ec4:	20000a04 	.word	0x20000a04

08004ec8 <MotorsStop>:

//----------------------
void MotorsStop(void) {
 8004ec8:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004eca:	4c05      	ldr	r4, [pc, #20]	; (8004ee0 <MotorsStop+0x18>)
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7fe ff62 	bl	8003d98 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	2104      	movs	r1, #4
}
 8004ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8004edc:	f7fe bf5c 	b.w	8003d98 <HAL_TIM_PWM_Stop>
 8004ee0:	20000a04 	.word	0x20000a04

08004ee4 <MotorLeftSpeed>:

//---------------------
void MotorLeftSpeed(int32_t speed) {
 8004ee4:	b510      	push	{r4, lr}
	unsigned long duty;

	if (speed == 0)
 8004ee6:	b188      	cbz	r0, 8004f0c <MotorLeftSpeed+0x28>
 8004ee8:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8004eec:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 8004ef0:	2cff      	cmp	r4, #255	; 0xff
 8004ef2:	bfa8      	it	ge
 8004ef4:	24ff      	movge	r4, #255	; 0xff
		speed = 1;
	if (speed > 0) {
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	dd0a      	ble.n	8004f10 <MotorLeftSpeed+0x2c>
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR2_Pin, RESET);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2120      	movs	r1, #32
 8004efe:	4809      	ldr	r0, [pc, #36]	; (8004f24 <MotorLeftSpeed+0x40>)
 8004f00:	f7fc ffc6 	bl	8001e90 <HAL_GPIO_WritePin>
	}
	duty = abs(speed);
	if (duty > 255)
		duty = 255;

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty); //sets the PWM duty cycle (Capture Compare Value)
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <MotorLeftSpeed+0x44>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	635c      	str	r4, [r3, #52]	; 0x34
}
 8004f0a:	bd10      	pop	{r4, pc}
 8004f0c:	2401      	movs	r4, #1
 8004f0e:	e7f4      	b.n	8004efa <MotorLeftSpeed+0x16>
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR2_Pin, SET);
 8004f10:	2201      	movs	r2, #1
 8004f12:	2120      	movs	r1, #32
 8004f14:	4803      	ldr	r0, [pc, #12]	; (8004f24 <MotorLeftSpeed+0x40>)
 8004f16:	f7fc ffbb 	bl	8001e90 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty); //sets the PWM duty cycle (Capture Compare Value)
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <MotorLeftSpeed+0x44>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	635c      	str	r4, [r3, #52]	; 0x34
}
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	bf00      	nop
 8004f24:	48000400 	.word	0x48000400
 8004f28:	20000a04 	.word	0x20000a04

08004f2c <MotorRightSpeed>:

//---------------------
void MotorRightSpeed(int32_t speed) {
 8004f2c:	b510      	push	{r4, lr}
	unsigned long duty;

	if (speed == 0)
 8004f2e:	b188      	cbz	r0, 8004f54 <MotorRightSpeed+0x28>
 8004f30:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8004f34:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 8004f38:	2cff      	cmp	r4, #255	; 0xff
 8004f3a:	bfa8      	it	ge
 8004f3c:	24ff      	movge	r4, #255	; 0xff
		speed = 1;
	if (speed > 0) {
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	dd0a      	ble.n	8004f58 <MotorRightSpeed+0x2c>
		HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR1_Pin, SET);
 8004f42:	2201      	movs	r2, #1
 8004f44:	2110      	movs	r1, #16
 8004f46:	4809      	ldr	r0, [pc, #36]	; (8004f6c <MotorRightSpeed+0x40>)
 8004f48:	f7fc ffa2 	bl	8001e90 <HAL_GPIO_WritePin>
	}
	duty = abs(speed);
	if (duty > 255)
		duty = 255;

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty); //sets the PWM duty cycle (Capture Compare Value)
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <MotorRightSpeed+0x44>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004f52:	bd10      	pop	{r4, pc}
 8004f54:	2401      	movs	r4, #1
 8004f56:	e7f4      	b.n	8004f42 <MotorRightSpeed+0x16>
		HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR1_Pin, RESET);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2110      	movs	r1, #16
 8004f5c:	4803      	ldr	r0, [pc, #12]	; (8004f6c <MotorRightSpeed+0x40>)
 8004f5e:	f7fc ff97 	bl	8001e90 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty); //sets the PWM duty cycle (Capture Compare Value)
 8004f62:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <MotorRightSpeed+0x44>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	bf00      	nop
 8004f6c:	48000400 	.word	0x48000400
 8004f70:	20000a04 	.word	0x20000a04

08004f74 <SD_MPU6050_SetDataRate>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct, uint8_t rate) {
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	b084      	sub	sp, #16
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
 8004f78:	780c      	ldrb	r4, [r1, #0]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
	d[1] = rate;
 8004f7a:	f88d 200d 	strb.w	r2, [sp, #13]
	d[0] = MPU6050_SMPLRT_DIV;
 8004f7e:	2319      	movs	r3, #25
 8004f80:	b2a4      	uxth	r4, r4
SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct, uint8_t rate) {
 8004f82:	4606      	mov	r6, r0
	d[0] = MPU6050_SMPLRT_DIV;
 8004f84:	f88d 300c 	strb.w	r3, [sp, #12]

	/* Set data sample rate */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK)
 8004f88:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004f8c:	9500      	str	r5, [sp, #0]
 8004f8e:	2302      	movs	r3, #2
 8004f90:	aa03      	add	r2, sp, #12
 8004f92:	4621      	mov	r1, r4
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7fd f8e9 	bl	800216c <HAL_I2C_Master_Transmit>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d1f6      	bne.n	8004f8c <SD_MPU6050_SetDataRate+0x18>
	 return SD_MPU6050_Result_Error;
	 }*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8004f9e:	b004      	add	sp, #16
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	bf00      	nop

08004fa4 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct,
		SD_MPU6050_Accelerometer AccelerometerSensitivity) {
 8004fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	b085      	sub	sp, #20
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd = (uint8_t) MPU6050_ACCEL_CONFIG;
 8004faa:	af04      	add	r7, sp, #16
	uint8_t address = DataStruct->Address;
 8004fac:	780c      	ldrb	r4, [r1, #0]
	uint8_t regAdd = (uint8_t) MPU6050_ACCEL_CONFIG;
 8004fae:	231c      	movs	r3, #28
 8004fb0:	f807 3d01 	strb.w	r3, [r7, #-1]!
		SD_MPU6050_Accelerometer AccelerometerSensitivity) {
 8004fb4:	4689      	mov	r9, r1
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	4690      	mov	r8, r2
 8004fba:	b2a4      	uxth	r4, r4

	/* Config accelerometer */
	while (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &regAdd, 1, 1000) != HAL_OK)
 8004fbc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004fc0:	9600      	str	r6, [sp, #0]
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	463a      	mov	r2, r7
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f7fd f8cf 	bl	800216c <HAL_I2C_Master_Transmit>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d1f6      	bne.n	8004fc0 <SD_MPU6050_SetAccelerometer+0x1c>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/
	if  (HAL_I2C_Master_Receive(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	f10d 020e 	add.w	r2, sp, #14
 8004fd8:	2301      	movs	r3, #1
 8004fda:	9600      	str	r6, [sp, #0]
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7fd f979 	bl	80022d4 <HAL_I2C_Master_Receive>
		;
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8004fe2:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if  (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 8004fe6:	9600      	str	r6, [sp, #0]
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8004fe8:	f023 0318 	bic.w	r3, r3, #24
	if  (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 8004fec:	4621      	mov	r1, r4
 8004fee:	f10d 020e 	add.w	r2, sp, #14
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8004ff2:	ea43 04c8 	orr.w	r4, r3, r8, lsl #3
	if  (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	2301      	movs	r3, #1
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8004ffa:	f88d 400e 	strb.w	r4, [sp, #14]
	if  (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &temp, 1, 1000) != HAL_OK)
 8004ffe:	f7fd f8b5 	bl	800216c <HAL_I2C_Master_Transmit>
	/*{
	 return SD_MPU6050_Result_Error;
	 }*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8005002:	f1b8 0f03 	cmp.w	r8, #3
 8005006:	d807      	bhi.n	8005018 <SD_MPU6050_SetAccelerometer+0x74>
 8005008:	e8df f008 	tbb	[pc, r8]
 800500c:	0a121a02 	.word	0x0a121a02
	case SD_MPU6050_Accelerometer_2G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_2;
 8005010:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8005014:	f8c9 3008 	str.w	r3, [r9, #8]
		break;
	}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8005018:	2000      	movs	r0, #0
 800501a:	b005      	add	sp, #20
 800501c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 8005020:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
}
 8005024:	2000      	movs	r0, #0
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 8005026:	f8c9 3008 	str.w	r3, [r9, #8]
}
 800502a:	b005      	add	sp, #20
 800502c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 8005030:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
}
 8005034:	2000      	movs	r0, #0
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 8005036:	f8c9 3008 	str.w	r3, [r9, #8]
}
 800503a:	b005      	add	sp, #20
 800503c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 8005040:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
}
 8005044:	2000      	movs	r0, #0
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 8005046:	f8c9 3008 	str.w	r3, [r9, #8]
}
 800504a:	b005      	add	sp, #20
 800504c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005050 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct,
		SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	460d      	mov	r5, r1
 8005054:	b084      	sub	sp, #16

	// Config gyroscope //
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t d[2];
	int8_t address = DataStruct->Address;
 8005056:	f991 1000 	ldrsb.w	r1, [r1]
		SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 800505a:	4614      	mov	r4, r2
	d[0] = MPU6050_GYRO_CONFIG;
	d[1] = (uint8_t) GyroscopeSensitivity << 3;
	if   (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK);
 800505c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	d[1] = (uint8_t) GyroscopeSensitivity << 3;
 8005060:	00d2      	lsls	r2, r2, #3
	if   (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK);
 8005062:	9300      	str	r3, [sp, #0]
	d[0] = MPU6050_GYRO_CONFIG;
 8005064:	261b      	movs	r6, #27
	if   (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK);
 8005066:	2302      	movs	r3, #2
	d[1] = (uint8_t) GyroscopeSensitivity << 3;
 8005068:	f88d 200d 	strb.w	r2, [sp, #13]
	if   (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK);
 800506c:	b289      	uxth	r1, r1
 800506e:	aa03      	add	r2, sp, #12
	d[0] = MPU6050_GYRO_CONFIG;
 8005070:	f88d 600c 	strb.w	r6, [sp, #12]
	if   (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK);
 8005074:	f7fd f87a 	bl	800216c <HAL_I2C_Master_Transmit>

	switch (GyroscopeSensitivity) {
 8005078:	2c03      	cmp	r4, #3
 800507a:	d805      	bhi.n	8005088 <SD_MPU6050_SetGyroscope+0x38>
 800507c:	e8df f004 	tbb	[pc, r4]
 8005080:	070c1102 	.word	0x070c1102
	case SD_MPU6050_Gyroscope_250s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_250;
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <SD_MPU6050_SetGyroscope+0x5c>)
 8005086:	606b      	str	r3, [r5, #4]
	default:
		break;
	}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8005088:	2000      	movs	r0, #0
 800508a:	b004      	add	sp, #16
 800508c:	bd70      	pop	{r4, r5, r6, pc}
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_2000;
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <SD_MPU6050_SetGyroscope+0x60>)
 8005090:	606b      	str	r3, [r5, #4]
}
 8005092:	2000      	movs	r0, #0
 8005094:	b004      	add	sp, #16
 8005096:	bd70      	pop	{r4, r5, r6, pc}
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_1000;
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <SD_MPU6050_SetGyroscope+0x64>)
 800509a:	606b      	str	r3, [r5, #4]
}
 800509c:	2000      	movs	r0, #0
 800509e:	b004      	add	sp, #16
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_500;
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <SD_MPU6050_SetGyroscope+0x68>)
 80050a4:	606b      	str	r3, [r5, #4]
}
 80050a6:	2000      	movs	r0, #0
 80050a8:	b004      	add	sp, #16
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	3bfa232d 	.word	0x3bfa232d
 80050b0:	3d7c0fc1 	.word	0x3d7c0fc1
 80050b4:	3cf9c190 	.word	0x3cf9c190
 80050b8:	3c7a232d 	.word	0x3c7a232d

080050bc <SD_MPU6050_Init>:
		SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 80050c0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
		SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 80050c4:	b084      	sub	sp, #16
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK) {
 80050c6:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 80050c8:	700a      	strb	r2, [r1, #0]
	uint8_t WHO_AM_I = (uint8_t) MPU6050_WHO_AM_I;
 80050ca:	2675      	movs	r6, #117	; 0x75
		SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 80050cc:	460d      	mov	r5, r1
 80050ce:	4698      	mov	r8, r3
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK) {
 80050d0:	4621      	mov	r1, r4
 80050d2:	2305      	movs	r3, #5
 80050d4:	2202      	movs	r2, #2
	uint8_t WHO_AM_I = (uint8_t) MPU6050_WHO_AM_I;
 80050d6:	f88d 600a 	strb.w	r6, [sp, #10]
		SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity) {
 80050da:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80050de:	4606      	mov	r6, r0
	if (HAL_I2C_IsDeviceReady(Handle, address, 2, 5) != HAL_OK) {
 80050e0:	f7fd f9ae 	bl	8002440 <HAL_I2C_IsDeviceReady>
 80050e4:	b118      	cbz	r0, 80050ee <SD_MPU6050_Init+0x32>
		return SD_MPU6050_Result_Error;
 80050e6:	2001      	movs	r0, #1
}
 80050e8:	b004      	add	sp, #16
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK) {
 80050ee:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 80050f2:	f8cd 9000 	str.w	r9, [sp]
 80050f6:	2301      	movs	r3, #1
 80050f8:	f10d 020a 	add.w	r2, sp, #10
 80050fc:	4621      	mov	r1, r4
 80050fe:	4630      	mov	r0, r6
 8005100:	f7fd f834 	bl	800216c <HAL_I2C_Master_Transmit>
 8005104:	2800      	cmp	r0, #0
 8005106:	d1ee      	bne.n	80050e6 <SD_MPU6050_Init+0x2a>
	if (HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK) {
 8005108:	f8cd 9000 	str.w	r9, [sp]
 800510c:	2301      	movs	r3, #1
 800510e:	f10d 020b 	add.w	r2, sp, #11
 8005112:	4621      	mov	r1, r4
 8005114:	4630      	mov	r0, r6
 8005116:	f7fd f8dd 	bl	80022d4 <HAL_I2C_Master_Receive>
 800511a:	2800      	cmp	r0, #0
 800511c:	d1e3      	bne.n	80050e6 <SD_MPU6050_Init+0x2a>
	while (temp != MPU6050_I_AM) {
 800511e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005122:	2b68      	cmp	r3, #104	; 0x68
 8005124:	d001      	beq.n	800512a <SD_MPU6050_Init+0x6e>
		return SD_MPU6050_Result_DeviceInvalid;
 8005126:	2003      	movs	r0, #3
 8005128:	e7de      	b.n	80050e8 <SD_MPU6050_Init+0x2c>
	d[0] = MPU6050_PWR_MGMT_1;
 800512a:	f10d 0a10 	add.w	sl, sp, #16
 800512e:	f240 136b 	movw	r3, #363	; 0x16b
 8005132:	f82a 3d04 	strh.w	r3, [sl, #-4]!
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK) {
 8005136:	4621      	mov	r1, r4
 8005138:	f8cd 9000 	str.w	r9, [sp]
 800513c:	4652      	mov	r2, sl
 800513e:	2302      	movs	r3, #2
 8005140:	4630      	mov	r0, r6
 8005142:	f7fd f813 	bl	800216c <HAL_I2C_Master_Transmit>
 8005146:	2800      	cmp	r0, #0
 8005148:	d1cd      	bne.n	80050e6 <SD_MPU6050_Init+0x2a>
	d[0] = MPU6050_O_CONFIG;
 800514a:	f240 2c1a 	movw	ip, #538	; 0x21a
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK) {
 800514e:	f8cd 9000 	str.w	r9, [sp]
 8005152:	2302      	movs	r3, #2
 8005154:	4652      	mov	r2, sl
 8005156:	4621      	mov	r1, r4
 8005158:	4630      	mov	r0, r6
	d[0] = MPU6050_O_CONFIG;
 800515a:	f8ad c00c 	strh.w	ip, [sp, #12]
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK) {
 800515e:	f7fd f805 	bl	800216c <HAL_I2C_Master_Transmit>
 8005162:	2800      	cmp	r0, #0
 8005164:	d1bf      	bne.n	80050e6 <SD_MPU6050_Init+0x2a>
	SD_MPU6050_SetDataRate(I2Cx, DataStruct, SD_MPU6050_DataRate_8KHz);
 8005166:	4602      	mov	r2, r0
 8005168:	4629      	mov	r1, r5
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff ff02 	bl	8004f74 <SD_MPU6050_SetDataRate>
	SD_MPU6050_SetAccelerometer(I2Cx, DataStruct, AccelerometerSensitivity);
 8005170:	4629      	mov	r1, r5
 8005172:	4642      	mov	r2, r8
 8005174:	4630      	mov	r0, r6
 8005176:	f7ff ff15 	bl	8004fa4 <SD_MPU6050_SetAccelerometer>
	SD_MPU6050_SetGyroscope(I2Cx, DataStruct, GyroscopeSensitivity);
 800517a:	4629      	mov	r1, r5
 800517c:	463a      	mov	r2, r7
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff ff66 	bl	8005050 <SD_MPU6050_SetGyroscope>
	d[0] = MPU6050_O_INT_PIN_CFG;
 8005184:	f24b 0537 	movw	r5, #45111	; 0xb037
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 3, 1000) != HAL_OK) {
 8005188:	4621      	mov	r1, r4
 800518a:	f8cd 9000 	str.w	r9, [sp]
 800518e:	4652      	mov	r2, sl
 8005190:	4630      	mov	r0, r6
	d[1] = ( MPU6050_INT_PIN_CFG_INT_LEVEL | MPU6050_INT_PIN_CFG_INT_RD_CLEAR | MPU6050_INT_PIN_CFG_LATCH_INT_EN);
 8005192:	2441      	movs	r4, #65	; 0x41
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 3, 1000) != HAL_OK) {
 8005194:	2303      	movs	r3, #3
	d[0] = MPU6050_O_INT_PIN_CFG;
 8005196:	f8ad 500c 	strh.w	r5, [sp, #12]
	d[1] = ( MPU6050_INT_PIN_CFG_INT_LEVEL | MPU6050_INT_PIN_CFG_INT_RD_CLEAR | MPU6050_INT_PIN_CFG_LATCH_INT_EN);
 800519a:	f88d 400e 	strb.w	r4, [sp, #14]
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, (uint8_t *) d, 3, 1000) != HAL_OK) {
 800519e:	f7fc ffe5 	bl	800216c <HAL_I2C_Master_Transmit>
		return SD_MPU6050_Result_Error;
 80051a2:	3000      	adds	r0, #0
 80051a4:	bf18      	it	ne
 80051a6:	2001      	movne	r0, #1
 80051a8:	e79e      	b.n	80050e8 <SD_MPU6050_Init+0x2c>
 80051aa:	bf00      	nop

080051ac <SD_MPU6050_ReadGyroscope>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct) {
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	b087      	sub	sp, #28
	uint8_t reg = MPU6050_GYRO_ZOUT_H;  // <<<<------- Only Z  - 2 bytes
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	// Read gyroscope data //
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &reg, 1, 1000) != HAL_OK)
 80051b0:	780e      	ldrb	r6, [r1, #0]
	uint8_t reg = MPU6050_GYRO_ZOUT_H;  // <<<<------- Only Z  - 2 bytes
 80051b2:	aa06      	add	r2, sp, #24
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &reg, 1, 1000) != HAL_OK)
 80051b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	uint8_t reg = MPU6050_GYRO_ZOUT_H;  // <<<<------- Only Z  - 2 bytes
 80051b8:	2347      	movs	r3, #71	; 0x47
 80051ba:	f802 3d09 	strb.w	r3, [r2, #-9]!
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx, SD_MPU6050* DataStruct) {
 80051be:	460c      	mov	r4, r1
 80051c0:	4607      	mov	r7, r0
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t) address, &reg, 1, 1000) != HAL_OK)
 80051c2:	4631      	mov	r1, r6
 80051c4:	9500      	str	r5, [sp, #0]
 80051c6:	2301      	movs	r3, #1
 80051c8:	f7fc ffd0 	bl	800216c <HAL_I2C_Master_Transmit>
		;

	//HAL_I2C_Master_Receive_IT(&hi2c1, (uint16_t) address, data, 2);
	if (HAL_I2C_Master_Receive(Handle, (uint16_t) address, data, 2, 1000) != HAL_OK)
 80051cc:	aa04      	add	r2, sp, #16
 80051ce:	4631      	mov	r1, r6
 80051d0:	9500      	str	r5, [sp, #0]
 80051d2:	4638      	mov	r0, r7
 80051d4:	2302      	movs	r3, #2
 80051d6:	f7fd f87d 	bl	80022d4 <HAL_I2C_Master_Receive>
		 // Format //
		 DataStruct->Gyroscope_X = (int16_t) (data[0] << 8 | data[1]);
		 DataStruct->Gyroscope_Y = (int16_t) (data[2] << 8 | data[3]);
		 DataStruct->Gyroscope_Z = (int16_t) (data[4] << 8 | data[5]);
		 */
	DataStruct->Gyroscope_Z = (int16_t) (data[0] << 8 | data[1]);	// <<<<------- Only Z  - 2 bytes
 80051da:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80051de:	f89d 3011 	ldrb.w	r3, [sp, #17]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80051e2:	2000      	movs	r0, #0
	DataStruct->Gyroscope_Z = (int16_t) (data[0] << 8 | data[1]);	// <<<<------- Only Z  - 2 bytes
 80051e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051e8:	82e3      	strh	r3, [r4, #22]
}
 80051ea:	b007      	add	sp, #28
 80051ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ee:	bf00      	nop

080051f0 <dev_factory_settings>:
	unsigned int *devset_ptr;
	unsigned char i;
	unsigned int chk_sum;

	//clear the whole structure because of strings
	memset((char*) &dev_settings, 0, sizeof(ST_DEV_SETTINGS));
 80051f0:	4927      	ldr	r1, [pc, #156]	; (8005290 <dev_factory_settings+0xa0>)
	dev_settings.test = 0xAA55;
 80051f2:	f1a1 0254 	sub.w	r2, r1, #84	; 0x54
void dev_factory_settings(void) {
 80051f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dev_settings.brightness = 220;

	dev_settings.fast_speed = FAST_SPEED;
	dev_settings.turn_speed = TURN_SPEED;
	dev_settings.uturn_speed = UTURN_SPEED;
	dev_settings.starting_speed = STARTING_SPEED;
 80051f8:	201e      	movs	r0, #30
	dev_settings.brightness = 220;
 80051fa:	24dc      	movs	r4, #220	; 0xdc
	dev_settings.fast_speed = FAST_SPEED;
 80051fc:	2378      	movs	r3, #120	; 0x78
	dev_settings.brightness = 220;
 80051fe:	6054      	str	r4, [r2, #4]
	dev_settings.starting_speed = STARTING_SPEED;
 8005200:	6150      	str	r0, [r2, #20]
	dev_settings.stopping_speed = STOPPING_SPEED;
 8005202:	2450      	movs	r4, #80	; 0x50
	dev_settings.ramp = RAMP;
	dev_settings.turn_clamp = UTURN_SPEED;

	dev_settings.kp = KP;
	dev_settings.kd = KD;
	dev_settings.ki = KI;
 8005204:	2001      	movs	r0, #1
	dev_settings.turn_speed = TURN_SPEED;
 8005206:	253c      	movs	r5, #60	; 0x3c
	dev_settings.fast_speed = FAST_SPEED;
 8005208:	6093      	str	r3, [r2, #8]
	dev_settings.stopping_speed = STOPPING_SPEED;
 800520a:	6194      	str	r4, [r2, #24]
	dev_settings.ramp = RAMP;
 800520c:	23c8      	movs	r3, #200	; 0xc8

	dev_settings.wkp = WKP;
 800520e:	2406      	movs	r4, #6
	dev_settings.ki = KI;
 8005210:	62d0      	str	r0, [r2, #44]	; 0x2c
	dev_settings.uturn_speed = UTURN_SPEED;
 8005212:	2023      	movs	r0, #35	; 0x23
	dev_settings.turn_speed = TURN_SPEED;
 8005214:	60d5      	str	r5, [r2, #12]
	dev_settings.ramp = RAMP;
 8005216:	61d3      	str	r3, [r2, #28]
	dev_settings.kd = KD;
 8005218:	2514      	movs	r5, #20
	dev_settings.wkd = WKD;
 800521a:	2321      	movs	r3, #33	; 0x21
	dev_settings.wkp = WKP;
 800521c:	6314      	str	r4, [r2, #48]	; 0x30
	dev_settings.uturn_speed = UTURN_SPEED;
 800521e:	6110      	str	r0, [r2, #16]
	dev_settings.kp = KP;
 8005220:	240a      	movs	r4, #10
	dev_settings.turn_clamp = UTURN_SPEED;
 8005222:	6210      	str	r0, [r2, #32]
	dev_settings.wki = WKI;

	dev_settings.frontL_callibration = FRONT_CAL;
 8005224:	f644 6020 	movw	r0, #20000	; 0x4e20
	dev_settings.kd = KD;
 8005228:	6295      	str	r5, [r2, #40]	; 0x28
	dev_settings.wkd = WKD;
 800522a:	6353      	str	r3, [r2, #52]	; 0x34
	dev_settings.kp = KP;
 800522c:	6254      	str	r4, [r2, #36]	; 0x24
	dev_settings.wki = WKI;
 800522e:	6394      	str	r4, [r2, #56]	; 0x38
 8005230:	4615      	mov	r5, r2
 8005232:	4613      	mov	r3, r2
	memset((char*) &dev_settings, 0, sizeof(ST_DEV_SETTINGS));
 8005234:	2400      	movs	r4, #0
	dev_settings.frontR_callibration = FRONT_CAL;
 8005236:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
	dev_settings.sideL_callibration = SIDE_CALL;
	dev_settings.sideR_callibration = SIDE_CALL;
 800523a:	e9c2 0011 	strd	r0, r0, [r2, #68]	; 0x44
	dev_settings.left_callibration = FRONT_CAL;
	dev_settings.right_callibration = FRONT_CAL;
 800523e:	e9c2 0013 	strd	r0, r0, [r2, #76]	; 0x4c
	dev_settings.test = 0xAA55;
 8005242:	f64a 2255 	movw	r2, #43605	; 0xaa55
	memset((char*) &dev_settings, 0, sizeof(ST_DEV_SETTINGS));
 8005246:	e9c1 4400 	strd	r4, r4, [r1]
	dev_settings.test = 0xAA55;
 800524a:	f841 2c54 	str.w	r2, [r1, #-84]
 800524e:	e001      	b.n	8005254 <dev_factory_settings+0x64>
 8005250:	f853 2f04 	ldr.w	r2, [r3, #4]!
	dev_settings.gyro_offset = 0;

	devset_ptr = (unsigned int*) &dev_settings;
	chk_sum = 0;
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
 8005254:	428b      	cmp	r3, r1
		chk_sum += *devset_ptr;
 8005256:	4414      	add	r4, r2
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
 8005258:	d1fa      	bne.n	8005250 <dev_factory_settings+0x60>
		devset_ptr++;
	}
	dev_settings.chk_sum = chk_sum;
	eepr_buffWrite((uint8_t *) &dev_settings, DEV_SETTINGS, sizeof(ST_DEV_SETTINGS)); // 4 ����� - 32����
 800525a:	225c      	movs	r2, #92	; 0x5c
 800525c:	2110      	movs	r1, #16
 800525e:	480d      	ldr	r0, [pc, #52]	; (8005294 <dev_factory_settings+0xa4>)
	dev_settings.chk_sum = chk_sum;
 8005260:	65ac      	str	r4, [r5, #88]	; 0x58
	eepr_buffWrite((uint8_t *) &dev_settings, DEV_SETTINGS, sizeof(ST_DEV_SETTINGS)); // 4 ����� - 32����
 8005262:	f001 ff83 	bl	800716c <eepr_buffWrite>

	//-------- Maze ----
	maze_settings.maze_width = MAZE_WIDTH;
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <dev_factory_settings+0xa8>)
	maze_settings.maze_type = MAZE_TYE;
	maze_settings.goto_end_distance = GOTO_END_DISTANCE;
	chk_sum = 0;
	devset_ptr = (unsigned int*) &maze_settings;
	for (i = (sizeof(ST_MAZE_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_MAZE_SETTINGS)
		chk_sum += *devset_ptr;
 8005268:	691a      	ldr	r2, [r3, #16]
	maze_settings.maze_width = MAZE_WIDTH;
 800526a:	271e      	movs	r7, #30
		chk_sum += *devset_ptr;
 800526c:	f102 04ab 	add.w	r4, r2, #171	; 0xab
	maze_settings.wall_width = WALL_WIDTH;
 8005270:	2114      	movs	r1, #20
	maze_settings.maze_type = MAZE_TYE;
 8005272:	2601      	movs	r6, #1
	maze_settings.goto_end_distance = GOTO_END_DISTANCE;
 8005274:	2578      	movs	r5, #120	; 0x78
	maze_settings.wall_width = WALL_WIDTH;
 8005276:	6059      	str	r1, [r3, #4]
		devset_ptr++;
	}
	maze_settings.chk_sum = chk_sum;
	eepr_buffWrite((uint8_t *) &maze_settings, MAZE_SETTINGS, sizeof(ST_MAZE_SETTINGS)); // 4 ����� - 32����
 8005278:	4618      	mov	r0, r3
	maze_settings.maze_width = MAZE_WIDTH;
 800527a:	601f      	str	r7, [r3, #0]
	maze_settings.goto_end_distance = GOTO_END_DISTANCE;
 800527c:	e9c3 6502 	strd	r6, r5, [r3, #8]
	maze_settings.chk_sum = chk_sum;
 8005280:	615c      	str	r4, [r3, #20]
	eepr_buffWrite((uint8_t *) &maze_settings, MAZE_SETTINGS, sizeof(ST_MAZE_SETTINGS)); // 4 ����� - 32����
 8005282:	2218      	movs	r2, #24
 8005284:	2180      	movs	r1, #128	; 0x80

}
 8005286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	eepr_buffWrite((uint8_t *) &maze_settings, MAZE_SETTINGS, sizeof(ST_MAZE_SETTINGS)); // 4 ����� - 32����
 800528a:	f001 bf6f 	b.w	800716c <eepr_buffWrite>
 800528e:	bf00      	nop
 8005290:	20000678 	.word	0x20000678
 8005294:	20000624 	.word	0x20000624
 8005298:	2000060c 	.word	0x2000060c

0800529c <dev_settings_save>:
void dev_settings_save(void) {
	unsigned int *devset_ptr;
	unsigned char i;
	unsigned int chk_sum;

	dev_settings.test = 0xAA55;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <dev_settings_save+0x2c>)
 800529e:	f64a 2255 	movw	r2, #43605	; 0xaa55
void dev_settings_save(void) {
 80052a2:	b430      	push	{r4, r5}
 80052a4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80052a8:	461d      	mov	r5, r3
	dev_settings.test = 0xAA55;
 80052aa:	601a      	str	r2, [r3, #0]
	devset_ptr = (unsigned int*) &dev_settings;
	chk_sum = 0;
 80052ac:	2400      	movs	r4, #0
 80052ae:	e001      	b.n	80052b4 <dev_settings_save+0x18>
 80052b0:	f853 2f04 	ldr.w	r2, [r3, #4]!
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
 80052b4:	428b      	cmp	r3, r1
		chk_sum += *devset_ptr;
 80052b6:	4414      	add	r4, r2
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
 80052b8:	d1fa      	bne.n	80052b0 <dev_settings_save+0x14>
		devset_ptr++;
	}
	dev_settings.chk_sum = chk_sum;
 80052ba:	65ac      	str	r4, [r5, #88]	; 0x58
	eepr_buffWrite((uint8_t *) &dev_settings, DEV_SETTINGS, sizeof(ST_DEV_SETTINGS)); // 4 ����� - 32����
 80052bc:	225c      	movs	r2, #92	; 0x5c
 80052be:	2110      	movs	r1, #16
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <dev_settings_save+0x2c>)
}
 80052c2:	bc30      	pop	{r4, r5}
	eepr_buffWrite((uint8_t *) &dev_settings, DEV_SETTINGS, sizeof(ST_DEV_SETTINGS)); // 4 ����� - 32����
 80052c4:	f001 bf52 	b.w	800716c <eepr_buffWrite>
 80052c8:	20000624 	.word	0x20000624

080052cc <maze_settings_save>:
	unsigned int chk_sum;

	chk_sum = 0;
	devset_ptr = (unsigned int*) &maze_settings;
	for (i = (sizeof(ST_MAZE_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_MAZE_SETTINGS)
		chk_sum += *devset_ptr;
 80052cc:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <maze_settings_save+0x24>)
void maze_settings_save(void) {
 80052ce:	b430      	push	{r4, r5}
		chk_sum += *devset_ptr;
 80052d0:	e9d3 2500 	ldrd	r2, r5, [r3]
 80052d4:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
 80052d8:	442a      	add	r2, r5
 80052da:	6919      	ldr	r1, [r3, #16]
 80052dc:	4422      	add	r2, r4
 80052de:	4402      	add	r2, r0
 80052e0:	188c      	adds	r4, r1, r2
		devset_ptr++;
	}
	maze_settings.chk_sum = chk_sum;
 80052e2:	615c      	str	r4, [r3, #20]
	eepr_buffWrite((uint8_t *) &maze_settings, MAZE_SETTINGS, sizeof(ST_MAZE_SETTINGS)); // 4 ����� - 32����
 80052e4:	4618      	mov	r0, r3
 80052e6:	2218      	movs	r2, #24
 80052e8:	2180      	movs	r1, #128	; 0x80
}
 80052ea:	bc30      	pop	{r4, r5}
	eepr_buffWrite((uint8_t *) &maze_settings, MAZE_SETTINGS, sizeof(ST_MAZE_SETTINGS)); // 4 ����� - 32����
 80052ec:	f001 bf3e 	b.w	800716c <eepr_buffWrite>
 80052f0:	2000060c 	.word	0x2000060c

080052f4 <dev_settings_chk>:

//------------------------------------------------------

unsigned char dev_settings_chk(void) {
 80052f4:	b510      	push	{r4, lr}
	unsigned int *devset_ptr;
	unsigned char i;
	unsigned int chk_sum;

	eepr_buffRead((uint8_t *) &dev_settings, DEV_SETTINGS, sizeof(ST_DEV_SETTINGS));	// 4 ����� - 32����
	devset_ptr = (unsigned int*) &dev_settings;
 80052f6:	4c0e      	ldr	r4, [pc, #56]	; (8005330 <dev_settings_chk+0x3c>)
	eepr_buffRead((uint8_t *) &dev_settings, DEV_SETTINGS, sizeof(ST_DEV_SETTINGS));	// 4 ����� - 32����
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <dev_settings_chk+0x3c>)
 80052fa:	225c      	movs	r2, #92	; 0x5c
 80052fc:	2110      	movs	r1, #16
 80052fe:	f001 ffb5 	bl	800726c <eepr_buffRead>
	chk_sum = 0;
 8005302:	2200      	movs	r2, #0
	devset_ptr = (unsigned int*) &dev_settings;
 8005304:	4623      	mov	r3, r4
 8005306:	f104 0058 	add.w	r0, r4, #88	; 0x58
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
		chk_sum += *devset_ptr;
 800530a:	f853 1b04 	ldr.w	r1, [r3], #4
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
 800530e:	4283      	cmp	r3, r0
		chk_sum += *devset_ptr;
 8005310:	440a      	add	r2, r1
	for (i = (sizeof(ST_DEV_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_DEV_SETTINGS)
 8005312:	d1fa      	bne.n	800530a <dev_settings_chk+0x16>
		devset_ptr++;
	}

	if ((chk_sum != dev_settings.chk_sum) || (dev_settings.test != 0xAA55))
 8005314:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005316:	4291      	cmp	r1, r2
 8005318:	d001      	beq.n	800531e <dev_settings_chk+0x2a>
		return 1; // Error
 800531a:	2001      	movs	r0, #1
	else
		return 0;

}
 800531c:	bd10      	pop	{r4, pc}
	if ((chk_sum != dev_settings.chk_sum) || (dev_settings.test != 0xAA55))
 800531e:	f853 0c58 	ldr.w	r0, [r3, #-88]
 8005322:	f64a 2355 	movw	r3, #43605	; 0xaa55
		return 1; // Error
 8005326:	1ac0      	subs	r0, r0, r3
 8005328:	bf18      	it	ne
 800532a:	2001      	movne	r0, #1
}
 800532c:	bd10      	pop	{r4, pc}
 800532e:	bf00      	nop
 8005330:	20000624 	.word	0x20000624

08005334 <maze_settings_chk>:

//------------------------------------------------------

unsigned char maze_settings_chk(void) {
 8005334:	b570      	push	{r4, r5, r6, lr}
	unsigned int *devset_ptr;
	unsigned char i;
	unsigned int chk_sum;

	eepr_buffRead((uint8_t *) &maze_settings, MAZE_SETTINGS, sizeof(ST_MAZE_SETTINGS)); // 4 ����� - 32����
 8005336:	4c0a      	ldr	r4, [pc, #40]	; (8005360 <maze_settings_chk+0x2c>)
 8005338:	2218      	movs	r2, #24
 800533a:	4620      	mov	r0, r4
 800533c:	2180      	movs	r1, #128	; 0x80
 800533e:	f001 ff95 	bl	800726c <eepr_buffRead>
	devset_ptr = (unsigned int*) &maze_settings;
	chk_sum = 0;
	for (i = (sizeof(ST_MAZE_SETTINGS) / 4 - 1); i > 0; i--) { //sizeof (ST_MAZE_SETTINGS)
		chk_sum += *devset_ptr;
 8005342:	e9d4 3600 	ldrd	r3, r6, [r4]
 8005346:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
		devset_ptr++;
	}

	if (chk_sum != maze_settings.chk_sum)
 800534a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
		chk_sum += *devset_ptr;
 800534e:	4433      	add	r3, r6
 8005350:	442b      	add	r3, r5
 8005352:	440b      	add	r3, r1
 8005354:	4413      	add	r3, r2
		return 1; // Error
	else
		return 0;

}
 8005356:	1a18      	subs	r0, r3, r0
 8005358:	bf18      	it	ne
 800535a:	2001      	movne	r0, #1
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	bf00      	nop
 8005360:	2000060c 	.word	0x2000060c

08005364 <factorySettings>:

//===============================================================================

unsigned char factorySettings(unsigned char kbd_key) {
 8005364:	b500      	push	{lr}
 8005366:	b083      	sub	sp, #12

	dev_factory_settings();
 8005368:	f7ff ff42 	bl	80051f0 <dev_factory_settings>
	LcdErase();
 800536c:	f7ff f8e4 	bl	8004538 <LcdErase>
	TextBox(1, 3, 19, BOLD_FNT, (char*) "�������� ���������\n������������1!");
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <factorySettings+0x34>)
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2213      	movs	r2, #19
 8005376:	2302      	movs	r3, #2
 8005378:	2103      	movs	r1, #3
 800537a:	2001      	movs	r0, #1
 800537c:	f001 fea6 	bl	80070cc <TextBox>

	gulTickCountDown = 20000;
 8005380:	4a06      	ldr	r2, [pc, #24]	; (800539c <factorySettings+0x38>)
 8005382:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005386:	6013      	str	r3, [r2, #0]
	while (gulTickCountDown)
 8005388:	6813      	ldr	r3, [r2, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1fc      	bne.n	8005388 <factorySettings+0x24>
		;

	return 1;
}
 800538e:	2001      	movs	r0, #1
 8005390:	b003      	add	sp, #12
 8005392:	f85d fb04 	ldr.w	pc, [sp], #4
 8005396:	bf00      	nop
 8005398:	0800b8fc 	.word	0x0800b8fc
 800539c:	2000088c 	.word	0x2000088c

080053a0 <fast_spped_set>:
//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------

unsigned char fast_spped_set(unsigned char kbd_key) {
 80053a0:	b530      	push	{r4, r5, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 80053a2:	4c1f      	ldr	r4, [pc, #124]	; (8005420 <fast_spped_set+0x80>)
 80053a4:	7823      	ldrb	r3, [r4, #0]
unsigned char fast_spped_set(unsigned char kbd_key) {
 80053a6:	b083      	sub	sp, #12
	switch (setup_state) {
 80053a8:	b17b      	cbz	r3, 80053ca <fast_spped_set+0x2a>
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10a      	bne.n	80053c4 <fast_spped_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 80053ae:	491d      	ldr	r1, [pc, #116]	; (8005424 <fast_spped_set+0x84>)
 80053b0:	f001 fcc0 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 80053b4:	2801      	cmp	r0, #1
 80053b6:	d027      	beq.n	8005408 <fast_spped_set+0x68>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 80053b8:	2802      	cmp	r0, #2
 80053ba:	d103      	bne.n	80053c4 <fast_spped_set+0x24>
		setup_state = ST_ECR_INIT;
 80053bc:	2300      	movs	r3, #0
 80053be:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 80053c0:	b003      	add	sp, #12
 80053c2:	bd30      	pop	{r4, r5, pc}
	return 0;
 80053c4:	2000      	movs	r0, #0
}
 80053c6:	b003      	add	sp, #12
 80053c8:	bd30      	pop	{r4, r5, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <fast_spped_set+0x88>)
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <fast_spped_set+0x8c>)
 80053ce:	7811      	ldrb	r1, [r2, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.fast_speed;
 80053d2:	4817      	ldr	r0, [pc, #92]	; (8005430 <fast_spped_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <fast_spped_set+0x84>)
		usInpValue = dev_settings.fast_speed;
 80053d6:	4d17      	ldr	r5, [pc, #92]	; (8005434 <fast_spped_set+0x94>)
 80053d8:	6880      	ldr	r0, [r0, #8]
 80053da:	6028      	str	r0, [r5, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80053dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 5; // input step
 80053e0:	f240 1103 	movw	r1, #259	; 0x103
 80053e4:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80053e6:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 80053e8:	4913      	ldr	r1, [pc, #76]	; (8005438 <fast_spped_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80053ea:	60da      	str	r2, [r3, #12]
		property.uiMinValue = 50;
 80053ec:	2032      	movs	r0, #50	; 0x32
		property.x_pos = 5;
 80053ee:	6019      	str	r1, [r3, #0]
		property.uiMinValue = 50;
 80053f0:	61d8      	str	r0, [r3, #28]
		property.uiMaxValue = 230;
 80053f2:	22e6      	movs	r2, #230	; 0xe6
		result = EditValue(0xFF, &property);
 80053f4:	4619      	mov	r1, r3
 80053f6:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 230;
 80053f8:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 80053fa:	609d      	str	r5, [r3, #8]
		result = EditValue(0xFF, &property);
 80053fc:	f001 fc9a 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 8005400:	2301      	movs	r3, #1
	if (result == 1) {
 8005402:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005404:	7023      	strb	r3, [r4, #0]
	if (result == 1) {
 8005406:	d1d7      	bne.n	80053b8 <fast_spped_set+0x18>
		dev_settings.fast_speed = usInpValue;
 8005408:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <fast_spped_set+0x94>)
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <fast_spped_set+0x90>)
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	9001      	str	r0, [sp, #4]
 8005410:	609a      	str	r2, [r3, #8]
		dev_settings_save();
 8005412:	f7ff ff43 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005416:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005418:	2300      	movs	r3, #0
 800541a:	7023      	strb	r3, [r4, #0]
}
 800541c:	b003      	add	sp, #12
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	200000e1 	.word	0x200000e1
 8005424:	200006ac 	.word	0x200006ac
 8005428:	200006a8 	.word	0x200006a8
 800542c:	200006a4 	.word	0x200006a4
 8005430:	20000624 	.word	0x20000624
 8005434:	200000e4 	.word	0x200000e4
 8005438:	05020305 	.word	0x05020305

0800543c <turn_spped_set>:

//--------------------------------------------------------------------------

unsigned char turn_spped_set(unsigned char kbd_key) {
 800543c:	b530      	push	{r4, r5, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 800543e:	4c1f      	ldr	r4, [pc, #124]	; (80054bc <turn_spped_set+0x80>)
 8005440:	7823      	ldrb	r3, [r4, #0]
unsigned char turn_spped_set(unsigned char kbd_key) {
 8005442:	b083      	sub	sp, #12
	switch (setup_state) {
 8005444:	b17b      	cbz	r3, 8005466 <turn_spped_set+0x2a>
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10a      	bne.n	8005460 <turn_spped_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 800544a:	491d      	ldr	r1, [pc, #116]	; (80054c0 <turn_spped_set+0x84>)
 800544c:	f001 fc72 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005450:	2801      	cmp	r0, #1
 8005452:	d026      	beq.n	80054a2 <turn_spped_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005454:	2802      	cmp	r0, #2
 8005456:	d103      	bne.n	8005460 <turn_spped_set+0x24>
		setup_state = ST_ECR_INIT;
 8005458:	2300      	movs	r3, #0
 800545a:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 800545c:	b003      	add	sp, #12
 800545e:	bd30      	pop	{r4, r5, pc}
	return 0;
 8005460:	2000      	movs	r0, #0
}
 8005462:	b003      	add	sp, #12
 8005464:	bd30      	pop	{r4, r5, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005466:	4917      	ldr	r1, [pc, #92]	; (80054c4 <turn_spped_set+0x88>)
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <turn_spped_set+0x8c>)
 800546a:	780d      	ldrb	r5, [r1, #0]
 800546c:	6811      	ldr	r1, [r2, #0]
		property.pucValue = (char*) &usInpValue;
 800546e:	4a14      	ldr	r2, [pc, #80]	; (80054c0 <turn_spped_set+0x84>)
		usInpValue = dev_settings.turn_speed;
 8005470:	4816      	ldr	r0, [pc, #88]	; (80054cc <turn_spped_set+0x90>)
		property.uiMinValue = 0;
 8005472:	61d3      	str	r3, [r2, #28]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005474:	eb01 1305 	add.w	r3, r1, r5, lsl #4
		property.ucFractSize = 5; // input step
 8005478:	f240 1103 	movw	r1, #259	; 0x103
 800547c:	8091      	strh	r1, [r2, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800547e:	685b      	ldr	r3, [r3, #4]
		usInpValue = dev_settings.turn_speed;
 8005480:	4d13      	ldr	r5, [pc, #76]	; (80054d0 <turn_spped_set+0x94>)
 8005482:	68c0      	ldr	r0, [r0, #12]
		property.x_pos = 5;
 8005484:	4913      	ldr	r1, [pc, #76]	; (80054d4 <turn_spped_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005486:	60d3      	str	r3, [r2, #12]
		property.uiMaxValue = 255;
 8005488:	23ff      	movs	r3, #255	; 0xff
		property.x_pos = 5;
 800548a:	6011      	str	r1, [r2, #0]
		usInpValue = dev_settings.turn_speed;
 800548c:	6028      	str	r0, [r5, #0]
		result = EditValue(0xFF, &property);
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
		property.uiMaxValue = 255;
 8005492:	6193      	str	r3, [r2, #24]
		property.pucValue = (char*) &usInpValue;
 8005494:	6095      	str	r5, [r2, #8]
		result = EditValue(0xFF, &property);
 8005496:	f001 fc4d 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 800549a:	2301      	movs	r3, #1
	if (result == 1) {
 800549c:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 800549e:	7023      	strb	r3, [r4, #0]
	if (result == 1) {
 80054a0:	d1d8      	bne.n	8005454 <turn_spped_set+0x18>
		dev_settings.turn_speed = usInpValue;
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <turn_spped_set+0x94>)
 80054a4:	4b09      	ldr	r3, [pc, #36]	; (80054cc <turn_spped_set+0x90>)
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	9001      	str	r0, [sp, #4]
 80054aa:	60da      	str	r2, [r3, #12]
		dev_settings_save();
 80054ac:	f7ff fef6 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 80054b0:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 80054b2:	2300      	movs	r3, #0
 80054b4:	7023      	strb	r3, [r4, #0]
}
 80054b6:	b003      	add	sp, #12
 80054b8:	bd30      	pop	{r4, r5, pc}
 80054ba:	bf00      	nop
 80054bc:	200000e1 	.word	0x200000e1
 80054c0:	200006ac 	.word	0x200006ac
 80054c4:	200006a8 	.word	0x200006a8
 80054c8:	200006a4 	.word	0x200006a4
 80054cc:	20000624 	.word	0x20000624
 80054d0:	200000e4 	.word	0x200000e4
 80054d4:	05020305 	.word	0x05020305

080054d8 <uturn_spped_set>:

//--------------------------------------------------------------------------

unsigned char uturn_spped_set(unsigned char kbd_key) {
 80054d8:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 80054da:	4c1f      	ldr	r4, [pc, #124]	; (8005558 <uturn_spped_set+0x80>)
 80054dc:	7823      	ldrb	r3, [r4, #0]
unsigned char uturn_spped_set(unsigned char kbd_key) {
 80054de:	b082      	sub	sp, #8
	switch (setup_state) {
 80054e0:	b17b      	cbz	r3, 8005502 <uturn_spped_set+0x2a>
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10a      	bne.n	80054fc <uturn_spped_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 80054e6:	491d      	ldr	r1, [pc, #116]	; (800555c <uturn_spped_set+0x84>)
 80054e8:	f001 fc24 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 80054ec:	2801      	cmp	r0, #1
 80054ee:	d027      	beq.n	8005540 <uturn_spped_set+0x68>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 80054f0:	2802      	cmp	r0, #2
 80054f2:	d103      	bne.n	80054fc <uturn_spped_set+0x24>
		setup_state = ST_ECR_INIT;
 80054f4:	2300      	movs	r3, #0
 80054f6:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 80054f8:	b002      	add	sp, #8
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80054fc:	2000      	movs	r0, #0
}
 80054fe:	b002      	add	sp, #8
 8005500:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <uturn_spped_set+0x88>)
 8005504:	4b17      	ldr	r3, [pc, #92]	; (8005564 <uturn_spped_set+0x8c>)
 8005506:	7811      	ldrb	r1, [r2, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
		property.pucValue = (char*) &usInpValue;
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <uturn_spped_set+0x84>)
		usInpValue = dev_settings.uturn_speed;
 800550c:	4816      	ldr	r0, [pc, #88]	; (8005568 <uturn_spped_set+0x90>)
 800550e:	4e17      	ldr	r6, [pc, #92]	; (800556c <uturn_spped_set+0x94>)
 8005510:	6900      	ldr	r0, [r0, #16]
 8005512:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005514:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 5; // input step
 8005518:	f240 1103 	movw	r1, #259	; 0x103
 800551c:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800551e:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005520:	4913      	ldr	r1, [pc, #76]	; (8005570 <uturn_spped_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005522:	60da      	str	r2, [r3, #12]
		property.uiMaxValue = 255;
 8005524:	25ff      	movs	r5, #255	; 0xff
		property.x_pos = 5;
 8005526:	6019      	str	r1, [r3, #0]
		property.uiMinValue = 40;
 8005528:	2228      	movs	r2, #40	; 0x28
		result = EditValue(0xFF, &property);
 800552a:	4619      	mov	r1, r3
 800552c:	4628      	mov	r0, r5
		property.uiMinValue = 40;
 800552e:	61da      	str	r2, [r3, #28]
		property.pucValue = (char*) &usInpValue;
 8005530:	609e      	str	r6, [r3, #8]
		property.uiMaxValue = 255;
 8005532:	619d      	str	r5, [r3, #24]
		result = EditValue(0xFF, &property);
 8005534:	f001 fbfe 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 8005538:	2301      	movs	r3, #1
	if (result == 1) {
 800553a:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 800553c:	7023      	strb	r3, [r4, #0]
	if (result == 1) {
 800553e:	d1d7      	bne.n	80054f0 <uturn_spped_set+0x18>
		dev_settings.uturn_speed = usInpValue;
 8005540:	4a0a      	ldr	r2, [pc, #40]	; (800556c <uturn_spped_set+0x94>)
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <uturn_spped_set+0x90>)
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	9001      	str	r0, [sp, #4]
 8005548:	611a      	str	r2, [r3, #16]
		dev_settings_save();
 800554a:	f7ff fea7 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 800554e:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005550:	2300      	movs	r3, #0
 8005552:	7023      	strb	r3, [r4, #0]
}
 8005554:	b002      	add	sp, #8
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	200000e1 	.word	0x200000e1
 800555c:	200006ac 	.word	0x200006ac
 8005560:	200006a8 	.word	0x200006a8
 8005564:	200006a4 	.word	0x200006a4
 8005568:	20000624 	.word	0x20000624
 800556c:	200000e4 	.word	0x200000e4
 8005570:	05020305 	.word	0x05020305

08005574 <starting_spped_set>:

//--------------------------------------------------------------------------

unsigned char starting_spped_set(unsigned char kbd_key) {
 8005574:	b530      	push	{r4, r5, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005576:	4c1f      	ldr	r4, [pc, #124]	; (80055f4 <starting_spped_set+0x80>)
 8005578:	7823      	ldrb	r3, [r4, #0]
unsigned char starting_spped_set(unsigned char kbd_key) {
 800557a:	b083      	sub	sp, #12
	switch (setup_state) {
 800557c:	b17b      	cbz	r3, 800559e <starting_spped_set+0x2a>
 800557e:	2b01      	cmp	r3, #1
 8005580:	d10a      	bne.n	8005598 <starting_spped_set+0x24>
		result = EditValue(0xFF, &property);
		setup_state = ST_ECR_INPUT;
		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005582:	491d      	ldr	r1, [pc, #116]	; (80055f8 <starting_spped_set+0x84>)
 8005584:	f001 fbd6 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005588:	2801      	cmp	r0, #1
 800558a:	d027      	beq.n	80055dc <starting_spped_set+0x68>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 800558c:	2802      	cmp	r0, #2
 800558e:	d103      	bne.n	8005598 <starting_spped_set+0x24>
		setup_state = ST_ECR_INIT;
 8005590:	2300      	movs	r3, #0
 8005592:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005594:	b003      	add	sp, #12
 8005596:	bd30      	pop	{r4, r5, pc}
	return 0;
 8005598:	2000      	movs	r0, #0
}
 800559a:	b003      	add	sp, #12
 800559c:	bd30      	pop	{r4, r5, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800559e:	4a17      	ldr	r2, [pc, #92]	; (80055fc <starting_spped_set+0x88>)
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <starting_spped_set+0x8c>)
 80055a2:	7811      	ldrb	r1, [r2, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.starting_speed;
 80055a6:	4817      	ldr	r0, [pc, #92]	; (8005604 <starting_spped_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <starting_spped_set+0x84>)
		usInpValue = dev_settings.starting_speed;
 80055aa:	4d17      	ldr	r5, [pc, #92]	; (8005608 <starting_spped_set+0x94>)
 80055ac:	6940      	ldr	r0, [r0, #20]
 80055ae:	6028      	str	r0, [r5, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80055b0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 5; // input step
 80055b4:	f240 1103 	movw	r1, #259	; 0x103
 80055b8:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80055ba:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 80055bc:	4913      	ldr	r1, [pc, #76]	; (800560c <starting_spped_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80055be:	60da      	str	r2, [r3, #12]
		property.uiMinValue = 30;
 80055c0:	201e      	movs	r0, #30
		property.x_pos = 5;
 80055c2:	6019      	str	r1, [r3, #0]
		property.uiMinValue = 30;
 80055c4:	61d8      	str	r0, [r3, #28]
		property.uiMaxValue = 150;
 80055c6:	2296      	movs	r2, #150	; 0x96
		result = EditValue(0xFF, &property);
 80055c8:	4619      	mov	r1, r3
 80055ca:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 150;
 80055cc:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 80055ce:	609d      	str	r5, [r3, #8]
		result = EditValue(0xFF, &property);
 80055d0:	f001 fbb0 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 80055d4:	2301      	movs	r3, #1
	if (result == 1) {
 80055d6:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 80055d8:	7023      	strb	r3, [r4, #0]
	if (result == 1) {
 80055da:	d1d7      	bne.n	800558c <starting_spped_set+0x18>
		dev_settings.starting_speed = usInpValue;
 80055dc:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <starting_spped_set+0x94>)
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <starting_spped_set+0x90>)
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	9001      	str	r0, [sp, #4]
 80055e4:	615a      	str	r2, [r3, #20]
		dev_settings_save();
 80055e6:	f7ff fe59 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back with new value in the buffer
 80055ea:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 80055ec:	2300      	movs	r3, #0
 80055ee:	7023      	strb	r3, [r4, #0]
}
 80055f0:	b003      	add	sp, #12
 80055f2:	bd30      	pop	{r4, r5, pc}
 80055f4:	200000e1 	.word	0x200000e1
 80055f8:	200006ac 	.word	0x200006ac
 80055fc:	200006a8 	.word	0x200006a8
 8005600:	200006a4 	.word	0x200006a4
 8005604:	20000624 	.word	0x20000624
 8005608:	200000e4 	.word	0x200000e4
 800560c:	05020305 	.word	0x05020305

08005610 <stopping_spped_set>:

//--------------------------------------------------------------------------

unsigned char stopping_spped_set(unsigned char kbd_key) {
 8005610:	b530      	push	{r4, r5, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005612:	4c1f      	ldr	r4, [pc, #124]	; (8005690 <stopping_spped_set+0x80>)
 8005614:	7823      	ldrb	r3, [r4, #0]
unsigned char stopping_spped_set(unsigned char kbd_key) {
 8005616:	b083      	sub	sp, #12
	switch (setup_state) {
 8005618:	b17b      	cbz	r3, 800563a <stopping_spped_set+0x2a>
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10a      	bne.n	8005634 <stopping_spped_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 800561e:	491d      	ldr	r1, [pc, #116]	; (8005694 <stopping_spped_set+0x84>)
 8005620:	f001 fb88 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005624:	2801      	cmp	r0, #1
 8005626:	d027      	beq.n	8005678 <stopping_spped_set+0x68>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005628:	2802      	cmp	r0, #2
 800562a:	d103      	bne.n	8005634 <stopping_spped_set+0x24>
		setup_state = ST_ECR_INIT;
 800562c:	2300      	movs	r3, #0
 800562e:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005630:	b003      	add	sp, #12
 8005632:	bd30      	pop	{r4, r5, pc}
	return 0;
 8005634:	2000      	movs	r0, #0
}
 8005636:	b003      	add	sp, #12
 8005638:	bd30      	pop	{r4, r5, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <stopping_spped_set+0x88>)
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <stopping_spped_set+0x8c>)
 800563e:	7811      	ldrb	r1, [r2, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.stopping_speed;
 8005642:	4817      	ldr	r0, [pc, #92]	; (80056a0 <stopping_spped_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005644:	4b13      	ldr	r3, [pc, #76]	; (8005694 <stopping_spped_set+0x84>)
		usInpValue = dev_settings.stopping_speed;
 8005646:	4d17      	ldr	r5, [pc, #92]	; (80056a4 <stopping_spped_set+0x94>)
 8005648:	6980      	ldr	r0, [r0, #24]
 800564a:	6028      	str	r0, [r5, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800564c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 5; // input step
 8005650:	f240 1103 	movw	r1, #259	; 0x103
 8005654:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005656:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005658:	4913      	ldr	r1, [pc, #76]	; (80056a8 <stopping_spped_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800565a:	60da      	str	r2, [r3, #12]
		property.uiMinValue = 20;
 800565c:	2014      	movs	r0, #20
		property.x_pos = 5;
 800565e:	6019      	str	r1, [r3, #0]
		property.uiMinValue = 20;
 8005660:	61d8      	str	r0, [r3, #28]
		property.uiMaxValue = 200;
 8005662:	22c8      	movs	r2, #200	; 0xc8
		result = EditValue(0xFF, &property);
 8005664:	4619      	mov	r1, r3
 8005666:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 8005668:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 800566a:	609d      	str	r5, [r3, #8]
		result = EditValue(0xFF, &property);
 800566c:	f001 fb62 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 8005670:	2301      	movs	r3, #1
	if (result == 1) {
 8005672:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005674:	7023      	strb	r3, [r4, #0]
	if (result == 1) {
 8005676:	d1d7      	bne.n	8005628 <stopping_spped_set+0x18>
		dev_settings.stopping_speed = usInpValue;
 8005678:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <stopping_spped_set+0x94>)
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <stopping_spped_set+0x90>)
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	9001      	str	r0, [sp, #4]
 8005680:	619a      	str	r2, [r3, #24]
		dev_settings_save();
 8005682:	f7ff fe0b 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005686:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005688:	2300      	movs	r3, #0
 800568a:	7023      	strb	r3, [r4, #0]
}
 800568c:	b003      	add	sp, #12
 800568e:	bd30      	pop	{r4, r5, pc}
 8005690:	200000e1 	.word	0x200000e1
 8005694:	200006ac 	.word	0x200006ac
 8005698:	200006a8 	.word	0x200006a8
 800569c:	200006a4 	.word	0x200006a4
 80056a0:	20000624 	.word	0x20000624
 80056a4:	200000e4 	.word	0x200000e4
 80056a8:	05020305 	.word	0x05020305

080056ac <ramp_set>:

//--------------------------------------------------------------------------

unsigned char ramp_set(unsigned char kbd_key) {
 80056ac:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 80056ae:	4c1f      	ldr	r4, [pc, #124]	; (800572c <ramp_set+0x80>)
 80056b0:	7823      	ldrb	r3, [r4, #0]
unsigned char ramp_set(unsigned char kbd_key) {
 80056b2:	b082      	sub	sp, #8
	switch (setup_state) {
 80056b4:	b17b      	cbz	r3, 80056d6 <ramp_set+0x2a>
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10a      	bne.n	80056d0 <ramp_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 80056ba:	491d      	ldr	r1, [pc, #116]	; (8005730 <ramp_set+0x84>)
 80056bc:	f001 fb3a 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 80056c0:	2801      	cmp	r0, #1
 80056c2:	d026      	beq.n	8005712 <ramp_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 80056c4:	2802      	cmp	r0, #2
 80056c6:	d103      	bne.n	80056d0 <ramp_set+0x24>
		setup_state = ST_ECR_INIT;
 80056c8:	2300      	movs	r3, #0
 80056ca:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 80056cc:	b002      	add	sp, #8
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80056d0:	2000      	movs	r0, #0
}
 80056d2:	b002      	add	sp, #8
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80056d6:	4a17      	ldr	r2, [pc, #92]	; (8005734 <ramp_set+0x88>)
 80056d8:	4b17      	ldr	r3, [pc, #92]	; (8005738 <ramp_set+0x8c>)
 80056da:	7811      	ldrb	r1, [r2, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.ramp;
 80056de:	4817      	ldr	r0, [pc, #92]	; (800573c <ramp_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <ramp_set+0x84>)
		usInpValue = dev_settings.ramp;
 80056e2:	4e17      	ldr	r6, [pc, #92]	; (8005740 <ramp_set+0x94>)
 80056e4:	69c0      	ldr	r0, [r0, #28]
 80056e6:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80056e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 5; // input step
 80056ec:	f240 1103 	movw	r1, #259	; 0x103
 80056f0:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80056f2:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 80056f4:	4813      	ldr	r0, [pc, #76]	; (8005744 <ramp_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80056f6:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 80056f8:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 200;
 80056fa:	22c8      	movs	r2, #200	; 0xc8
		property.uiMinValue = 1;
 80056fc:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 80056fe:	4619      	mov	r1, r3
 8005700:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 8005702:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005704:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005706:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005708:	f001 fb14 	bl	8006d34 <EditValue>
	if (result == 1) {
 800570c:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 800570e:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005710:	d1d8      	bne.n	80056c4 <ramp_set+0x18>
		dev_settings.ramp = usInpValue;
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <ramp_set+0x94>)
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <ramp_set+0x90>)
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	9001      	str	r0, [sp, #4]
 800571a:	61da      	str	r2, [r3, #28]
		dev_settings_save();
 800571c:	f7ff fdbe 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005720:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005722:	2300      	movs	r3, #0
 8005724:	7023      	strb	r3, [r4, #0]
}
 8005726:	b002      	add	sp, #8
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	bf00      	nop
 800572c:	200000e1 	.word	0x200000e1
 8005730:	200006ac 	.word	0x200006ac
 8005734:	200006a8 	.word	0x200006a8
 8005738:	200006a4 	.word	0x200006a4
 800573c:	20000624 	.word	0x20000624
 8005740:	200000e4 	.word	0x200000e4
 8005744:	05010305 	.word	0x05010305

08005748 <turn_clamp_set>:

//--------------------------------------------------------------------------

unsigned char turn_clamp_set(unsigned char kbd_key) {
 8005748:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 800574a:	4c1f      	ldr	r4, [pc, #124]	; (80057c8 <turn_clamp_set+0x80>)
 800574c:	7823      	ldrb	r3, [r4, #0]
unsigned char turn_clamp_set(unsigned char kbd_key) {
 800574e:	b082      	sub	sp, #8
	switch (setup_state) {
 8005750:	b17b      	cbz	r3, 8005772 <turn_clamp_set+0x2a>
 8005752:	2b01      	cmp	r3, #1
 8005754:	d10a      	bne.n	800576c <turn_clamp_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005756:	491d      	ldr	r1, [pc, #116]	; (80057cc <turn_clamp_set+0x84>)
 8005758:	f001 faec 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 800575c:	2801      	cmp	r0, #1
 800575e:	d026      	beq.n	80057ae <turn_clamp_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005760:	2802      	cmp	r0, #2
 8005762:	d103      	bne.n	800576c <turn_clamp_set+0x24>
		setup_state = ST_ECR_INIT;
 8005764:	2300      	movs	r3, #0
 8005766:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005768:	b002      	add	sp, #8
 800576a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 800576c:	2000      	movs	r0, #0
}
 800576e:	b002      	add	sp, #8
 8005770:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005772:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <turn_clamp_set+0x88>)
 8005774:	4b17      	ldr	r3, [pc, #92]	; (80057d4 <turn_clamp_set+0x8c>)
 8005776:	7811      	ldrb	r1, [r2, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
		property.pucValue = (char*) &usInpValue;
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <turn_clamp_set+0x84>)
		usInpValue = dev_settings.turn_clamp;
 800577c:	4d16      	ldr	r5, [pc, #88]	; (80057d8 <turn_clamp_set+0x90>)
 800577e:	4817      	ldr	r0, [pc, #92]	; (80057dc <turn_clamp_set+0x94>)
 8005780:	6a2d      	ldr	r5, [r5, #32]
 8005782:	6005      	str	r5, [r0, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005784:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 8005788:	f240 1103 	movw	r1, #259	; 0x103
 800578c:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800578e:	6851      	ldr	r1, [r2, #4]
		property.x_pos = 5;
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <turn_clamp_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005792:	60d9      	str	r1, [r3, #12]
		property.uiMaxValue = 255;
 8005794:	26ff      	movs	r6, #255	; 0xff
		property.uiMinValue = 1;
 8005796:	2501      	movs	r5, #1
		property.pucValue = (char*) &usInpValue;
 8005798:	6098      	str	r0, [r3, #8]
		result = EditValue(0xFF, &property);
 800579a:	4619      	mov	r1, r3
		property.x_pos = 5;
 800579c:	601a      	str	r2, [r3, #0]
		result = EditValue(0xFF, &property);
 800579e:	4630      	mov	r0, r6
		property.uiMaxValue = 255;
 80057a0:	e9c3 6506 	strd	r6, r5, [r3, #24]
		result = EditValue(0xFF, &property);
 80057a4:	f001 fac6 	bl	8006d34 <EditValue>
	if (result == 1) {
 80057a8:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 80057aa:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 80057ac:	d1d8      	bne.n	8005760 <turn_clamp_set+0x18>
		dev_settings.turn_clamp = usInpValue;
 80057ae:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <turn_clamp_set+0x94>)
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <turn_clamp_set+0x90>)
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	9001      	str	r0, [sp, #4]
 80057b6:	621a      	str	r2, [r3, #32]
		dev_settings_save();
 80057b8:	f7ff fd70 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 80057bc:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 80057be:	2300      	movs	r3, #0
 80057c0:	7023      	strb	r3, [r4, #0]
}
 80057c2:	b002      	add	sp, #8
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	bf00      	nop
 80057c8:	200000e1 	.word	0x200000e1
 80057cc:	200006ac 	.word	0x200006ac
 80057d0:	200006a8 	.word	0x200006a8
 80057d4:	200006a4 	.word	0x200006a4
 80057d8:	20000624 	.word	0x20000624
 80057dc:	200000e4 	.word	0x200000e4
 80057e0:	01010305 	.word	0x01010305

080057e4 <kp_set>:

//--------------------------------------------------------------------------

unsigned char kp_set(unsigned char kbd_key) {
 80057e4:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 80057e6:	4c1f      	ldr	r4, [pc, #124]	; (8005864 <kp_set+0x80>)
 80057e8:	7823      	ldrb	r3, [r4, #0]
unsigned char kp_set(unsigned char kbd_key) {
 80057ea:	b082      	sub	sp, #8
	switch (setup_state) {
 80057ec:	b17b      	cbz	r3, 800580e <kp_set+0x2a>
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d10a      	bne.n	8005808 <kp_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 80057f2:	491d      	ldr	r1, [pc, #116]	; (8005868 <kp_set+0x84>)
 80057f4:	f001 fa9e 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 80057f8:	2801      	cmp	r0, #1
 80057fa:	d026      	beq.n	800584a <kp_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 80057fc:	2802      	cmp	r0, #2
 80057fe:	d103      	bne.n	8005808 <kp_set+0x24>
		setup_state = ST_ECR_INIT;
 8005800:	2300      	movs	r3, #0
 8005802:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005804:	b002      	add	sp, #8
 8005806:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005808:	2000      	movs	r0, #0
}
 800580a:	b002      	add	sp, #8
 800580c:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <kp_set+0x88>)
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <kp_set+0x8c>)
 8005812:	7811      	ldrb	r1, [r2, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.kp;
 8005816:	4817      	ldr	r0, [pc, #92]	; (8005874 <kp_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <kp_set+0x84>)
		usInpValue = dev_settings.kp;
 800581a:	4e17      	ldr	r6, [pc, #92]	; (8005878 <kp_set+0x94>)
 800581c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800581e:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005820:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 8005824:	f240 1103 	movw	r1, #259	; 0x103
 8005828:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800582a:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 800582c:	4813      	ldr	r0, [pc, #76]	; (800587c <kp_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800582e:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005830:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 50;
 8005832:	2232      	movs	r2, #50	; 0x32
		property.uiMinValue = 1;
 8005834:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005836:	4619      	mov	r1, r3
 8005838:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 50;
 800583a:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 800583c:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 800583e:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005840:	f001 fa78 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005844:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005846:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005848:	d1d8      	bne.n	80057fc <kp_set+0x18>
		dev_settings.kp = usInpValue;
 800584a:	4a0b      	ldr	r2, [pc, #44]	; (8005878 <kp_set+0x94>)
 800584c:	4b09      	ldr	r3, [pc, #36]	; (8005874 <kp_set+0x90>)
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	9001      	str	r0, [sp, #4]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
		dev_settings_save();
 8005854:	f7ff fd22 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005858:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 800585a:	2300      	movs	r3, #0
 800585c:	7023      	strb	r3, [r4, #0]
}
 800585e:	b002      	add	sp, #8
 8005860:	bd70      	pop	{r4, r5, r6, pc}
 8005862:	bf00      	nop
 8005864:	200000e1 	.word	0x200000e1
 8005868:	200006ac 	.word	0x200006ac
 800586c:	200006a8 	.word	0x200006a8
 8005870:	200006a4 	.word	0x200006a4
 8005874:	20000624 	.word	0x20000624
 8005878:	200000e4 	.word	0x200000e4
 800587c:	01010305 	.word	0x01010305

08005880 <kd_set>:

//--------------------------------------------------------------------------

unsigned char kd_set(unsigned char kbd_key) {
 8005880:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005882:	4c1f      	ldr	r4, [pc, #124]	; (8005900 <kd_set+0x80>)
 8005884:	7823      	ldrb	r3, [r4, #0]
unsigned char kd_set(unsigned char kbd_key) {
 8005886:	b082      	sub	sp, #8
	switch (setup_state) {
 8005888:	b17b      	cbz	r3, 80058aa <kd_set+0x2a>
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10a      	bne.n	80058a4 <kd_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 800588e:	491d      	ldr	r1, [pc, #116]	; (8005904 <kd_set+0x84>)
 8005890:	f001 fa50 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005894:	2801      	cmp	r0, #1
 8005896:	d026      	beq.n	80058e6 <kd_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005898:	2802      	cmp	r0, #2
 800589a:	d103      	bne.n	80058a4 <kd_set+0x24>
		setup_state = ST_ECR_INIT;
 800589c:	2300      	movs	r3, #0
 800589e:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 80058a0:	b002      	add	sp, #8
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80058a4:	2000      	movs	r0, #0
}
 80058a6:	b002      	add	sp, #8
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <kd_set+0x88>)
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <kd_set+0x8c>)
 80058ae:	7811      	ldrb	r1, [r2, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.kd;
 80058b2:	4817      	ldr	r0, [pc, #92]	; (8005910 <kd_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 80058b4:	4b13      	ldr	r3, [pc, #76]	; (8005904 <kd_set+0x84>)
		usInpValue = dev_settings.kd;
 80058b6:	4e17      	ldr	r6, [pc, #92]	; (8005914 <kd_set+0x94>)
 80058b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80058ba:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80058bc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 80058c0:	f240 1103 	movw	r1, #259	; 0x103
 80058c4:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80058c6:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 80058c8:	4813      	ldr	r0, [pc, #76]	; (8005918 <kd_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80058ca:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 80058cc:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 200;
 80058ce:	22c8      	movs	r2, #200	; 0xc8
		property.uiMinValue = 1;
 80058d0:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 80058d2:	4619      	mov	r1, r3
 80058d4:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 80058d6:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 80058d8:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 80058da:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 80058dc:	f001 fa2a 	bl	8006d34 <EditValue>
	if (result == 1) {
 80058e0:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 80058e2:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 80058e4:	d1d8      	bne.n	8005898 <kd_set+0x18>
		dev_settings.kd = usInpValue;
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <kd_set+0x94>)
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <kd_set+0x90>)
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	9001      	str	r0, [sp, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
		dev_settings_save();
 80058f0:	f7ff fcd4 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 80058f4:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 80058f6:	2300      	movs	r3, #0
 80058f8:	7023      	strb	r3, [r4, #0]
}
 80058fa:	b002      	add	sp, #8
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	bf00      	nop
 8005900:	200000e1 	.word	0x200000e1
 8005904:	200006ac 	.word	0x200006ac
 8005908:	200006a8 	.word	0x200006a8
 800590c:	200006a4 	.word	0x200006a4
 8005910:	20000624 	.word	0x20000624
 8005914:	200000e4 	.word	0x200000e4
 8005918:	01010305 	.word	0x01010305

0800591c <ki_set>:

//--------------------------------------------------------------------------

unsigned char ki_set(unsigned char kbd_key) {
 800591c:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 800591e:	4c1f      	ldr	r4, [pc, #124]	; (800599c <ki_set+0x80>)
 8005920:	7823      	ldrb	r3, [r4, #0]
unsigned char ki_set(unsigned char kbd_key) {
 8005922:	b082      	sub	sp, #8
	switch (setup_state) {
 8005924:	b17b      	cbz	r3, 8005946 <ki_set+0x2a>
 8005926:	2b01      	cmp	r3, #1
 8005928:	d10a      	bne.n	8005940 <ki_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 800592a:	491d      	ldr	r1, [pc, #116]	; (80059a0 <ki_set+0x84>)
 800592c:	f001 fa02 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005930:	2801      	cmp	r0, #1
 8005932:	d026      	beq.n	8005982 <ki_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005934:	2802      	cmp	r0, #2
 8005936:	d103      	bne.n	8005940 <ki_set+0x24>
		setup_state = ST_ECR_INIT;
 8005938:	2300      	movs	r3, #0
 800593a:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 800593c:	b002      	add	sp, #8
 800593e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005940:	2000      	movs	r0, #0
}
 8005942:	b002      	add	sp, #8
 8005944:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005946:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <ki_set+0x88>)
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <ki_set+0x8c>)
 800594a:	7811      	ldrb	r1, [r2, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.ki;
 800594e:	4817      	ldr	r0, [pc, #92]	; (80059ac <ki_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005950:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <ki_set+0x84>)
		usInpValue = dev_settings.ki;
 8005952:	4e17      	ldr	r6, [pc, #92]	; (80059b0 <ki_set+0x94>)
 8005954:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005956:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005958:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 800595c:	f240 1103 	movw	r1, #259	; 0x103
 8005960:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005962:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005964:	4813      	ldr	r0, [pc, #76]	; (80059b4 <ki_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005966:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005968:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 200;
 800596a:	22c8      	movs	r2, #200	; 0xc8
		property.uiMinValue = 1;
 800596c:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 800596e:	4619      	mov	r1, r3
 8005970:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 8005972:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005974:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005976:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005978:	f001 f9dc 	bl	8006d34 <EditValue>
	if (result == 1) {
 800597c:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 800597e:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005980:	d1d8      	bne.n	8005934 <ki_set+0x18>
		dev_settings.ki = usInpValue;
 8005982:	4a0b      	ldr	r2, [pc, #44]	; (80059b0 <ki_set+0x94>)
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <ki_set+0x90>)
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	9001      	str	r0, [sp, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c
		dev_settings_save();
 800598c:	f7ff fc86 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005990:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005992:	2300      	movs	r3, #0
 8005994:	7023      	strb	r3, [r4, #0]
}
 8005996:	b002      	add	sp, #8
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	bf00      	nop
 800599c:	200000e1 	.word	0x200000e1
 80059a0:	200006ac 	.word	0x200006ac
 80059a4:	200006a8 	.word	0x200006a8
 80059a8:	200006a4 	.word	0x200006a4
 80059ac:	20000624 	.word	0x20000624
 80059b0:	200000e4 	.word	0x200000e4
 80059b4:	01010305 	.word	0x01010305

080059b8 <wkp_set>:

//===========================================================================
//--------------------------------------------------------------------------

unsigned char wkp_set(unsigned char kbd_key) {
 80059b8:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 80059ba:	4c1f      	ldr	r4, [pc, #124]	; (8005a38 <wkp_set+0x80>)
 80059bc:	7823      	ldrb	r3, [r4, #0]
unsigned char wkp_set(unsigned char kbd_key) {
 80059be:	b082      	sub	sp, #8
	switch (setup_state) {
 80059c0:	b17b      	cbz	r3, 80059e2 <wkp_set+0x2a>
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10a      	bne.n	80059dc <wkp_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 80059c6:	491d      	ldr	r1, [pc, #116]	; (8005a3c <wkp_set+0x84>)
 80059c8:	f001 f9b4 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 80059cc:	2801      	cmp	r0, #1
 80059ce:	d026      	beq.n	8005a1e <wkp_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 80059d0:	2802      	cmp	r0, #2
 80059d2:	d103      	bne.n	80059dc <wkp_set+0x24>
		setup_state = ST_ECR_INIT;
 80059d4:	2300      	movs	r3, #0
 80059d6:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 80059d8:	b002      	add	sp, #8
 80059da:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80059dc:	2000      	movs	r0, #0
}
 80059de:	b002      	add	sp, #8
 80059e0:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <wkp_set+0x88>)
 80059e4:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <wkp_set+0x8c>)
 80059e6:	7811      	ldrb	r1, [r2, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.wkp;
 80059ea:	4817      	ldr	r0, [pc, #92]	; (8005a48 <wkp_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 80059ec:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <wkp_set+0x84>)
		usInpValue = dev_settings.wkp;
 80059ee:	4e17      	ldr	r6, [pc, #92]	; (8005a4c <wkp_set+0x94>)
 80059f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80059f2:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80059f4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 80059f8:	f240 1103 	movw	r1, #259	; 0x103
 80059fc:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80059fe:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005a00:	4813      	ldr	r0, [pc, #76]	; (8005a50 <wkp_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005a02:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005a04:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 50;
 8005a06:	2232      	movs	r2, #50	; 0x32
		property.uiMinValue = 1;
 8005a08:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 50;
 8005a0e:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005a10:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005a12:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005a14:	f001 f98e 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005a18:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005a1a:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005a1c:	d1d8      	bne.n	80059d0 <wkp_set+0x18>
		dev_settings.wkp = usInpValue;
 8005a1e:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <wkp_set+0x94>)
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <wkp_set+0x90>)
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	9001      	str	r0, [sp, #4]
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
		dev_settings_save();
 8005a28:	f7ff fc38 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005a2c:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	7023      	strb	r3, [r4, #0]
}
 8005a32:	b002      	add	sp, #8
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
 8005a36:	bf00      	nop
 8005a38:	200000e1 	.word	0x200000e1
 8005a3c:	200006ac 	.word	0x200006ac
 8005a40:	200006a8 	.word	0x200006a8
 8005a44:	200006a4 	.word	0x200006a4
 8005a48:	20000624 	.word	0x20000624
 8005a4c:	200000e4 	.word	0x200000e4
 8005a50:	01010305 	.word	0x01010305

08005a54 <wkd_set>:

//--------------------------------------------------------------------------

unsigned char wkd_set(unsigned char kbd_key) {
 8005a54:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005a56:	4c1f      	ldr	r4, [pc, #124]	; (8005ad4 <wkd_set+0x80>)
 8005a58:	7823      	ldrb	r3, [r4, #0]
unsigned char wkd_set(unsigned char kbd_key) {
 8005a5a:	b082      	sub	sp, #8
	switch (setup_state) {
 8005a5c:	b17b      	cbz	r3, 8005a7e <wkd_set+0x2a>
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10a      	bne.n	8005a78 <wkd_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005a62:	491d      	ldr	r1, [pc, #116]	; (8005ad8 <wkd_set+0x84>)
 8005a64:	f001 f966 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005a68:	2801      	cmp	r0, #1
 8005a6a:	d026      	beq.n	8005aba <wkd_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005a6c:	2802      	cmp	r0, #2
 8005a6e:	d103      	bne.n	8005a78 <wkd_set+0x24>
		setup_state = ST_ECR_INIT;
 8005a70:	2300      	movs	r3, #0
 8005a72:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005a74:	b002      	add	sp, #8
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005a78:	2000      	movs	r0, #0
}
 8005a7a:	b002      	add	sp, #8
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005a7e:	4a17      	ldr	r2, [pc, #92]	; (8005adc <wkd_set+0x88>)
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <wkd_set+0x8c>)
 8005a82:	7811      	ldrb	r1, [r2, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.wkd;
 8005a86:	4817      	ldr	r0, [pc, #92]	; (8005ae4 <wkd_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <wkd_set+0x84>)
		usInpValue = dev_settings.wkd;
 8005a8a:	4e17      	ldr	r6, [pc, #92]	; (8005ae8 <wkd_set+0x94>)
 8005a8c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005a8e:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005a90:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 8005a94:	f240 1103 	movw	r1, #259	; 0x103
 8005a98:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005a9a:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005a9c:	4813      	ldr	r0, [pc, #76]	; (8005aec <wkd_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005a9e:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005aa0:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 200;
 8005aa2:	22c8      	movs	r2, #200	; 0xc8
		property.uiMinValue = 1;
 8005aa4:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 8005aaa:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005aac:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005aae:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005ab0:	f001 f940 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005ab4:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005ab6:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005ab8:	d1d8      	bne.n	8005a6c <wkd_set+0x18>
		dev_settings.wkd = usInpValue;
 8005aba:	4a0b      	ldr	r2, [pc, #44]	; (8005ae8 <wkd_set+0x94>)
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <wkd_set+0x90>)
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	9001      	str	r0, [sp, #4]
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34
		dev_settings_save();
 8005ac4:	f7ff fbea 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005ac8:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005aca:	2300      	movs	r3, #0
 8005acc:	7023      	strb	r3, [r4, #0]
}
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200000e1 	.word	0x200000e1
 8005ad8:	200006ac 	.word	0x200006ac
 8005adc:	200006a8 	.word	0x200006a8
 8005ae0:	200006a4 	.word	0x200006a4
 8005ae4:	20000624 	.word	0x20000624
 8005ae8:	200000e4 	.word	0x200000e4
 8005aec:	01010305 	.word	0x01010305

08005af0 <wki_set>:

//--------------------------------------------------------------------------

unsigned char wki_set(unsigned char kbd_key) {
 8005af0:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005af2:	4c1f      	ldr	r4, [pc, #124]	; (8005b70 <wki_set+0x80>)
 8005af4:	7823      	ldrb	r3, [r4, #0]
unsigned char wki_set(unsigned char kbd_key) {
 8005af6:	b082      	sub	sp, #8
	switch (setup_state) {
 8005af8:	b17b      	cbz	r3, 8005b1a <wki_set+0x2a>
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10a      	bne.n	8005b14 <wki_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005afe:	491d      	ldr	r1, [pc, #116]	; (8005b74 <wki_set+0x84>)
 8005b00:	f001 f918 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005b04:	2801      	cmp	r0, #1
 8005b06:	d026      	beq.n	8005b56 <wki_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005b08:	2802      	cmp	r0, #2
 8005b0a:	d103      	bne.n	8005b14 <wki_set+0x24>
		setup_state = ST_ECR_INIT;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005b10:	b002      	add	sp, #8
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005b14:	2000      	movs	r0, #0
}
 8005b16:	b002      	add	sp, #8
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <wki_set+0x88>)
 8005b1c:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <wki_set+0x8c>)
 8005b1e:	7811      	ldrb	r1, [r2, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
		usInpValue = dev_settings.wki;
 8005b22:	4817      	ldr	r0, [pc, #92]	; (8005b80 <wki_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <wki_set+0x84>)
		usInpValue = dev_settings.wki;
 8005b26:	4e17      	ldr	r6, [pc, #92]	; (8005b84 <wki_set+0x94>)
 8005b28:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b2a:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005b2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 8005b30:	f240 1103 	movw	r1, #259	; 0x103
 8005b34:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005b36:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005b38:	4813      	ldr	r0, [pc, #76]	; (8005b88 <wki_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005b3a:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005b3c:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 200;
 8005b3e:	22c8      	movs	r2, #200	; 0xc8
		property.uiMinValue = 1;
 8005b40:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005b42:	4619      	mov	r1, r3
 8005b44:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 8005b46:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005b48:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005b4a:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005b4c:	f001 f8f2 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005b50:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005b52:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005b54:	d1d8      	bne.n	8005b08 <wki_set+0x18>
		dev_settings.wki = usInpValue;
 8005b56:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <wki_set+0x94>)
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <wki_set+0x90>)
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	9001      	str	r0, [sp, #4]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38
		dev_settings_save();
 8005b60:	f7ff fb9c 	bl	800529c <dev_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005b64:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005b66:	2300      	movs	r3, #0
 8005b68:	7023      	strb	r3, [r4, #0]
}
 8005b6a:	b002      	add	sp, #8
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	bf00      	nop
 8005b70:	200000e1 	.word	0x200000e1
 8005b74:	200006ac 	.word	0x200006ac
 8005b78:	200006a8 	.word	0x200006a8
 8005b7c:	200006a4 	.word	0x200006a4
 8005b80:	20000624 	.word	0x20000624
 8005b84:	200000e4 	.word	0x200000e4
 8005b88:	01010305 	.word	0x01010305

08005b8c <maze_width_set>:
 return 0;
 }
 */

//--------------------------------------------------------------------------
unsigned char maze_width_set(unsigned char kbd_key) {
 8005b8c:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005b8e:	4c1f      	ldr	r4, [pc, #124]	; (8005c0c <maze_width_set+0x80>)
 8005b90:	7823      	ldrb	r3, [r4, #0]
unsigned char maze_width_set(unsigned char kbd_key) {
 8005b92:	b082      	sub	sp, #8
	switch (setup_state) {
 8005b94:	b17b      	cbz	r3, 8005bb6 <maze_width_set+0x2a>
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10a      	bne.n	8005bb0 <maze_width_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005b9a:	491d      	ldr	r1, [pc, #116]	; (8005c10 <maze_width_set+0x84>)
 8005b9c:	f001 f8ca 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005ba0:	2801      	cmp	r0, #1
 8005ba2:	d026      	beq.n	8005bf2 <maze_width_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005ba4:	2802      	cmp	r0, #2
 8005ba6:	d103      	bne.n	8005bb0 <maze_width_set+0x24>
		setup_state = ST_ECR_INIT;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005bac:	b002      	add	sp, #8
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005bb0:	2000      	movs	r0, #0
}
 8005bb2:	b002      	add	sp, #8
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005bb6:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <maze_width_set+0x88>)
 8005bb8:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <maze_width_set+0x8c>)
 8005bba:	7811      	ldrb	r1, [r2, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
		usInpValue = maze_settings.maze_width;
 8005bbe:	4817      	ldr	r0, [pc, #92]	; (8005c1c <maze_width_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005bc0:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <maze_width_set+0x84>)
		usInpValue = maze_settings.maze_width;
 8005bc2:	4e17      	ldr	r6, [pc, #92]	; (8005c20 <maze_width_set+0x94>)
 8005bc4:	6800      	ldr	r0, [r0, #0]
 8005bc6:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005bc8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 1; // input step
 8005bcc:	f240 1103 	movw	r1, #259	; 0x103
 8005bd0:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005bd2:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005bd4:	4813      	ldr	r0, [pc, #76]	; (8005c24 <maze_width_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005bd6:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005bd8:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 50;
 8005bda:	2232      	movs	r2, #50	; 0x32
		property.uiMinValue = 1;
 8005bdc:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005bde:	4619      	mov	r1, r3
 8005be0:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 50;
 8005be2:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005be4:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005be6:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005be8:	f001 f8a4 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005bec:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005bee:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005bf0:	d1d8      	bne.n	8005ba4 <maze_width_set+0x18>
		maze_settings.maze_width = usInpValue;
 8005bf2:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <maze_width_set+0x94>)
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <maze_width_set+0x90>)
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	9001      	str	r0, [sp, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
		maze_settings_save();
 8005bfc:	f7ff fb66 	bl	80052cc <maze_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005c00:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005c02:	2300      	movs	r3, #0
 8005c04:	7023      	strb	r3, [r4, #0]
}
 8005c06:	b002      	add	sp, #8
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200000e1 	.word	0x200000e1
 8005c10:	200006ac 	.word	0x200006ac
 8005c14:	200006a8 	.word	0x200006a8
 8005c18:	200006a4 	.word	0x200006a4
 8005c1c:	2000060c 	.word	0x2000060c
 8005c20:	200000e4 	.word	0x200000e4
 8005c24:	01010305 	.word	0x01010305

08005c28 <gotoEnd_set>:

//--------------------------------------------------------------------------
unsigned char gotoEnd_set(unsigned char kbd_key) {
 8005c28:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005c2a:	4c1f      	ldr	r4, [pc, #124]	; (8005ca8 <gotoEnd_set+0x80>)
 8005c2c:	7823      	ldrb	r3, [r4, #0]
unsigned char gotoEnd_set(unsigned char kbd_key) {
 8005c2e:	b082      	sub	sp, #8
	switch (setup_state) {
 8005c30:	b17b      	cbz	r3, 8005c52 <gotoEnd_set+0x2a>
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10a      	bne.n	8005c4c <gotoEnd_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005c36:	491d      	ldr	r1, [pc, #116]	; (8005cac <gotoEnd_set+0x84>)
 8005c38:	f001 f87c 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005c3c:	2801      	cmp	r0, #1
 8005c3e:	d026      	beq.n	8005c8e <gotoEnd_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005c40:	2802      	cmp	r0, #2
 8005c42:	d103      	bne.n	8005c4c <gotoEnd_set+0x24>
		setup_state = ST_ECR_INIT;
 8005c44:	2300      	movs	r3, #0
 8005c46:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005c4c:	2000      	movs	r0, #0
}
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <gotoEnd_set+0x88>)
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <gotoEnd_set+0x8c>)
 8005c56:	7811      	ldrb	r1, [r2, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
		usInpValue = maze_settings.goto_end_distance;
 8005c5a:	4817      	ldr	r0, [pc, #92]	; (8005cb8 <gotoEnd_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005c5c:	4b13      	ldr	r3, [pc, #76]	; (8005cac <gotoEnd_set+0x84>)
		usInpValue = maze_settings.goto_end_distance;
 8005c5e:	4e17      	ldr	r6, [pc, #92]	; (8005cbc <gotoEnd_set+0x94>)
 8005c60:	68c0      	ldr	r0, [r0, #12]
 8005c62:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005c64:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 10; // input step
 8005c68:	f240 1103 	movw	r1, #259	; 0x103
 8005c6c:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005c6e:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005c70:	4813      	ldr	r0, [pc, #76]	; (8005cc0 <gotoEnd_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005c72:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005c74:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 200;
 8005c76:	22c8      	movs	r2, #200	; 0xc8
		property.uiMinValue = 1;
 8005c78:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200;
 8005c7e:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005c80:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005c82:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005c84:	f001 f856 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005c88:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005c8a:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005c8c:	d1d8      	bne.n	8005c40 <gotoEnd_set+0x18>
		maze_settings.goto_end_distance = usInpValue;
 8005c8e:	4a0b      	ldr	r2, [pc, #44]	; (8005cbc <gotoEnd_set+0x94>)
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <gotoEnd_set+0x90>)
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	9001      	str	r0, [sp, #4]
 8005c96:	60da      	str	r2, [r3, #12]
		maze_settings_save();
 8005c98:	f7ff fb18 	bl	80052cc <maze_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005c9c:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	7023      	strb	r3, [r4, #0]
}
 8005ca2:	b002      	add	sp, #8
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200000e1 	.word	0x200000e1
 8005cac:	200006ac 	.word	0x200006ac
 8005cb0:	200006a8 	.word	0x200006a8
 8005cb4:	200006a4 	.word	0x200006a4
 8005cb8:	2000060c 	.word	0x2000060c
 8005cbc:	200000e4 	.word	0x200000e4
 8005cc0:	0a010305 	.word	0x0a010305

08005cc4 <maze_wallWidth_set>:

//-------------------------------------------------------------------
unsigned char maze_wallWidth_set(unsigned char kbd_key) {
 8005cc4:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;

	result = 0;
	switch (setup_state) {
 8005cc6:	4c1f      	ldr	r4, [pc, #124]	; (8005d44 <maze_wallWidth_set+0x80>)
 8005cc8:	7823      	ldrb	r3, [r4, #0]
unsigned char maze_wallWidth_set(unsigned char kbd_key) {
 8005cca:	b082      	sub	sp, #8
	switch (setup_state) {
 8005ccc:	b17b      	cbz	r3, 8005cee <maze_wallWidth_set+0x2a>
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10a      	bne.n	8005ce8 <maze_wallWidth_set+0x24>
		setup_state = ST_ECR_INPUT;

		break;

	case ST_ECR_INPUT:
		result = EditValue(kbd_key, &property);
 8005cd2:	491d      	ldr	r1, [pc, #116]	; (8005d48 <maze_wallWidth_set+0x84>)
 8005cd4:	f001 f82e 	bl	8006d34 <EditValue>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005cd8:	2801      	cmp	r0, #1
 8005cda:	d026      	beq.n	8005d2a <maze_wallWidth_set+0x66>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005cdc:	2802      	cmp	r0, #2
 8005cde:	d103      	bne.n	8005ce8 <maze_wallWidth_set+0x24>
		setup_state = ST_ECR_INIT;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	7023      	strb	r3, [r4, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005ce8:	2000      	movs	r0, #0
}
 8005cea:	b002      	add	sp, #8
 8005cec:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <maze_wallWidth_set+0x88>)
 8005cf0:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <maze_wallWidth_set+0x8c>)
 8005cf2:	7811      	ldrb	r1, [r2, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
		usInpValue = maze_settings.wall_width;
 8005cf6:	4817      	ldr	r0, [pc, #92]	; (8005d54 <maze_wallWidth_set+0x90>)
		property.pucValue = (char*) &usInpValue;
 8005cf8:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <maze_wallWidth_set+0x84>)
		usInpValue = maze_settings.wall_width;
 8005cfa:	4e17      	ldr	r6, [pc, #92]	; (8005d58 <maze_wallWidth_set+0x94>)
 8005cfc:	6840      	ldr	r0, [r0, #4]
 8005cfe:	6030      	str	r0, [r6, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005d00:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 5; // input step
 8005d04:	f240 1103 	movw	r1, #259	; 0x103
 8005d08:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005d0a:	6852      	ldr	r2, [r2, #4]
		property.x_pos = 5;
 8005d0c:	4813      	ldr	r0, [pc, #76]	; (8005d5c <maze_wallWidth_set+0x98>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005d0e:	60da      	str	r2, [r3, #12]
		property.x_pos = 5;
 8005d10:	6018      	str	r0, [r3, #0]
		property.uiMaxValue = 50;
 8005d12:	2232      	movs	r2, #50	; 0x32
		property.uiMinValue = 1;
 8005d14:	2501      	movs	r5, #1
		result = EditValue(0xFF, &property);
 8005d16:	4619      	mov	r1, r3
 8005d18:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 50;
 8005d1a:	619a      	str	r2, [r3, #24]
		property.pucValue = (char*) &usInpValue;
 8005d1c:	609e      	str	r6, [r3, #8]
		property.uiMinValue = 1;
 8005d1e:	61dd      	str	r5, [r3, #28]
		result = EditValue(0xFF, &property);
 8005d20:	f001 f808 	bl	8006d34 <EditValue>
	if (result == 1) {
 8005d24:	2801      	cmp	r0, #1
		setup_state = ST_ECR_INPUT;
 8005d26:	7025      	strb	r5, [r4, #0]
	if (result == 1) {
 8005d28:	d1d8      	bne.n	8005cdc <maze_wallWidth_set+0x18>
		maze_settings.wall_width = usInpValue;
 8005d2a:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <maze_wallWidth_set+0x94>)
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <maze_wallWidth_set+0x90>)
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	9001      	str	r0, [sp, #4]
 8005d32:	605a      	str	r2, [r3, #4]
		maze_settings_save();
 8005d34:	f7ff faca 	bl	80052cc <maze_settings_save>
		return 1; // ESC  - go back without new value in the buffer
 8005d38:	9801      	ldr	r0, [sp, #4]
		setup_state = ST_ECR_INIT;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	7023      	strb	r3, [r4, #0]
}
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
 8005d42:	bf00      	nop
 8005d44:	200000e1 	.word	0x200000e1
 8005d48:	200006ac 	.word	0x200006ac
 8005d4c:	200006a8 	.word	0x200006a8
 8005d50:	200006a4 	.word	0x200006a4
 8005d54:	2000060c 	.word	0x2000060c
 8005d58:	200000e4 	.word	0x200000e4
 8005d5c:	05010305 	.word	0x05010305

08005d60 <maze_type_set>:

//----------------------------------------------------------------------
unsigned char maze_type_set(unsigned char kbd_key) {
 8005d60:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;
	result = 0;

	switch (setup_state) {
 8005d62:	4d1f      	ldr	r5, [pc, #124]	; (8005de0 <maze_type_set+0x80>)
 8005d64:	782c      	ldrb	r4, [r5, #0]
unsigned char maze_type_set(unsigned char kbd_key) {
 8005d66:	b082      	sub	sp, #8
	switch (setup_state) {
 8005d68:	b17c      	cbz	r4, 8005d8a <maze_type_set+0x2a>
 8005d6a:	2c01      	cmp	r4, #1
 8005d6c:	d10a      	bne.n	8005d84 <maze_type_set+0x24>
		SelectBox(0xFF, &property);
		setup_state = ST_ECR_INPUT;
		break;

	case ST_ECR_INPUT:
		result = SelectBox(kbd_key, &property);
 8005d6e:	491d      	ldr	r1, [pc, #116]	; (8005de4 <maze_type_set+0x84>)
 8005d70:	f001 f86c 	bl	8006e4c <SelectBox>
		//result = 1;
		break;
	}

	if (result == 1) {
 8005d74:	2801      	cmp	r0, #1
 8005d76:	d028      	beq.n	8005dca <maze_type_set+0x6a>

	}

	//------- Go back -------
	//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 8005d78:	2802      	cmp	r0, #2
 8005d7a:	d103      	bne.n	8005d84 <maze_type_set+0x24>
		setup_state = ST_ECR_INIT;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	702b      	strb	r3, [r5, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 8005d80:	b002      	add	sp, #8
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8005d84:	2000      	movs	r0, #0
}
 8005d86:	b002      	add	sp, #8
 8005d88:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005d8a:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <maze_type_set+0x88>)
 8005d8c:	4b17      	ldr	r3, [pc, #92]	; (8005dec <maze_type_set+0x8c>)
 8005d8e:	7811      	ldrb	r1, [r2, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
		property.pucSelect = (char**) &str_MazeRun;
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <maze_type_set+0x84>)
		usInpValue = maze_settings.maze_type;
 8005d94:	4816      	ldr	r0, [pc, #88]	; (8005df0 <maze_type_set+0x90>)
 8005d96:	4e17      	ldr	r6, [pc, #92]	; (8005df4 <maze_type_set+0x94>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005d98:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucOptions = 4;
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	7519      	strb	r1, [r3, #20]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8005da0:	6851      	ldr	r1, [r2, #4]
 8005da2:	60d9      	str	r1, [r3, #12]
		property.pucSelect = (char**) &str_MazeRun;
 8005da4:	4914      	ldr	r1, [pc, #80]	; (8005df8 <maze_type_set+0x98>)
 8005da6:	6119      	str	r1, [r3, #16]
		property.x_pos = 1;
 8005da8:	f240 1101 	movw	r1, #257	; 0x101
 8005dac:	8019      	strh	r1, [r3, #0]
		property.y_pos = 1;
 8005dae:	2110      	movs	r1, #16
		usInpValue = maze_settings.maze_type;
 8005db0:	6882      	ldr	r2, [r0, #8]
		property.y_pos = 1;
 8005db2:	7099      	strb	r1, [r3, #2]
		SelectBox(0xFF, &property);
 8005db4:	20ff      	movs	r0, #255	; 0xff
 8005db6:	4619      	mov	r1, r3
		property.pucValue = (char*) &usInpValue;
 8005db8:	609e      	str	r6, [r3, #8]
		usInpValue = maze_settings.maze_type;
 8005dba:	6032      	str	r2, [r6, #0]
		SelectBox(0xFF, &property);
 8005dbc:	f001 f846 	bl	8006e4c <SelectBox>
		setup_state = ST_ECR_INPUT;
 8005dc0:	2301      	movs	r3, #1
	return 0;
 8005dc2:	4620      	mov	r0, r4
		setup_state = ST_ECR_INPUT;
 8005dc4:	702b      	strb	r3, [r5, #0]
}
 8005dc6:	b002      	add	sp, #8
 8005dc8:	bd70      	pop	{r4, r5, r6, pc}
		maze_settings.maze_type = usInpValue;
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <maze_type_set+0x94>)
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <maze_type_set+0x90>)
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	9001      	str	r0, [sp, #4]
 8005dd2:	609a      	str	r2, [r3, #8]
		maze_settings_save();
 8005dd4:	f7ff fa7a 	bl	80052cc <maze_settings_save>
		setup_state = ST_ECR_INIT;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	702b      	strb	r3, [r5, #0]
		return 1; // ESC  - go back without new value in the buffer
 8005ddc:	9801      	ldr	r0, [sp, #4]
 8005dde:	e7d2      	b.n	8005d86 <maze_type_set+0x26>
 8005de0:	200000e1 	.word	0x200000e1
 8005de4:	200006ac 	.word	0x200006ac
 8005de8:	200006a8 	.word	0x200006a8
 8005dec:	200006a4 	.word	0x200006a4
 8005df0:	2000060c 	.word	0x2000060c
 8005df4:	200000e4 	.word	0x200000e4
 8005df8:	0800b8bc 	.word	0x0800b8bc
 8005dfc:	00000000 	.word	0x00000000

08005e00 <gyro_callibrate>:
/**
 *
 * @param kbd_key
 * @return
 */
unsigned char gyro_callibrate(unsigned char kbd_key) {
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char tmp_str[24];
	uint32_t tmp_long;
	uint32_t gulDeltaT;
	char sign;

	LcdBox(2, 4, 125, 60);
 8005e04:	233c      	movs	r3, #60	; 0x3c
unsigned char gyro_callibrate(unsigned char kbd_key) {
 8005e06:	b08b      	sub	sp, #44	; 0x2c
	LcdBox(2, 4, 125, 60);
 8005e08:	227d      	movs	r2, #125	; 0x7d
 8005e0a:	2104      	movs	r1, #4
 8005e0c:	2002      	movs	r0, #2
 8005e0e:	f7fe fdcf 	bl	80049b0 <LcdBox>
	LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 8005e12:	4a6b      	ldr	r2, [pc, #428]	; (8005fc0 <gyro_callibrate+0x1c0>)
 8005e14:	4b6b      	ldr	r3, [pc, #428]	; (8005fc4 <gyro_callibrate+0x1c4>)
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, "���� ���������!");
	LcdUpdate();

	gulTickCountDown = 30000;
 8005e1a:	4c6b      	ldr	r4, [pc, #428]	; (8005fc8 <gyro_callibrate+0x1c8>)
	LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 8005e1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005e20:	2100      	movs	r1, #0
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4608      	mov	r0, r1
 8005e28:	2304      	movs	r3, #4
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f7fe fba8 	bl	8004580 <LcdTextXY>
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, "���� ���������!");
 8005e30:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <gyro_callibrate+0x1cc>)
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2202      	movs	r2, #2
 8005e36:	2304      	movs	r3, #4
 8005e38:	2103      	movs	r1, #3
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	f7fe fba0 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8005e40:	f7fe fff2 	bl	8004e28 <LcdUpdate>
	gulTickCountDown = 30000;
 8005e44:	f247 5330 	movw	r3, #30000	; 0x7530
 8005e48:	6023      	str	r3, [r4, #0]
	while (gulTickCountDown)
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1fc      	bne.n	8005e4a <gyro_callibrate+0x4a>
		;

	LcdTextXY(1, 4, BOLD_FNT, CENTERED, "< < < * > > >");
 8005e50:	4b5f      	ldr	r3, [pc, #380]	; (8005fd0 <gyro_callibrate+0x1d0>)
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2304      	movs	r3, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	2202      	movs	r2, #2
 8005e5a:	2001      	movs	r0, #1
	LcdUpdate();
	g_pfGyroOffset[2] = 0;
 8005e5c:	4e5d      	ldr	r6, [pc, #372]	; (8005fd4 <gyro_callibrate+0x1d4>)
 8005e5e:	4d5e      	ldr	r5, [pc, #376]	; (8005fd8 <gyro_callibrate+0x1d8>)
 8005e60:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8005fe0 <gyro_callibrate+0x1e0>
 8005e64:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8006008 <gyro_callibrate+0x208>
	LcdTextXY(1, 4, BOLD_FNT, CENTERED, "< < < * > > >");
 8005e68:	f7fe fb8a 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8005e6c:	f7fe ffdc 	bl	8004e28 <LcdUpdate>
	g_pfGyroOffset[2] = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	f241 7270 	movw	r2, #6000	; 0x1770
 8005e76:	9202      	str	r2, [sp, #8]
 8005e78:	60b3      	str	r3, [r6, #8]

	tmp_long = 0;
	while (tmp_long < SAMPLES_NR) {
		if (mpu_irq) {
 8005e7a:	782b      	ldrb	r3, [r5, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0fc      	beq.n	8005e7a <gyro_callibrate+0x7a>
			mpu_irq = 0;
 8005e80:	2700      	movs	r7, #0
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8005e82:	2201      	movs	r2, #1
 8005e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e88:	4854      	ldr	r0, [pc, #336]	; (8005fdc <gyro_callibrate+0x1dc>)
			mpu_irq = 0;
 8005e8a:	702f      	strb	r7, [r5, #0]
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8005e8c:	f7fc f800 	bl	8001e90 <HAL_GPIO_WritePin>
			SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);
 8005e90:	4953      	ldr	r1, [pc, #332]	; (8005fe0 <gyro_callibrate+0x1e0>)
 8005e92:	4854      	ldr	r0, [pc, #336]	; (8005fe4 <gyro_callibrate+0x1e4>)
 8005e94:	f7ff f98a 	bl	80051ac <SD_MPU6050_ReadGyroscope>

			//
			// Convert the gyroscope values into grad/sec
			//
			g_pfGyro[2] = (float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;				// Get float
 8005e98:	f9ba 3016 	ldrsh.w	r3, [sl, #22]
 8005e9c:	ed9a 7a01 	vldr	s14, [sl, #4]
			gulDeltaT = gulTimeTick;
			gulTimeTick = 0;
			fAngle += (g_pfGyro[2] - g_pfGyroOffset[2]) * 0.0001 * gulDeltaT;
 8005ea0:	edd6 6a02 	vldr	s13, [r6, #8]
			g_pfGyro[2] = (float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;				// Get float
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			gulDeltaT = gulTimeTick;
 8005eac:	4b4e      	ldr	r3, [pc, #312]	; (8005fe8 <gyro_callibrate+0x1e8>)
			g_pfGyro[2] = (float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;				// Get float
 8005eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eb2:	edcb 7a02 	vstr	s15, [fp, #8]
			gulDeltaT = gulTimeTick;
 8005eb6:	681a      	ldr	r2, [r3, #0]
			gulTimeTick = 0;
 8005eb8:	601f      	str	r7, [r3, #0]
			fAngle += (g_pfGyro[2] - g_pfGyroOffset[2]) * 0.0001 * gulDeltaT;
 8005eba:	eddb 7a02 	vldr	s15, [fp, #8]
			gulDeltaT = gulTimeTick;
 8005ebe:	9203      	str	r2, [sp, #12]
			fAngle += (g_pfGyro[2] - g_pfGyroOffset[2]) * 0.0001 * gulDeltaT;
 8005ec0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ec4:	ee17 0a90 	vmov	r0, s15
 8005ec8:	f7fa fb3e 	bl	8000548 <__aeabi_f2d>
 8005ecc:	a33a      	add	r3, pc, #232	; (adr r3, 8005fb8 <gyro_callibrate+0x1b8>)
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f7fa fb91 	bl	80005f8 <__aeabi_dmul>
 8005ed6:	4680      	mov	r8, r0
 8005ed8:	9803      	ldr	r0, [sp, #12]
 8005eda:	4689      	mov	r9, r1
 8005edc:	f7fa fb12 	bl	8000504 <__aeabi_ui2d>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <gyro_callibrate+0x1ec>)
 8005eee:	4680      	mov	r8, r0
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	4689      	mov	r9, r1
 8005ef4:	f7fa fb28 	bl	8000548 <__aeabi_f2d>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4640      	mov	r0, r8
 8005efe:	4649      	mov	r1, r9
 8005f00:	f7fa f9c4 	bl	800028c <__adddf3>
 8005f04:	f7fa fe3a 	bl	8000b7c <__aeabi_d2f>
 8005f08:	4b38      	ldr	r3, [pc, #224]	; (8005fec <gyro_callibrate+0x1ec>)
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005f0a:	463a      	mov	r2, r7
			fAngle += (g_pfGyro[2] - g_pfGyroOffset[2]) * 0.0001 * gulDeltaT;
 8005f0c:	6018      	str	r0, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f12:	4832      	ldr	r0, [pc, #200]	; (8005fdc <gyro_callibrate+0x1dc>)
 8005f14:	f7fb ffbc 	bl	8001e90 <HAL_GPIO_WritePin>

			//g_pfGyroOffset[0] += g_pfGyro[0];
			//g_pfGyroOffset[1] += g_pfGyro[1];
			g_pfGyroOffset[2] += g_pfGyro[2];
 8005f18:	edd6 7a02 	vldr	s15, [r6, #8]
 8005f1c:	ed9b 7a02 	vldr	s14, [fp, #8]
	while (tmp_long < SAMPLES_NR) {
 8005f20:	9b02      	ldr	r3, [sp, #8]
			g_pfGyroOffset[2] += g_pfGyro[2];
 8005f22:	ee77 7a27 	vadd.f32	s15, s14, s15
	while (tmp_long < SAMPLES_NR) {
 8005f26:	3b01      	subs	r3, #1
			g_pfGyroOffset[2] += g_pfGyro[2];
 8005f28:	edc6 7a02 	vstr	s15, [r6, #8]
	while (tmp_long < SAMPLES_NR) {
 8005f2c:	9302      	str	r3, [sp, #8]
 8005f2e:	d1a4      	bne.n	8005e7a <gyro_callibrate+0x7a>
			tmp_long ++;
		}
	}
//g_pfGyroOffset[0] /= SAMPLES_NR;
//g_pfGyroOffset[1] /= SAMPLES_NR;
	g_pfGyroOffset[2] /= SAMPLES_NR;
 8005f30:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005ff0 <gyro_callibrate+0x1f0>

	dev_settings.gyro_offset = g_pfGyroOffset[2];
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <gyro_callibrate+0x1f4>)
	g_pfGyroOffset[2] /= SAMPLES_NR;
 8005f36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	float_format(g_pfGyroOffset[2]);
	sign = ' ';
	if (g_pfGyroOffset[2] < 0)
		sign = '-';
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, "                ");
	sprintf(tmp_str, "%c%ld,%03ld", sign, i32IPart, i32FPart);
 8005f3a:	ad04      	add	r5, sp, #16
	g_pfGyroOffset[2] /= SAMPLES_NR;
 8005f3c:	ed86 7a02 	vstr	s14, [r6, #8]
	dev_settings.gyro_offset = g_pfGyroOffset[2];
 8005f40:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
	dev_settings_save();
 8005f44:	f7ff f9aa 	bl	800529c <dev_settings_save>
	float_format(g_pfGyroOffset[2]);
 8005f48:	ed96 0a02 	vldr	s0, [r6, #8]
 8005f4c:	f001 f9a4 	bl	8007298 <float_format>
	if (g_pfGyroOffset[2] < 0)
 8005f50:	edd6 7a02 	vldr	s15, [r6, #8]
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, "                ");
 8005f54:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <gyro_callibrate+0x1f8>)
 8005f56:	9300      	str	r3, [sp, #0]
	if (g_pfGyroOffset[2] < 0)
 8005f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, "                ");
 8005f60:	f04f 0304 	mov.w	r3, #4
 8005f64:	f04f 0202 	mov.w	r2, #2
 8005f68:	f04f 0103 	mov.w	r1, #3
 8005f6c:	f04f 0001 	mov.w	r0, #1
	if (g_pfGyroOffset[2] < 0)
 8005f70:	bf4c      	ite	mi
 8005f72:	262d      	movmi	r6, #45	; 0x2d
 8005f74:	2620      	movpl	r6, #32
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, "                ");
 8005f76:	f7fe fb03 	bl	8004580 <LcdTextXY>
	sprintf(tmp_str, "%c%ld,%03ld", sign, i32IPart, i32FPart);
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <gyro_callibrate+0x1fc>)
 8005f7c:	4b20      	ldr	r3, [pc, #128]	; (8006000 <gyro_callibrate+0x200>)
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4920      	ldr	r1, [pc, #128]	; (8006004 <gyro_callibrate+0x204>)
 8005f84:	9200      	str	r2, [sp, #0]
 8005f86:	4628      	mov	r0, r5
 8005f88:	4632      	mov	r2, r6
 8005f8a:	f002 fecb 	bl	8008d24 <siprintf>
	LcdTextXY(1, 3, BOLD_FNT, CENTERED, tmp_str);
 8005f8e:	2304      	movs	r3, #4
 8005f90:	2202      	movs	r2, #2
 8005f92:	2103      	movs	r1, #3
 8005f94:	2001      	movs	r0, #1
 8005f96:	9500      	str	r5, [sp, #0]
 8005f98:	f7fe faf2 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8005f9c:	f7fe ff44 	bl	8004e28 <LcdUpdate>

	gulTickCountDown = 30000;
 8005fa0:	f247 5330 	movw	r3, #30000	; 0x7530
 8005fa4:	6023      	str	r3, [r4, #0]
	while (gulTickCountDown)
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1fc      	bne.n	8005fa6 <gyro_callibrate+0x1a6>
		;

	return 1;
}
 8005fac:	2001      	movs	r0, #1
 8005fae:	b00b      	add	sp, #44	; 0x2c
 8005fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	eb1c432d 	.word	0xeb1c432d
 8005fbc:	3f1a36e2 	.word	0x3f1a36e2
 8005fc0:	200006a8 	.word	0x200006a8
 8005fc4:	200006a4 	.word	0x200006a4
 8005fc8:	2000088c 	.word	0x2000088c
 8005fcc:	0800b964 	.word	0x0800b964
 8005fd0:	0800b990 	.word	0x0800b990
 8005fd4:	20000600 	.word	0x20000600
 8005fd8:	2000017c 	.word	0x2000017c
 8005fdc:	48000400 	.word	0x48000400
 8005fe0:	20000ae8 	.word	0x20000ae8
 8005fe4:	20000760 	.word	0x20000760
 8005fe8:	20000820 	.word	0x20000820
 8005fec:	200005fc 	.word	0x200005fc
 8005ff0:	45bb8000 	.word	0x45bb8000
 8005ff4:	20000624 	.word	0x20000624
 8005ff8:	0800b9a0 	.word	0x0800b9a0
 8005ffc:	200006f8 	.word	0x200006f8
 8006000:	20000898 	.word	0x20000898
 8006004:	0800b9b4 	.word	0x0800b9b4
 8006008:	200005d8 	.word	0x200005d8

0800600c <frontL_callibrate>:

//--------------------------------------
unsigned char frontL_callibrate(unsigned char kbd_key) {
 800600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char tmp_str[24];
	char result;

	switch (setup_state) {
 8006010:	4d37      	ldr	r5, [pc, #220]	; (80060f0 <frontL_callibrate+0xe4>)
 8006012:	782c      	ldrb	r4, [r5, #0]
unsigned char frontL_callibrate(unsigned char kbd_key) {
 8006014:	b088      	sub	sp, #32
	switch (setup_state) {
 8006016:	2c00      	cmp	r4, #0
 8006018:	d02e      	beq.n	8006078 <frontL_callibrate+0x6c>
 800601a:	2c01      	cmp	r4, #1
 800601c:	d01d      	beq.n	800605a <frontL_callibrate+0x4e>
 800601e:	4e35      	ldr	r6, [pc, #212]	; (80060f4 <frontL_callibrate+0xe8>)
			return 1; // ESC  - go back without new value in the buffer
		}
		break;
	}

	front_a_value = usInpValue / sensor_values[4];
 8006020:	4a35      	ldr	r2, [pc, #212]	; (80060f8 <frontL_callibrate+0xec>)
 8006022:	4d36      	ldr	r5, [pc, #216]	; (80060fc <frontL_callibrate+0xf0>)
 8006024:	6833      	ldr	r3, [r6, #0]
 8006026:	8912      	ldrh	r2, [r2, #8]
	sprintf(tmp_str, "%3d", front_a_value);
 8006028:	4935      	ldr	r1, [pc, #212]	; (8006100 <frontL_callibrate+0xf4>)
	front_a_value = usInpValue / sensor_values[4];
 800602a:	fbb3 f3f2 	udiv	r3, r3, r2
	sprintf(tmp_str, "%3d", front_a_value);
 800602e:	ac02      	add	r4, sp, #8
 8006030:	461a      	mov	r2, r3
 8006032:	4620      	mov	r0, r4
	front_a_value = usInpValue / sensor_values[4];
 8006034:	602b      	str	r3, [r5, #0]
	sprintf(tmp_str, "%3d", front_a_value);
 8006036:	f002 fe75 	bl	8008d24 <siprintf>
	LcdTextXY(0, 2, BIG_FNT, CENTERED | NORM_LINE, tmp_str);
 800603a:	2305      	movs	r3, #5
 800603c:	2203      	movs	r2, #3
 800603e:	2102      	movs	r1, #2
 8006040:	2000      	movs	r0, #0
 8006042:	9400      	str	r4, [sp, #0]
 8006044:	f7fe fa9c 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8006048:	f7fe feee 	bl	8004e28 <LcdUpdate>
	 setup_state = ST_ECR_INIT;
	 gusKeyRepeatTimer = 0
	 return 2; // ESC  - go back without new value in the buffer
	 }
	 */
	gusKeyRepeatTimer = 10;		// 100ms
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <frontL_callibrate+0xf8>)
 800604e:	220a      	movs	r2, #10
	return 0;
 8006050:	2000      	movs	r0, #0
	gusKeyRepeatTimer = 10;		// 100ms
 8006052:	801a      	strh	r2, [r3, #0]
}
 8006054:	b008      	add	sp, #32
 8006056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = EditValue(kbd_key, &property);
 800605a:	492b      	ldr	r1, [pc, #172]	; (8006108 <frontL_callibrate+0xfc>)
 800605c:	f000 fe6a 	bl	8006d34 <EditValue>
		if (result == 1) {
 8006060:	2801      	cmp	r0, #1
 8006062:	d03d      	beq.n	80060e0 <frontL_callibrate+0xd4>
		if (result) {
 8006064:	2800      	cmp	r0, #0
 8006066:	d0da      	beq.n	800601e <frontL_callibrate+0x12>
			gusKeyRepeatTimer = 0;
 8006068:	4a26      	ldr	r2, [pc, #152]	; (8006104 <frontL_callibrate+0xf8>)
			setup_state = ST_ECR_INIT;
 800606a:	2300      	movs	r3, #0
			return 1; // ESC  - go back without new value in the buffer
 800606c:	2001      	movs	r0, #1
			gusKeyRepeatTimer = 0;
 800606e:	8013      	strh	r3, [r2, #0]
			setup_state = ST_ECR_INIT;
 8006070:	702b      	strb	r3, [r5, #0]
}
 8006072:	b008      	add	sp, #32
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 8006078:	4f24      	ldr	r7, [pc, #144]	; (800610c <frontL_callibrate+0x100>)
 800607a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800611c <frontL_callibrate+0x110>
		usInpValue = dev_settings.frontL_callibration;
 800607e:	4e1d      	ldr	r6, [pc, #116]	; (80060f4 <frontL_callibrate+0xe8>)
		LcdBox(2, 4, 125, 60);
 8006080:	233c      	movs	r3, #60	; 0x3c
 8006082:	227d      	movs	r2, #125	; 0x7d
 8006084:	2104      	movs	r1, #4
 8006086:	2002      	movs	r0, #2
 8006088:	f7fe fc92 	bl	80049b0 <LcdBox>
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	f898 2000 	ldrb.w	r2, [r8]
 8006092:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006096:	4621      	mov	r1, r4
 8006098:	6852      	ldr	r2, [r2, #4]
 800609a:	9200      	str	r2, [sp, #0]
 800609c:	4620      	mov	r0, r4
 800609e:	2304      	movs	r3, #4
 80060a0:	2201      	movs	r2, #1
 80060a2:	f7fe fa6d 	bl	8004580 <LcdTextXY>
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80060a6:	f898 1000 	ldrb.w	r1, [r8]
 80060aa:	683a      	ldr	r2, [r7, #0]
		property.pucValue = (char*) &usInpValue;
 80060ac:	4b16      	ldr	r3, [pc, #88]	; (8006108 <frontL_callibrate+0xfc>)
		usInpValue = dev_settings.frontL_callibration;
 80060ae:	4c18      	ldr	r4, [pc, #96]	; (8006110 <frontL_callibrate+0x104>)
		property.x_pos = 4;
 80060b0:	4818      	ldr	r0, [pc, #96]	; (8006114 <frontL_callibrate+0x108>)
 80060b2:	6018      	str	r0, [r3, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80060b4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 750; // input step
 80060b8:	f240 1103 	movw	r1, #259	; 0x103
 80060bc:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80060be:	6851      	ldr	r1, [r2, #4]
		property.uiMaxValue = 200000;
 80060c0:	4a15      	ldr	r2, [pc, #84]	; (8006118 <frontL_callibrate+0x10c>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80060c2:	60d9      	str	r1, [r3, #12]
		usInpValue = dev_settings.frontL_callibration;
 80060c4:	6be4      	ldr	r4, [r4, #60]	; 0x3c
		property.pucValue = (char*) &usInpValue;
 80060c6:	609e      	str	r6, [r3, #8]
		result = EditValue(0xFF, &property);
 80060c8:	4619      	mov	r1, r3
		property.uiMinValue = 500;
 80060ca:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
		result = EditValue(0xFF, &property);
 80060ce:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200000;
 80060d0:	e9c3 2706 	strd	r2, r7, [r3, #24]
		usInpValue = dev_settings.frontL_callibration;
 80060d4:	6034      	str	r4, [r6, #0]
		result = EditValue(0xFF, &property);
 80060d6:	f000 fe2d 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 80060da:	2301      	movs	r3, #1
 80060dc:	702b      	strb	r3, [r5, #0]
		break;
 80060de:	e79f      	b.n	8006020 <frontL_callibrate+0x14>
			dev_settings.frontL_callibration = usInpValue;
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <frontL_callibrate+0xe8>)
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <frontL_callibrate+0x104>)
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	63da      	str	r2, [r3, #60]	; 0x3c
			dev_settings_save();
 80060e8:	f7ff f8d8 	bl	800529c <dev_settings_save>
 80060ec:	e7bc      	b.n	8006068 <frontL_callibrate+0x5c>
 80060ee:	bf00      	nop
 80060f0:	200000e1 	.word	0x200000e1
 80060f4:	200000e4 	.word	0x200000e4
 80060f8:	200006d8 	.word	0x200006d8
 80060fc:	20000680 	.word	0x20000680
 8006100:	0800b958 	.word	0x0800b958
 8006104:	200006e8 	.word	0x200006e8
 8006108:	200006ac 	.word	0x200006ac
 800610c:	200006a4 	.word	0x200006a4
 8006110:	20000624 	.word	0x20000624
 8006114:	ee050404 	.word	0xee050404
 8006118:	00030d40 	.word	0x00030d40
 800611c:	200006a8 	.word	0x200006a8

08006120 <frontR_callibrate>:

unsigned char frontR_callibrate(unsigned char kbd_key) {
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char tmp_str[24];
	char result;

	switch (setup_state) {
 8006124:	4d37      	ldr	r5, [pc, #220]	; (8006204 <frontR_callibrate+0xe4>)
 8006126:	782c      	ldrb	r4, [r5, #0]
unsigned char frontR_callibrate(unsigned char kbd_key) {
 8006128:	b088      	sub	sp, #32
	switch (setup_state) {
 800612a:	2c00      	cmp	r4, #0
 800612c:	d02e      	beq.n	800618c <frontR_callibrate+0x6c>
 800612e:	2c01      	cmp	r4, #1
 8006130:	d01d      	beq.n	800616e <frontR_callibrate+0x4e>
 8006132:	4e35      	ldr	r6, [pc, #212]	; (8006208 <frontR_callibrate+0xe8>)
			return 1; // ESC  - go back without new value in the buffer
		}
		break;
	}

	front_b_value = usInpValue / sensor_values[1];
 8006134:	4a35      	ldr	r2, [pc, #212]	; (800620c <frontR_callibrate+0xec>)
 8006136:	4d36      	ldr	r5, [pc, #216]	; (8006210 <frontR_callibrate+0xf0>)
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	8852      	ldrh	r2, [r2, #2]
	sprintf(tmp_str, " %3d", front_b_value);
 800613c:	4935      	ldr	r1, [pc, #212]	; (8006214 <frontR_callibrate+0xf4>)
	front_b_value = usInpValue / sensor_values[1];
 800613e:	fbb3 f3f2 	udiv	r3, r3, r2
	sprintf(tmp_str, " %3d", front_b_value);
 8006142:	ac02      	add	r4, sp, #8
 8006144:	461a      	mov	r2, r3
 8006146:	4620      	mov	r0, r4
	front_b_value = usInpValue / sensor_values[1];
 8006148:	602b      	str	r3, [r5, #0]
	sprintf(tmp_str, " %3d", front_b_value);
 800614a:	f002 fdeb 	bl	8008d24 <siprintf>
	LcdTextXY(0, 2, BIG_FNT, CENTERED | NORM_LINE, tmp_str);
 800614e:	2305      	movs	r3, #5
 8006150:	2203      	movs	r2, #3
 8006152:	2102      	movs	r1, #2
 8006154:	2000      	movs	r0, #0
 8006156:	9400      	str	r4, [sp, #0]
 8006158:	f7fe fa12 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 800615c:	f7fe fe64 	bl	8004e28 <LcdUpdate>
	 setup_state = ST_ECR_INIT;
	 gusKeyRepeatTimer = 0
	 return 2; // ESC  - go back without new value in the buffer
	 }
	 */
	gusKeyRepeatTimer = 10;		// 100ms
 8006160:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <frontR_callibrate+0xf8>)
 8006162:	220a      	movs	r2, #10
	return 0;
 8006164:	2000      	movs	r0, #0
	gusKeyRepeatTimer = 10;		// 100ms
 8006166:	801a      	strh	r2, [r3, #0]
}
 8006168:	b008      	add	sp, #32
 800616a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = EditValue(kbd_key, &property);
 800616e:	492b      	ldr	r1, [pc, #172]	; (800621c <frontR_callibrate+0xfc>)
 8006170:	f000 fde0 	bl	8006d34 <EditValue>
		if (result == 1) {
 8006174:	2801      	cmp	r0, #1
 8006176:	d03d      	beq.n	80061f4 <frontR_callibrate+0xd4>
		if (result) {
 8006178:	2800      	cmp	r0, #0
 800617a:	d0da      	beq.n	8006132 <frontR_callibrate+0x12>
			gusKeyRepeatTimer = 0;
 800617c:	4a26      	ldr	r2, [pc, #152]	; (8006218 <frontR_callibrate+0xf8>)
			setup_state = ST_ECR_INIT;
 800617e:	2300      	movs	r3, #0
			return 1; // ESC  - go back without new value in the buffer
 8006180:	2001      	movs	r0, #1
			gusKeyRepeatTimer = 0;
 8006182:	8013      	strh	r3, [r2, #0]
			setup_state = ST_ECR_INIT;
 8006184:	702b      	strb	r3, [r5, #0]
}
 8006186:	b008      	add	sp, #32
 8006188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 800618c:	4f24      	ldr	r7, [pc, #144]	; (8006220 <frontR_callibrate+0x100>)
 800618e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006230 <frontR_callibrate+0x110>
		usInpValue = dev_settings.frontR_callibration;
 8006192:	4e1d      	ldr	r6, [pc, #116]	; (8006208 <frontR_callibrate+0xe8>)
		LcdBox(2, 4, 125, 60);
 8006194:	233c      	movs	r3, #60	; 0x3c
 8006196:	227d      	movs	r2, #125	; 0x7d
 8006198:	2104      	movs	r1, #4
 800619a:	2002      	movs	r0, #2
 800619c:	f7fe fc08 	bl	80049b0 <LcdBox>
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f898 2000 	ldrb.w	r2, [r8]
 80061a6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80061aa:	4621      	mov	r1, r4
 80061ac:	6852      	ldr	r2, [r2, #4]
 80061ae:	9200      	str	r2, [sp, #0]
 80061b0:	4620      	mov	r0, r4
 80061b2:	2304      	movs	r3, #4
 80061b4:	2201      	movs	r2, #1
 80061b6:	f7fe f9e3 	bl	8004580 <LcdTextXY>
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80061ba:	f898 1000 	ldrb.w	r1, [r8]
 80061be:	683a      	ldr	r2, [r7, #0]
		property.pucValue = (char*) &usInpValue;
 80061c0:	4b16      	ldr	r3, [pc, #88]	; (800621c <frontR_callibrate+0xfc>)
		usInpValue = dev_settings.frontR_callibration;
 80061c2:	4c18      	ldr	r4, [pc, #96]	; (8006224 <frontR_callibrate+0x104>)
		property.x_pos = 4;
 80061c4:	4818      	ldr	r0, [pc, #96]	; (8006228 <frontR_callibrate+0x108>)
 80061c6:	6018      	str	r0, [r3, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80061c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 250; // input step
 80061cc:	f240 1103 	movw	r1, #259	; 0x103
 80061d0:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80061d2:	6851      	ldr	r1, [r2, #4]
		property.uiMaxValue = 200000;
 80061d4:	4a15      	ldr	r2, [pc, #84]	; (800622c <frontR_callibrate+0x10c>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80061d6:	60d9      	str	r1, [r3, #12]
		usInpValue = dev_settings.frontR_callibration;
 80061d8:	6c24      	ldr	r4, [r4, #64]	; 0x40
		property.pucValue = (char*) &usInpValue;
 80061da:	609e      	str	r6, [r3, #8]
		result = EditValue(0xFF, &property);
 80061dc:	4619      	mov	r1, r3
		property.uiMinValue = 10000;
 80061de:	f242 7710 	movw	r7, #10000	; 0x2710
		result = EditValue(0xFF, &property);
 80061e2:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200000;
 80061e4:	e9c3 2706 	strd	r2, r7, [r3, #24]
		usInpValue = dev_settings.frontR_callibration;
 80061e8:	6034      	str	r4, [r6, #0]
		result = EditValue(0xFF, &property);
 80061ea:	f000 fda3 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 80061ee:	2301      	movs	r3, #1
 80061f0:	702b      	strb	r3, [r5, #0]
		break;
 80061f2:	e79f      	b.n	8006134 <frontR_callibrate+0x14>
			dev_settings.frontR_callibration = usInpValue;
 80061f4:	4a04      	ldr	r2, [pc, #16]	; (8006208 <frontR_callibrate+0xe8>)
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <frontR_callibrate+0x104>)
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40
			dev_settings_save();
 80061fc:	f7ff f84e 	bl	800529c <dev_settings_save>
 8006200:	e7bc      	b.n	800617c <frontR_callibrate+0x5c>
 8006202:	bf00      	nop
 8006204:	200000e1 	.word	0x200000e1
 8006208:	200000e4 	.word	0x200000e4
 800620c:	200006d8 	.word	0x200006d8
 8006210:	20000684 	.word	0x20000684
 8006214:	0800b95c 	.word	0x0800b95c
 8006218:	200006e8 	.word	0x200006e8
 800621c:	200006ac 	.word	0x200006ac
 8006220:	200006a4 	.word	0x200006a4
 8006224:	20000624 	.word	0x20000624
 8006228:	fa050404 	.word	0xfa050404
 800622c:	00030d40 	.word	0x00030d40
 8006230:	200006a8 	.word	0x200006a8

08006234 <sideL_callibrate>:

//-------------------------------------------------------------------
//--------------------------------------
unsigned char sideL_callibrate(unsigned char kbd_key) {
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char tmp_str[24];
	char result;

	switch (setup_state) {
 8006238:	4d37      	ldr	r5, [pc, #220]	; (8006318 <sideL_callibrate+0xe4>)
 800623a:	782c      	ldrb	r4, [r5, #0]
unsigned char sideL_callibrate(unsigned char kbd_key) {
 800623c:	b088      	sub	sp, #32
	switch (setup_state) {
 800623e:	2c00      	cmp	r4, #0
 8006240:	d02e      	beq.n	80062a0 <sideL_callibrate+0x6c>
 8006242:	2c01      	cmp	r4, #1
 8006244:	d01d      	beq.n	8006282 <sideL_callibrate+0x4e>
 8006246:	4e35      	ldr	r6, [pc, #212]	; (800631c <sideL_callibrate+0xe8>)
			return 1; // ESC  - go back without new value in the buffer
		}
		break;
	}

	front_a_value = usInpValue / sensor_values[3];
 8006248:	4a35      	ldr	r2, [pc, #212]	; (8006320 <sideL_callibrate+0xec>)
 800624a:	4d36      	ldr	r5, [pc, #216]	; (8006324 <sideL_callibrate+0xf0>)
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	88d2      	ldrh	r2, [r2, #6]
	sprintf(tmp_str, "%3d", front_a_value);
 8006250:	4935      	ldr	r1, [pc, #212]	; (8006328 <sideL_callibrate+0xf4>)
	front_a_value = usInpValue / sensor_values[3];
 8006252:	fbb3 f3f2 	udiv	r3, r3, r2
	sprintf(tmp_str, "%3d", front_a_value);
 8006256:	ac02      	add	r4, sp, #8
 8006258:	461a      	mov	r2, r3
 800625a:	4620      	mov	r0, r4
	front_a_value = usInpValue / sensor_values[3];
 800625c:	602b      	str	r3, [r5, #0]
	sprintf(tmp_str, "%3d", front_a_value);
 800625e:	f002 fd61 	bl	8008d24 <siprintf>
	LcdTextXY(0, 2, BIG_FNT, CENTERED | NORM_LINE, tmp_str);
 8006262:	2305      	movs	r3, #5
 8006264:	2203      	movs	r2, #3
 8006266:	2102      	movs	r1, #2
 8006268:	2000      	movs	r0, #0
 800626a:	9400      	str	r4, [sp, #0]
 800626c:	f7fe f988 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8006270:	f7fe fdda 	bl	8004e28 <LcdUpdate>
	 setup_state = ST_ECR_INIT;
	 gusKeyRepeatTimer = 0
	 return 2; // ESC  - go back without new value in the buffer
	 }
	 */
	gusKeyRepeatTimer = 10;		// 100ms
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <sideL_callibrate+0xf8>)
 8006276:	220a      	movs	r2, #10
	return 0;
 8006278:	2000      	movs	r0, #0
	gusKeyRepeatTimer = 10;		// 100ms
 800627a:	801a      	strh	r2, [r3, #0]
}
 800627c:	b008      	add	sp, #32
 800627e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = EditValue(kbd_key, &property);
 8006282:	492b      	ldr	r1, [pc, #172]	; (8006330 <sideL_callibrate+0xfc>)
 8006284:	f000 fd56 	bl	8006d34 <EditValue>
		if (result == 1) {
 8006288:	2801      	cmp	r0, #1
 800628a:	d03d      	beq.n	8006308 <sideL_callibrate+0xd4>
		if (result) {
 800628c:	2800      	cmp	r0, #0
 800628e:	d0da      	beq.n	8006246 <sideL_callibrate+0x12>
			gusKeyRepeatTimer = 0;
 8006290:	4a26      	ldr	r2, [pc, #152]	; (800632c <sideL_callibrate+0xf8>)
			setup_state = ST_ECR_INIT;
 8006292:	2300      	movs	r3, #0
			return 1; // ESC  - go back without new value in the buffer
 8006294:	2001      	movs	r0, #1
			gusKeyRepeatTimer = 0;
 8006296:	8013      	strh	r3, [r2, #0]
			setup_state = ST_ECR_INIT;
 8006298:	702b      	strb	r3, [r5, #0]
}
 800629a:	b008      	add	sp, #32
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80062a0:	4f24      	ldr	r7, [pc, #144]	; (8006334 <sideL_callibrate+0x100>)
 80062a2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006344 <sideL_callibrate+0x110>
		usInpValue = dev_settings.sideL_callibration;
 80062a6:	4e1d      	ldr	r6, [pc, #116]	; (800631c <sideL_callibrate+0xe8>)
		LcdBox(2, 4, 125, 60);
 80062a8:	233c      	movs	r3, #60	; 0x3c
 80062aa:	227d      	movs	r2, #125	; 0x7d
 80062ac:	2104      	movs	r1, #4
 80062ae:	2002      	movs	r0, #2
 80062b0:	f7fe fb7e 	bl	80049b0 <LcdBox>
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f898 2000 	ldrb.w	r2, [r8]
 80062ba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80062be:	4621      	mov	r1, r4
 80062c0:	6852      	ldr	r2, [r2, #4]
 80062c2:	9200      	str	r2, [sp, #0]
 80062c4:	4620      	mov	r0, r4
 80062c6:	2304      	movs	r3, #4
 80062c8:	2201      	movs	r2, #1
 80062ca:	f7fe f959 	bl	8004580 <LcdTextXY>
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80062ce:	f898 1000 	ldrb.w	r1, [r8]
 80062d2:	683a      	ldr	r2, [r7, #0]
		property.pucValue = (char*) &usInpValue;
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <sideL_callibrate+0xfc>)
		usInpValue = dev_settings.sideL_callibration;
 80062d6:	4c18      	ldr	r4, [pc, #96]	; (8006338 <sideL_callibrate+0x104>)
		property.x_pos = 4;
 80062d8:	4818      	ldr	r0, [pc, #96]	; (800633c <sideL_callibrate+0x108>)
 80062da:	6018      	str	r0, [r3, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80062dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 250; // input step
 80062e0:	f240 1103 	movw	r1, #259	; 0x103
 80062e4:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80062e6:	6851      	ldr	r1, [r2, #4]
		property.uiMaxValue = 200000;
 80062e8:	4a15      	ldr	r2, [pc, #84]	; (8006340 <sideL_callibrate+0x10c>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80062ea:	60d9      	str	r1, [r3, #12]
		usInpValue = dev_settings.sideL_callibration;
 80062ec:	6c64      	ldr	r4, [r4, #68]	; 0x44
		property.pucValue = (char*) &usInpValue;
 80062ee:	609e      	str	r6, [r3, #8]
		result = EditValue(0xFF, &property);
 80062f0:	4619      	mov	r1, r3
		property.uiMinValue = 10000;
 80062f2:	f242 7710 	movw	r7, #10000	; 0x2710
		result = EditValue(0xFF, &property);
 80062f6:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200000;
 80062f8:	e9c3 2706 	strd	r2, r7, [r3, #24]
		usInpValue = dev_settings.sideL_callibration;
 80062fc:	6034      	str	r4, [r6, #0]
		result = EditValue(0xFF, &property);
 80062fe:	f000 fd19 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 8006302:	2301      	movs	r3, #1
 8006304:	702b      	strb	r3, [r5, #0]
		break;
 8006306:	e79f      	b.n	8006248 <sideL_callibrate+0x14>
			dev_settings.sideL_callibration = usInpValue;
 8006308:	4a04      	ldr	r2, [pc, #16]	; (800631c <sideL_callibrate+0xe8>)
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <sideL_callibrate+0x104>)
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
			dev_settings_save();
 8006310:	f7fe ffc4 	bl	800529c <dev_settings_save>
 8006314:	e7bc      	b.n	8006290 <sideL_callibrate+0x5c>
 8006316:	bf00      	nop
 8006318:	200000e1 	.word	0x200000e1
 800631c:	200000e4 	.word	0x200000e4
 8006320:	200006d8 	.word	0x200006d8
 8006324:	20000680 	.word	0x20000680
 8006328:	0800b958 	.word	0x0800b958
 800632c:	200006e8 	.word	0x200006e8
 8006330:	200006ac 	.word	0x200006ac
 8006334:	200006a4 	.word	0x200006a4
 8006338:	20000624 	.word	0x20000624
 800633c:	fa050404 	.word	0xfa050404
 8006340:	00030d40 	.word	0x00030d40
 8006344:	200006a8 	.word	0x200006a8

08006348 <sideR_callibrate>:

unsigned char sideR_callibrate(unsigned char kbd_key) {
 8006348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char tmp_str[24];
	char result;

	switch (setup_state) {
 800634c:	4d37      	ldr	r5, [pc, #220]	; (800642c <sideR_callibrate+0xe4>)
 800634e:	782c      	ldrb	r4, [r5, #0]
unsigned char sideR_callibrate(unsigned char kbd_key) {
 8006350:	b088      	sub	sp, #32
	switch (setup_state) {
 8006352:	2c00      	cmp	r4, #0
 8006354:	d02e      	beq.n	80063b4 <sideR_callibrate+0x6c>
 8006356:	2c01      	cmp	r4, #1
 8006358:	d01d      	beq.n	8006396 <sideR_callibrate+0x4e>
 800635a:	4e35      	ldr	r6, [pc, #212]	; (8006430 <sideR_callibrate+0xe8>)
			return 1; // ESC  - go back without new value in the buffer
		}
		break;
	}

	front_b_value = usInpValue / sensor_values[2];
 800635c:	4a35      	ldr	r2, [pc, #212]	; (8006434 <sideR_callibrate+0xec>)
 800635e:	4d36      	ldr	r5, [pc, #216]	; (8006438 <sideR_callibrate+0xf0>)
 8006360:	6833      	ldr	r3, [r6, #0]
 8006362:	8892      	ldrh	r2, [r2, #4]
	sprintf(tmp_str, "%3d", front_b_value);
 8006364:	4935      	ldr	r1, [pc, #212]	; (800643c <sideR_callibrate+0xf4>)
	front_b_value = usInpValue / sensor_values[2];
 8006366:	fbb3 f3f2 	udiv	r3, r3, r2
	sprintf(tmp_str, "%3d", front_b_value);
 800636a:	ac02      	add	r4, sp, #8
 800636c:	461a      	mov	r2, r3
 800636e:	4620      	mov	r0, r4
	front_b_value = usInpValue / sensor_values[2];
 8006370:	602b      	str	r3, [r5, #0]
	sprintf(tmp_str, "%3d", front_b_value);
 8006372:	f002 fcd7 	bl	8008d24 <siprintf>
	LcdTextXY(0, 2, BIG_FNT, CENTERED | NORM_LINE, tmp_str);
 8006376:	2305      	movs	r3, #5
 8006378:	2203      	movs	r2, #3
 800637a:	2102      	movs	r1, #2
 800637c:	2000      	movs	r0, #0
 800637e:	9400      	str	r4, [sp, #0]
 8006380:	f7fe f8fe 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8006384:	f7fe fd50 	bl	8004e28 <LcdUpdate>
	 setup_state = ST_ECR_INIT;
	 gusKeyRepeatTimer = 0
	 return 2; // ESC  - go back without new value in the buffer
	 }
	 */
	gusKeyRepeatTimer = 10;		// 100ms
 8006388:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <sideR_callibrate+0xf8>)
 800638a:	220a      	movs	r2, #10
	return 0;
 800638c:	2000      	movs	r0, #0
	gusKeyRepeatTimer = 10;		// 100ms
 800638e:	801a      	strh	r2, [r3, #0]
}
 8006390:	b008      	add	sp, #32
 8006392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = EditValue(kbd_key, &property);
 8006396:	492b      	ldr	r1, [pc, #172]	; (8006444 <sideR_callibrate+0xfc>)
 8006398:	f000 fccc 	bl	8006d34 <EditValue>
		if (result == 1) {
 800639c:	2801      	cmp	r0, #1
 800639e:	d03d      	beq.n	800641c <sideR_callibrate+0xd4>
		if (result) {
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d0da      	beq.n	800635a <sideR_callibrate+0x12>
			gusKeyRepeatTimer = 0;
 80063a4:	4a26      	ldr	r2, [pc, #152]	; (8006440 <sideR_callibrate+0xf8>)
			setup_state = ST_ECR_INIT;
 80063a6:	2300      	movs	r3, #0
			return 1; // ESC  - go back without new value in the buffer
 80063a8:	2001      	movs	r0, #1
			gusKeyRepeatTimer = 0;
 80063aa:	8013      	strh	r3, [r2, #0]
			setup_state = ST_ECR_INIT;
 80063ac:	702b      	strb	r3, [r5, #0]
}
 80063ae:	b008      	add	sp, #32
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80063b4:	4f24      	ldr	r7, [pc, #144]	; (8006448 <sideR_callibrate+0x100>)
 80063b6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006458 <sideR_callibrate+0x110>
		usInpValue = dev_settings.sideR_callibration;
 80063ba:	4e1d      	ldr	r6, [pc, #116]	; (8006430 <sideR_callibrate+0xe8>)
		LcdBox(2, 4, 125, 60);
 80063bc:	233c      	movs	r3, #60	; 0x3c
 80063be:	227d      	movs	r2, #125	; 0x7d
 80063c0:	2104      	movs	r1, #4
 80063c2:	2002      	movs	r0, #2
 80063c4:	f7fe faf4 	bl	80049b0 <LcdBox>
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f898 2000 	ldrb.w	r2, [r8]
 80063ce:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80063d2:	4621      	mov	r1, r4
 80063d4:	6852      	ldr	r2, [r2, #4]
 80063d6:	9200      	str	r2, [sp, #0]
 80063d8:	4620      	mov	r0, r4
 80063da:	2304      	movs	r3, #4
 80063dc:	2201      	movs	r2, #1
 80063de:	f7fe f8cf 	bl	8004580 <LcdTextXY>
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80063e2:	f898 1000 	ldrb.w	r1, [r8]
 80063e6:	683a      	ldr	r2, [r7, #0]
		property.pucValue = (char*) &usInpValue;
 80063e8:	4b16      	ldr	r3, [pc, #88]	; (8006444 <sideR_callibrate+0xfc>)
		usInpValue = dev_settings.sideR_callibration;
 80063ea:	4c18      	ldr	r4, [pc, #96]	; (800644c <sideR_callibrate+0x104>)
		property.x_pos = 4;
 80063ec:	4818      	ldr	r0, [pc, #96]	; (8006450 <sideR_callibrate+0x108>)
 80063ee:	6018      	str	r0, [r3, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80063f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 250; // input step
 80063f4:	f240 1103 	movw	r1, #259	; 0x103
 80063f8:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80063fa:	6851      	ldr	r1, [r2, #4]
		property.uiMaxValue = 200000;
 80063fc:	4a15      	ldr	r2, [pc, #84]	; (8006454 <sideR_callibrate+0x10c>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80063fe:	60d9      	str	r1, [r3, #12]
		usInpValue = dev_settings.sideR_callibration;
 8006400:	6ca4      	ldr	r4, [r4, #72]	; 0x48
		property.pucValue = (char*) &usInpValue;
 8006402:	609e      	str	r6, [r3, #8]
		result = EditValue(0xFF, &property);
 8006404:	4619      	mov	r1, r3
		property.uiMinValue = 10000;
 8006406:	f242 7710 	movw	r7, #10000	; 0x2710
		result = EditValue(0xFF, &property);
 800640a:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200000;
 800640c:	e9c3 2706 	strd	r2, r7, [r3, #24]
		usInpValue = dev_settings.sideR_callibration;
 8006410:	6034      	str	r4, [r6, #0]
		result = EditValue(0xFF, &property);
 8006412:	f000 fc8f 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 8006416:	2301      	movs	r3, #1
 8006418:	702b      	strb	r3, [r5, #0]
		break;
 800641a:	e79f      	b.n	800635c <sideR_callibrate+0x14>
			dev_settings.sideR_callibration = usInpValue;
 800641c:	4a04      	ldr	r2, [pc, #16]	; (8006430 <sideR_callibrate+0xe8>)
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <sideR_callibrate+0x104>)
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	649a      	str	r2, [r3, #72]	; 0x48
			dev_settings_save();
 8006424:	f7fe ff3a 	bl	800529c <dev_settings_save>
 8006428:	e7bc      	b.n	80063a4 <sideR_callibrate+0x5c>
 800642a:	bf00      	nop
 800642c:	200000e1 	.word	0x200000e1
 8006430:	200000e4 	.word	0x200000e4
 8006434:	200006d8 	.word	0x200006d8
 8006438:	20000684 	.word	0x20000684
 800643c:	0800b958 	.word	0x0800b958
 8006440:	200006e8 	.word	0x200006e8
 8006444:	200006ac 	.word	0x200006ac
 8006448:	200006a4 	.word	0x200006a4
 800644c:	20000624 	.word	0x20000624
 8006450:	fa050404 	.word	0xfa050404
 8006454:	00030d40 	.word	0x00030d40
 8006458:	200006a8 	.word	0x200006a8

0800645c <left_callibrate>:
//=====================================================================================

//--------------------------------------
unsigned char left_callibrate(unsigned char kbd_key) {
 800645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char tmp_str[24];
	char result;

	switch (setup_state) {
 8006460:	4d37      	ldr	r5, [pc, #220]	; (8006540 <left_callibrate+0xe4>)
 8006462:	782c      	ldrb	r4, [r5, #0]
unsigned char left_callibrate(unsigned char kbd_key) {
 8006464:	b088      	sub	sp, #32
	switch (setup_state) {
 8006466:	2c00      	cmp	r4, #0
 8006468:	d02e      	beq.n	80064c8 <left_callibrate+0x6c>
 800646a:	2c01      	cmp	r4, #1
 800646c:	d01d      	beq.n	80064aa <left_callibrate+0x4e>
 800646e:	4e35      	ldr	r6, [pc, #212]	; (8006544 <left_callibrate+0xe8>)
			return 1; // ESC  - go back without new value in the buffer
		}
		break;
	}

	front_a_value = usInpValue / sensor_values[5];
 8006470:	4a35      	ldr	r2, [pc, #212]	; (8006548 <left_callibrate+0xec>)
 8006472:	4d36      	ldr	r5, [pc, #216]	; (800654c <left_callibrate+0xf0>)
 8006474:	6833      	ldr	r3, [r6, #0]
 8006476:	8952      	ldrh	r2, [r2, #10]
	sprintf(tmp_str, "%3d", front_a_value);
 8006478:	4935      	ldr	r1, [pc, #212]	; (8006550 <left_callibrate+0xf4>)
	front_a_value = usInpValue / sensor_values[5];
 800647a:	fbb3 f3f2 	udiv	r3, r3, r2
	sprintf(tmp_str, "%3d", front_a_value);
 800647e:	ac02      	add	r4, sp, #8
 8006480:	461a      	mov	r2, r3
 8006482:	4620      	mov	r0, r4
	front_a_value = usInpValue / sensor_values[5];
 8006484:	602b      	str	r3, [r5, #0]
	sprintf(tmp_str, "%3d", front_a_value);
 8006486:	f002 fc4d 	bl	8008d24 <siprintf>
	LcdTextXY(0, 2, BIG_FNT, CENTERED | NORM_LINE, tmp_str);
 800648a:	2305      	movs	r3, #5
 800648c:	2203      	movs	r2, #3
 800648e:	2102      	movs	r1, #2
 8006490:	2000      	movs	r0, #0
 8006492:	9400      	str	r4, [sp, #0]
 8006494:	f7fe f874 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8006498:	f7fe fcc6 	bl	8004e28 <LcdUpdate>
	 setup_state = ST_ECR_INIT;
	 gusKeyRepeatTimer = 0
	 return 2; // ESC  - go back without new value in the buffer
	 }
	 */
	gusKeyRepeatTimer = 10;		// 100ms
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <left_callibrate+0xf8>)
 800649e:	220a      	movs	r2, #10
	return 0;
 80064a0:	2000      	movs	r0, #0
	gusKeyRepeatTimer = 10;		// 100ms
 80064a2:	801a      	strh	r2, [r3, #0]
}
 80064a4:	b008      	add	sp, #32
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = EditValue(kbd_key, &property);
 80064aa:	492b      	ldr	r1, [pc, #172]	; (8006558 <left_callibrate+0xfc>)
 80064ac:	f000 fc42 	bl	8006d34 <EditValue>
		if (result == 1) {
 80064b0:	2801      	cmp	r0, #1
 80064b2:	d03d      	beq.n	8006530 <left_callibrate+0xd4>
		if (result) {
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d0da      	beq.n	800646e <left_callibrate+0x12>
			gusKeyRepeatTimer = 0;
 80064b8:	4a26      	ldr	r2, [pc, #152]	; (8006554 <left_callibrate+0xf8>)
			setup_state = ST_ECR_INIT;
 80064ba:	2300      	movs	r3, #0
			return 1; // ESC  - go back without new value in the buffer
 80064bc:	2001      	movs	r0, #1
			gusKeyRepeatTimer = 0;
 80064be:	8013      	strh	r3, [r2, #0]
			setup_state = ST_ECR_INIT;
 80064c0:	702b      	strb	r3, [r5, #0]
}
 80064c2:	b008      	add	sp, #32
 80064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80064c8:	4f24      	ldr	r7, [pc, #144]	; (800655c <left_callibrate+0x100>)
 80064ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800656c <left_callibrate+0x110>
		usInpValue = dev_settings.left_callibration;
 80064ce:	4e1d      	ldr	r6, [pc, #116]	; (8006544 <left_callibrate+0xe8>)
		LcdBox(2, 4, 125, 60);
 80064d0:	233c      	movs	r3, #60	; 0x3c
 80064d2:	227d      	movs	r2, #125	; 0x7d
 80064d4:	2104      	movs	r1, #4
 80064d6:	2002      	movs	r0, #2
 80064d8:	f7fe fa6a 	bl	80049b0 <LcdBox>
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f898 2000 	ldrb.w	r2, [r8]
 80064e2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80064e6:	4621      	mov	r1, r4
 80064e8:	6852      	ldr	r2, [r2, #4]
 80064ea:	9200      	str	r2, [sp, #0]
 80064ec:	4620      	mov	r0, r4
 80064ee:	2304      	movs	r3, #4
 80064f0:	2201      	movs	r2, #1
 80064f2:	f7fe f845 	bl	8004580 <LcdTextXY>
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80064f6:	f898 1000 	ldrb.w	r1, [r8]
 80064fa:	683a      	ldr	r2, [r7, #0]
		property.pucValue = (char*) &usInpValue;
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <left_callibrate+0xfc>)
		usInpValue = dev_settings.left_callibration;
 80064fe:	4c18      	ldr	r4, [pc, #96]	; (8006560 <left_callibrate+0x104>)
		property.x_pos = 4;
 8006500:	4818      	ldr	r0, [pc, #96]	; (8006564 <left_callibrate+0x108>)
 8006502:	6018      	str	r0, [r3, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8006504:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 250; // input step
 8006508:	f240 1103 	movw	r1, #259	; 0x103
 800650c:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800650e:	6851      	ldr	r1, [r2, #4]
		property.uiMaxValue = 200000;
 8006510:	4a15      	ldr	r2, [pc, #84]	; (8006568 <left_callibrate+0x10c>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8006512:	60d9      	str	r1, [r3, #12]
		usInpValue = dev_settings.left_callibration;
 8006514:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
		property.pucValue = (char*) &usInpValue;
 8006516:	609e      	str	r6, [r3, #8]
		result = EditValue(0xFF, &property);
 8006518:	4619      	mov	r1, r3
		property.uiMinValue = 10000;
 800651a:	f242 7710 	movw	r7, #10000	; 0x2710
		result = EditValue(0xFF, &property);
 800651e:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200000;
 8006520:	e9c3 2706 	strd	r2, r7, [r3, #24]
		usInpValue = dev_settings.left_callibration;
 8006524:	6034      	str	r4, [r6, #0]
		result = EditValue(0xFF, &property);
 8006526:	f000 fc05 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 800652a:	2301      	movs	r3, #1
 800652c:	702b      	strb	r3, [r5, #0]
		break;
 800652e:	e79f      	b.n	8006470 <left_callibrate+0x14>
			dev_settings.left_callibration = usInpValue;
 8006530:	4a04      	ldr	r2, [pc, #16]	; (8006544 <left_callibrate+0xe8>)
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <left_callibrate+0x104>)
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	64da      	str	r2, [r3, #76]	; 0x4c
			dev_settings_save();
 8006538:	f7fe feb0 	bl	800529c <dev_settings_save>
 800653c:	e7bc      	b.n	80064b8 <left_callibrate+0x5c>
 800653e:	bf00      	nop
 8006540:	200000e1 	.word	0x200000e1
 8006544:	200000e4 	.word	0x200000e4
 8006548:	200006d8 	.word	0x200006d8
 800654c:	20000680 	.word	0x20000680
 8006550:	0800b958 	.word	0x0800b958
 8006554:	200006e8 	.word	0x200006e8
 8006558:	200006ac 	.word	0x200006ac
 800655c:	200006a4 	.word	0x200006a4
 8006560:	20000624 	.word	0x20000624
 8006564:	fa050404 	.word	0xfa050404
 8006568:	00030d40 	.word	0x00030d40
 800656c:	200006a8 	.word	0x200006a8

08006570 <right_callibrate>:

unsigned char right_callibrate(unsigned char kbd_key) {
 8006570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char tmp_str[24];
	char result;

	switch (setup_state) {
 8006574:	4d37      	ldr	r5, [pc, #220]	; (8006654 <right_callibrate+0xe4>)
 8006576:	782c      	ldrb	r4, [r5, #0]
unsigned char right_callibrate(unsigned char kbd_key) {
 8006578:	b088      	sub	sp, #32
	switch (setup_state) {
 800657a:	2c00      	cmp	r4, #0
 800657c:	d02e      	beq.n	80065dc <right_callibrate+0x6c>
 800657e:	2c01      	cmp	r4, #1
 8006580:	d01d      	beq.n	80065be <right_callibrate+0x4e>
 8006582:	4e35      	ldr	r6, [pc, #212]	; (8006658 <right_callibrate+0xe8>)
			return 1; // ESC  - go back without new value in the buffer
		}
		break;
	}

	front_b_value = usInpValue / sensor_values[0];
 8006584:	4a35      	ldr	r2, [pc, #212]	; (800665c <right_callibrate+0xec>)
 8006586:	4d36      	ldr	r5, [pc, #216]	; (8006660 <right_callibrate+0xf0>)
 8006588:	6833      	ldr	r3, [r6, #0]
 800658a:	8812      	ldrh	r2, [r2, #0]
	sprintf(tmp_str, " %3d", front_b_value);
 800658c:	4935      	ldr	r1, [pc, #212]	; (8006664 <right_callibrate+0xf4>)
	front_b_value = usInpValue / sensor_values[0];
 800658e:	fbb3 f3f2 	udiv	r3, r3, r2
	sprintf(tmp_str, " %3d", front_b_value);
 8006592:	ac02      	add	r4, sp, #8
 8006594:	461a      	mov	r2, r3
 8006596:	4620      	mov	r0, r4
	front_b_value = usInpValue / sensor_values[0];
 8006598:	602b      	str	r3, [r5, #0]
	sprintf(tmp_str, " %3d", front_b_value);
 800659a:	f002 fbc3 	bl	8008d24 <siprintf>
	LcdTextXY(0, 2, BIG_FNT, CENTERED | NORM_LINE, tmp_str);
 800659e:	2305      	movs	r3, #5
 80065a0:	2203      	movs	r2, #3
 80065a2:	2102      	movs	r1, #2
 80065a4:	2000      	movs	r0, #0
 80065a6:	9400      	str	r4, [sp, #0]
 80065a8:	f7fd ffea 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 80065ac:	f7fe fc3c 	bl	8004e28 <LcdUpdate>
	 setup_state = ST_ECR_INIT;
	 gusKeyRepeatTimer = 0
	 return 2; // ESC  - go back without new value in the buffer
	 }
	 */
	gusKeyRepeatTimer = 10;		// 100ms
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <right_callibrate+0xf8>)
 80065b2:	220a      	movs	r2, #10
	return 0;
 80065b4:	2000      	movs	r0, #0
	gusKeyRepeatTimer = 10;		// 100ms
 80065b6:	801a      	strh	r2, [r3, #0]
}
 80065b8:	b008      	add	sp, #32
 80065ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = EditValue(kbd_key, &property);
 80065be:	492b      	ldr	r1, [pc, #172]	; (800666c <right_callibrate+0xfc>)
 80065c0:	f000 fbb8 	bl	8006d34 <EditValue>
		if (result == 1) {
 80065c4:	2801      	cmp	r0, #1
 80065c6:	d03d      	beq.n	8006644 <right_callibrate+0xd4>
		if (result) {
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0da      	beq.n	8006582 <right_callibrate+0x12>
			gusKeyRepeatTimer = 0;
 80065cc:	4a26      	ldr	r2, [pc, #152]	; (8006668 <right_callibrate+0xf8>)
			setup_state = ST_ECR_INIT;
 80065ce:	2300      	movs	r3, #0
			return 1; // ESC  - go back without new value in the buffer
 80065d0:	2001      	movs	r0, #1
			gusKeyRepeatTimer = 0;
 80065d2:	8013      	strh	r3, [r2, #0]
			setup_state = ST_ECR_INIT;
 80065d4:	702b      	strb	r3, [r5, #0]
}
 80065d6:	b008      	add	sp, #32
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80065dc:	4f24      	ldr	r7, [pc, #144]	; (8006670 <right_callibrate+0x100>)
 80065de:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006680 <right_callibrate+0x110>
		usInpValue = dev_settings.right_callibration;
 80065e2:	4e1d      	ldr	r6, [pc, #116]	; (8006658 <right_callibrate+0xe8>)
		LcdBox(2, 4, 125, 60);
 80065e4:	233c      	movs	r3, #60	; 0x3c
 80065e6:	227d      	movs	r2, #125	; 0x7d
 80065e8:	2104      	movs	r1, #4
 80065ea:	2002      	movs	r0, #2
 80065ec:	f7fe f9e0 	bl	80049b0 <LcdBox>
		LcdTextXY(0, 0, NORMAL_FNT, CENTERED, (char*) currentMenu[currentMenuNumber].menuTitle);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f898 2000 	ldrb.w	r2, [r8]
 80065f6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80065fa:	4621      	mov	r1, r4
 80065fc:	6852      	ldr	r2, [r2, #4]
 80065fe:	9200      	str	r2, [sp, #0]
 8006600:	4620      	mov	r0, r4
 8006602:	2304      	movs	r3, #4
 8006604:	2201      	movs	r2, #1
 8006606:	f7fd ffbb 	bl	8004580 <LcdTextXY>
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 800660a:	f898 1000 	ldrb.w	r1, [r8]
 800660e:	683a      	ldr	r2, [r7, #0]
		property.pucValue = (char*) &usInpValue;
 8006610:	4b16      	ldr	r3, [pc, #88]	; (800666c <right_callibrate+0xfc>)
		usInpValue = dev_settings.right_callibration;
 8006612:	4c18      	ldr	r4, [pc, #96]	; (8006674 <right_callibrate+0x104>)
		property.x_pos = 4;
 8006614:	4818      	ldr	r0, [pc, #96]	; (8006678 <right_callibrate+0x108>)
 8006616:	6018      	str	r0, [r3, #0]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8006618:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucFractSize = 250; // input step
 800661c:	f240 1103 	movw	r1, #259	; 0x103
 8006620:	8099      	strh	r1, [r3, #4]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8006622:	6851      	ldr	r1, [r2, #4]
		property.uiMaxValue = 200000;
 8006624:	4a15      	ldr	r2, [pc, #84]	; (800667c <right_callibrate+0x10c>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 8006626:	60d9      	str	r1, [r3, #12]
		usInpValue = dev_settings.right_callibration;
 8006628:	6d24      	ldr	r4, [r4, #80]	; 0x50
		property.pucValue = (char*) &usInpValue;
 800662a:	609e      	str	r6, [r3, #8]
		result = EditValue(0xFF, &property);
 800662c:	4619      	mov	r1, r3
		property.uiMinValue = 10000;
 800662e:	f242 7710 	movw	r7, #10000	; 0x2710
		result = EditValue(0xFF, &property);
 8006632:	20ff      	movs	r0, #255	; 0xff
		property.uiMaxValue = 200000;
 8006634:	e9c3 2706 	strd	r2, r7, [r3, #24]
		usInpValue = dev_settings.right_callibration;
 8006638:	6034      	str	r4, [r6, #0]
		result = EditValue(0xFF, &property);
 800663a:	f000 fb7b 	bl	8006d34 <EditValue>
		setup_state = ST_ECR_INPUT;
 800663e:	2301      	movs	r3, #1
 8006640:	702b      	strb	r3, [r5, #0]
		break;
 8006642:	e79f      	b.n	8006584 <right_callibrate+0x14>
			dev_settings.right_callibration = usInpValue;
 8006644:	4a04      	ldr	r2, [pc, #16]	; (8006658 <right_callibrate+0xe8>)
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <right_callibrate+0x104>)
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	651a      	str	r2, [r3, #80]	; 0x50
			dev_settings_save();
 800664c:	f7fe fe26 	bl	800529c <dev_settings_save>
 8006650:	e7bc      	b.n	80065cc <right_callibrate+0x5c>
 8006652:	bf00      	nop
 8006654:	200000e1 	.word	0x200000e1
 8006658:	200000e4 	.word	0x200000e4
 800665c:	200006d8 	.word	0x200006d8
 8006660:	20000684 	.word	0x20000684
 8006664:	0800b95c 	.word	0x0800b95c
 8006668:	200006e8 	.word	0x200006e8
 800666c:	200006ac 	.word	0x200006ac
 8006670:	200006a4 	.word	0x200006a4
 8006674:	20000624 	.word	0x20000624
 8006678:	fa050404 	.word	0xfa050404
 800667c:	00030d40 	.word	0x00030d40
 8006680:	200006a8 	.word	0x200006a8

08006684 <start_way_set>:


//-------------------------------------------------------------------
unsigned char start_way_set(unsigned char kbd_key) {
 8006684:	b570      	push	{r4, r5, r6, lr}
	unsigned char result;
	result = 0;

	switch (setup_state) {
 8006686:	4d1f      	ldr	r5, [pc, #124]	; (8006704 <start_way_set+0x80>)
 8006688:	782c      	ldrb	r4, [r5, #0]
unsigned char start_way_set(unsigned char kbd_key) {
 800668a:	b082      	sub	sp, #8
	switch (setup_state) {
 800668c:	b17c      	cbz	r4, 80066ae <start_way_set+0x2a>
 800668e:	2c01      	cmp	r4, #1
 8006690:	d10a      	bne.n	80066a8 <start_way_set+0x24>
		SelectBox(0xFF, &property);
		setup_state = ST_ECR_INPUT;
		break;

	case ST_ECR_INPUT:
		result = SelectBox(kbd_key, &property);
 8006692:	491d      	ldr	r1, [pc, #116]	; (8006708 <start_way_set+0x84>)
 8006694:	f000 fbda 	bl	8006e4c <SelectBox>
		//result = 1;
		break;
	}

	if (result == 1) {
 8006698:	2801      	cmp	r0, #1
 800669a:	d028      	beq.n	80066ee <start_way_set+0x6a>

	}

//------- Go back -------
//if ( kbd_key == KEY_MOD)  {
	if (result == 2) {
 800669c:	2802      	cmp	r0, #2
 800669e:	d103      	bne.n	80066a8 <start_way_set+0x24>
		setup_state = ST_ECR_INIT;
 80066a0:	2300      	movs	r3, #0
 80066a2:	702b      	strb	r3, [r5, #0]
		return 2; // ESC  - go back without new value in the buffer
	}
	return 0;
}
 80066a4:	b002      	add	sp, #8
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80066a8:	2000      	movs	r0, #0
}
 80066aa:	b002      	add	sp, #8
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <start_way_set+0x88>)
 80066b0:	4b17      	ldr	r3, [pc, #92]	; (8006710 <start_way_set+0x8c>)
 80066b2:	7811      	ldrb	r1, [r2, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
		property.pucSelect = (char**) &str_MazeStart;
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <start_way_set+0x84>)
		usInpValue = maze_settings.start_way;
 80066b8:	4816      	ldr	r0, [pc, #88]	; (8006714 <start_way_set+0x90>)
 80066ba:	4e17      	ldr	r6, [pc, #92]	; (8006718 <start_way_set+0x94>)
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80066bc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		property.ucOptions = 3;
 80066c0:	2103      	movs	r1, #3
 80066c2:	7519      	strb	r1, [r3, #20]
		property.pucTitle = (char*) currentMenu[currentMenuNumber].menuTitle;
 80066c4:	6851      	ldr	r1, [r2, #4]
 80066c6:	60d9      	str	r1, [r3, #12]
		property.pucSelect = (char**) &str_MazeStart;
 80066c8:	4914      	ldr	r1, [pc, #80]	; (800671c <start_way_set+0x98>)
 80066ca:	6119      	str	r1, [r3, #16]
		property.x_pos = 1;
 80066cc:	f240 1101 	movw	r1, #257	; 0x101
 80066d0:	8019      	strh	r1, [r3, #0]
		property.y_pos = 1;
 80066d2:	2110      	movs	r1, #16
		usInpValue = maze_settings.start_way;
 80066d4:	6902      	ldr	r2, [r0, #16]
		property.y_pos = 1;
 80066d6:	7099      	strb	r1, [r3, #2]
		SelectBox(0xFF, &property);
 80066d8:	20ff      	movs	r0, #255	; 0xff
 80066da:	4619      	mov	r1, r3
		property.pucValue = (char*) &usInpValue;
 80066dc:	609e      	str	r6, [r3, #8]
		usInpValue = maze_settings.start_way;
 80066de:	6032      	str	r2, [r6, #0]
		SelectBox(0xFF, &property);
 80066e0:	f000 fbb4 	bl	8006e4c <SelectBox>
		setup_state = ST_ECR_INPUT;
 80066e4:	2301      	movs	r3, #1
	return 0;
 80066e6:	4620      	mov	r0, r4
		setup_state = ST_ECR_INPUT;
 80066e8:	702b      	strb	r3, [r5, #0]
}
 80066ea:	b002      	add	sp, #8
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
		maze_settings.start_way = usInpValue;
 80066ee:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <start_way_set+0x94>)
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <start_way_set+0x90>)
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	9001      	str	r0, [sp, #4]
 80066f6:	611a      	str	r2, [r3, #16]
		maze_settings_save();
 80066f8:	f7fe fde8 	bl	80052cc <maze_settings_save>
		setup_state = ST_ECR_INIT;
 80066fc:	2300      	movs	r3, #0
 80066fe:	702b      	strb	r3, [r5, #0]
		return 1; // ESC  - go back without new value in the buffer
 8006700:	9801      	ldr	r0, [sp, #4]
 8006702:	e7d2      	b.n	80066aa <start_way_set+0x26>
 8006704:	200000e1 	.word	0x200000e1
 8006708:	200006ac 	.word	0x200006ac
 800670c:	200006a8 	.word	0x200006a8
 8006710:	200006a4 	.word	0x200006a4
 8006714:	2000060c 	.word	0x2000060c
 8006718:	200000e4 	.word	0x200000e4
 800671c:	0800b8cc 	.word	0x0800b8cc

08006720 <MENU_printMenu>:
	 LcdUpdate();
	 */
}

//-------------------------------- Print Menu ----------------------------------
void MENU_printMenu() {
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	b089      	sub	sp, #36	; 0x24
	unsigned char i;
	char menu_item[22];

	LcdErase();
 8006726:	f7fd ff07 	bl	8004538 <LcdErase>
	sprintf(navbar, " %s", parentMenuTitle[currentMenuLevel]);
 800672a:	4a29      	ldr	r2, [pc, #164]	; (80067d0 <MENU_printMenu+0xb0>)
 800672c:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <MENU_printMenu+0xb4>)
 800672e:	4c2a      	ldr	r4, [pc, #168]	; (80067d8 <MENU_printMenu+0xb8>)
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	492a      	ldr	r1, [pc, #168]	; (80067dc <MENU_printMenu+0xbc>)
 8006734:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	LcdTextXY(0, 0, BIG_FNT, INV_LINE, navbar);
	//LcdInvertRow(0);
	//LcdHLine(0,127,7,0);
	y = MENU_DEFAULT_Y;
	for (i = currentMenuOffset; i < currentMenuSize && i < currentMenuOffset + MENU_MAX_MENU_ITEMS_LCD; i++) {
 8006738:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80067ec <MENU_printMenu+0xcc>
 800673c:	4d28      	ldr	r5, [pc, #160]	; (80067e0 <MENU_printMenu+0xc0>)
	y = MENU_DEFAULT_Y;
 800673e:	4e29      	ldr	r6, [pc, #164]	; (80067e4 <MENU_printMenu+0xc4>)
	sprintf(navbar, " %s", parentMenuTitle[currentMenuLevel]);
 8006740:	4620      	mov	r0, r4
 8006742:	f002 faef 	bl	8008d24 <siprintf>
	LcdTextXY(0, 0, BIG_FNT, INV_LINE, navbar);
 8006746:	2100      	movs	r1, #0
 8006748:	9400      	str	r4, [sp, #0]
 800674a:	2308      	movs	r3, #8
 800674c:	2203      	movs	r2, #3
 800674e:	4608      	mov	r0, r1
 8006750:	f7fd ff16 	bl	8004580 <LcdTextXY>
	for (i = currentMenuOffset; i < currentMenuSize && i < currentMenuOffset + MENU_MAX_MENU_ITEMS_LCD; i++) {
 8006754:	f898 4000 	ldrb.w	r4, [r8]
 8006758:	782b      	ldrb	r3, [r5, #0]
	y = MENU_DEFAULT_Y;
 800675a:	2202      	movs	r2, #2
	for (i = currentMenuOffset; i < currentMenuSize && i < currentMenuOffset + MENU_MAX_MENU_ITEMS_LCD; i++) {
 800675c:	42a3      	cmp	r3, r4
	y = MENU_DEFAULT_Y;
 800675e:	7032      	strb	r2, [r6, #0]
	for (i = currentMenuOffset; i < currentMenuSize && i < currentMenuOffset + MENU_MAX_MENU_ITEMS_LCD; i++) {
 8006760:	d930      	bls.n	80067c4 <MENU_printMenu+0xa4>
 8006762:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80067f0 <MENU_printMenu+0xd0>
 8006766:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80067f4 <MENU_printMenu+0xd4>
		if (op_access_level > currentMenu[i].access_level) {
			sprintf(menu_item, "%d.%s", i + 1, currentMenu[i].menuTitle);
 800676a:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80067f8 <MENU_printMenu+0xd8>
 800676e:	af02      	add	r7, sp, #8
 8006770:	e008      	b.n	8006784 <MENU_printMenu+0x64>
	for (i = currentMenuOffset; i < currentMenuSize && i < currentMenuOffset + MENU_MAX_MENU_ITEMS_LCD; i++) {
 8006772:	782b      	ldrb	r3, [r5, #0]
 8006774:	b2e4      	uxtb	r4, r4
 8006776:	42a3      	cmp	r3, r4
 8006778:	d924      	bls.n	80067c4 <MENU_printMenu+0xa4>
 800677a:	f898 3000 	ldrb.w	r3, [r8]
 800677e:	3305      	adds	r3, #5
 8006780:	42a3      	cmp	r3, r4
 8006782:	db1f      	blt.n	80067c4 <MENU_printMenu+0xa4>
		if (op_access_level > currentMenu[i].access_level) {
 8006784:	0123      	lsls	r3, r4, #4
 8006786:	f8da 2000 	ldr.w	r2, [sl]
 800678a:	f899 1000 	ldrb.w	r1, [r9]
 800678e:	5cd0      	ldrb	r0, [r2, r3]
 8006790:	4288      	cmp	r0, r1
 8006792:	4413      	add	r3, r2
			sprintf(menu_item, "%d.%s", i + 1, currentMenu[i].menuTitle);
 8006794:	f104 0401 	add.w	r4, r4, #1
		if (op_access_level > currentMenu[i].access_level) {
 8006798:	d2eb      	bcs.n	8006772 <MENU_printMenu+0x52>
			sprintf(menu_item, "%d.%s", i + 1, currentMenu[i].menuTitle);
 800679a:	4622      	mov	r2, r4
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4659      	mov	r1, fp
 80067a0:	4638      	mov	r0, r7
 80067a2:	f002 fabf 	bl	8008d24 <siprintf>
			//LcdTextXY(x,y +( i - currentMenuOffset) ,NORMAL_FNT,NORM_LINE,menu_item);
			LcdTextXY(x, y, NORMAL_FNT, NORM_LINE, menu_item);
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <MENU_printMenu+0xc8>)
 80067a8:	7831      	ldrb	r1, [r6, #0]
 80067aa:	7818      	ldrb	r0, [r3, #0]
 80067ac:	9700      	str	r7, [sp, #0]
 80067ae:	2301      	movs	r3, #1
 80067b0:	461a      	mov	r2, r3
 80067b2:	f7fd fee5 	bl	8004580 <LcdTextXY>
			y++;
 80067b6:	7833      	ldrb	r3, [r6, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	7033      	strb	r3, [r6, #0]
	for (i = currentMenuOffset; i < currentMenuSize && i < currentMenuOffset + MENU_MAX_MENU_ITEMS_LCD; i++) {
 80067bc:	782b      	ldrb	r3, [r5, #0]
 80067be:	b2e4      	uxtb	r4, r4
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d8da      	bhi.n	800677a <MENU_printMenu+0x5a>
		}
	}
	//if (selectedMenuItem !=-1)
	//	MENU_printMenuItem(selectedMenuItem,1);
	LcdUpdate();
 80067c4:	f7fe fb30 	bl	8004e28 <LcdUpdate>
}
 80067c8:	b009      	add	sp, #36	; 0x24
 80067ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ce:	bf00      	nop
 80067d0:	200000e8 	.word	0x200000e8
 80067d4:	20000114 	.word	0x20000114
 80067d8:	2000068c 	.word	0x2000068c
 80067dc:	0800b9d0 	.word	0x0800b9d0
 80067e0:	200000ea 	.word	0x200000ea
 80067e4:	20000029 	.word	0x20000029
 80067e8:	20000135 	.word	0x20000135
 80067ec:	200000e9 	.word	0x200000e9
 80067f0:	200006a4 	.word	0x200006a4
 80067f4:	200000f0 	.word	0x200000f0
 80067f8:	0800b9d4 	.word	0x0800b9d4

080067fc <MENU_init>:
	currentMenu = rootMenu;
 80067fc:	4a18      	ldr	r2, [pc, #96]	; (8006860 <MENU_init+0x64>)
	selectedMenuItem = -1;
 80067fe:	4919      	ldr	r1, [pc, #100]	; (8006864 <MENU_init+0x68>)
void MENU_init(const ST_MENUPOINT* rootMenu) {
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	currentMenuLevel = 0;
 8006802:	4c19      	ldr	r4, [pc, #100]	; (8006868 <MENU_init+0x6c>)
	menuState = 0;
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <MENU_init+0x70>)
	x = MENU_DEFAULT_X;
 8006806:	4d1a      	ldr	r5, [pc, #104]	; (8006870 <MENU_init+0x74>)
	currentMenu = rootMenu;
 8006808:	6010      	str	r0, [r2, #0]
	currentMenuOffset = 0;
 800680a:	2200      	movs	r2, #0
	currentMenuLevel = 0;
 800680c:	7022      	strb	r2, [r4, #0]
	currentMenuOffset = 0;
 800680e:	4f19      	ldr	r7, [pc, #100]	; (8006874 <MENU_init+0x78>)
	op_access_level = 10;
 8006810:	4c19      	ldr	r4, [pc, #100]	; (8006878 <MENU_init+0x7c>)
	currentMenuNumber = 0;
 8006812:	4e1a      	ldr	r6, [pc, #104]	; (800687c <MENU_init+0x80>)
	menuState = 0;
 8006814:	701a      	strb	r2, [r3, #0]
	x = MENU_DEFAULT_X;
 8006816:	702a      	strb	r2, [r5, #0]
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <MENU_init+0x84>)
	currentMenuOffset = 0;
 800681a:	703a      	strb	r2, [r7, #0]
	selectedMenuItem = -1;
 800681c:	25ff      	movs	r5, #255	; 0xff
 800681e:	700d      	strb	r5, [r1, #0]
	op_access_level = 10;
 8006820:	250a      	movs	r5, #10
 8006822:	4918      	ldr	r1, [pc, #96]	; (8006884 <MENU_init+0x88>)
 8006824:	7025      	strb	r5, [r4, #0]
	currentMenuNumber = 0;
 8006826:	7032      	strb	r2, [r6, #0]
 8006828:	f103 0420 	add.w	r4, r3, #32
		parentMenu[i] = NULL;
 800682c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < MENU_MAX_LEVEL; i++) {		// Clear parent Menu path
 8006830:	42a3      	cmp	r3, r4
		parentMenuTitle[i] = NULL;
 8006832:	f841 2f04 	str.w	r2, [r1, #4]!
	for (i = 0; i < MENU_MAX_LEVEL; i++) {		// Clear parent Menu path
 8006836:	d1f9      	bne.n	800682c <MENU_init+0x30>
 8006838:	2300      	movs	r3, #0
}

///-----------------------------------------------------------------------------
unsigned char MENU_getMenuSize(const ST_MENUPOINT * menu) {
	unsigned char i;
	for (i = 0; i < MENU_MAX_MENU_ITEMS && menu[i].menuTitle; i++)
 800683a:	6842      	ldr	r2, [r0, #4]
 800683c:	b2d9      	uxtb	r1, r3
 800683e:	3010      	adds	r0, #16
 8006840:	3301      	adds	r3, #1
 8006842:	b112      	cbz	r2, 800684a <MENU_init+0x4e>
 8006844:	2b0a      	cmp	r3, #10
 8006846:	d1f8      	bne.n	800683a <MENU_init+0x3e>
 8006848:	4619      	mov	r1, r3
	parentMenuTitle[0] = mainTitle;
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <MENU_init+0x8c>)
	currentMenuSize = MENU_getMenuSize(currentMenu);
 800684c:	480f      	ldr	r0, [pc, #60]	; (800688c <MENU_init+0x90>)
	parentMenuTitle[0] = mainTitle;
 800684e:	4a10      	ldr	r2, [pc, #64]	; (8006890 <MENU_init+0x94>)
 8006850:	601a      	str	r2, [r3, #0]
	currentMenuSize = MENU_getMenuSize(currentMenu);
 8006852:	7001      	strb	r1, [r0, #0]
	LcdErase();
 8006854:	f7fd fe70 	bl	8004538 <LcdErase>
}
 8006858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	MENU_printMenu();
 800685c:	f7ff bf60 	b.w	8006720 <MENU_printMenu>
 8006860:	200006a4 	.word	0x200006a4
 8006864:	20000134 	.word	0x20000134
 8006868:	200000e8 	.word	0x200000e8
 800686c:	200000ef 	.word	0x200000ef
 8006870:	20000135 	.word	0x20000135
 8006874:	200000e9 	.word	0x200000e9
 8006878:	200000f0 	.word	0x200000f0
 800687c:	200006a8 	.word	0x200006a8
 8006880:	200000f0 	.word	0x200000f0
 8006884:	20000110 	.word	0x20000110
 8006888:	20000114 	.word	0x20000114
 800688c:	200000ea 	.word	0x200000ea
 8006890:	0800b4c8 	.word	0x0800b4c8

08006894 <MENU_printMenuItem>:
void MENU_printMenuItem(unsigned char menuNumber, char style) {
 8006894:	b570      	push	{r4, r5, r6, lr}
	y = MENU_DEFAULT_Y - currentMenuOffset;
 8006896:	4b19      	ldr	r3, [pc, #100]	; (80068fc <MENU_printMenuItem+0x68>)
 8006898:	4d19      	ldr	r5, [pc, #100]	; (8006900 <MENU_printMenuItem+0x6c>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	f1c3 0202 	rsb	r2, r3, #2
	if ((menuNumber - currentMenuOffset) < MENU_MAX_MENU_ITEMS_LCD) {
 80068a0:	1ac3      	subs	r3, r0, r3
 80068a2:	2b05      	cmp	r3, #5
void MENU_printMenuItem(unsigned char menuNumber, char style) {
 80068a4:	b088      	sub	sp, #32
	y = MENU_DEFAULT_Y - currentMenuOffset;
 80068a6:	702a      	strb	r2, [r5, #0]
	if ((menuNumber - currentMenuOffset) < MENU_MAX_MENU_ITEMS_LCD) {
 80068a8:	dd03      	ble.n	80068b2 <MENU_printMenuItem+0x1e>
	LcdUpdate();
 80068aa:	f7fe fabd 	bl	8004e28 <LcdUpdate>
}
 80068ae:	b008      	add	sp, #32
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(menu_item, "%d.%s", menuNumber + 1, currentMenu[menuNumber].menuTitle);
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <MENU_printMenuItem+0x70>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80068ba:	4604      	mov	r4, r0
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	460e      	mov	r6, r1
 80068c0:	a802      	add	r0, sp, #8
 80068c2:	4911      	ldr	r1, [pc, #68]	; (8006908 <MENU_printMenuItem+0x74>)
 80068c4:	1c62      	adds	r2, r4, #1
 80068c6:	f002 fa2d 	bl	8008d24 <siprintf>
			LcdTextXY(x, menuNumber + y, NORMAL_FNT, INV_LINE, menu_item);
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <MENU_printMenuItem+0x78>)
 80068cc:	7829      	ldrb	r1, [r5, #0]
 80068ce:	7818      	ldrb	r0, [r3, #0]
 80068d0:	ab02      	add	r3, sp, #8
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4421      	add	r1, r4
		if (style)
 80068d6:	b946      	cbnz	r6, 80068ea <MENU_printMenuItem+0x56>
			LcdTextXY(x, menuNumber + y, NORMAL_FNT, NORM_LINE, menu_item);
 80068d8:	2301      	movs	r3, #1
 80068da:	b2c9      	uxtb	r1, r1
 80068dc:	461a      	mov	r2, r3
 80068de:	f7fd fe4f 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 80068e2:	f7fe faa1 	bl	8004e28 <LcdUpdate>
}
 80068e6:	b008      	add	sp, #32
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
			LcdTextXY(x, menuNumber + y, NORMAL_FNT, INV_LINE, menu_item);
 80068ea:	b2c9      	uxtb	r1, r1
 80068ec:	2308      	movs	r3, #8
 80068ee:	2201      	movs	r2, #1
 80068f0:	f7fd fe46 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 80068f4:	f7fe fa98 	bl	8004e28 <LcdUpdate>
}
 80068f8:	b008      	add	sp, #32
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	200000e9 	.word	0x200000e9
 8006900:	20000029 	.word	0x20000029
 8006904:	200006a4 	.word	0x200006a4
 8006908:	0800b9d4 	.word	0x0800b9d4
 800690c:	20000135 	.word	0x20000135

08006910 <MENU_gtoDefaultMenu>:
	return i;
}

//------------------------------------------------------------------------------
void MENU_gtoDefaultMenu(void) {
	if (!gucAdminMode) {
 8006910:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <MENU_gtoDefaultMenu+0x38>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b113      	cbz	r3, 800691c <MENU_gtoDefaultMenu+0xc>
		LcdErase();
		(currentMenu[currentMenuNumber].menuHandlerCallback)(0xFF);	//<- clear button		//( buttonPressed);  //<--- must be state function with key checking
		menuState = 2;
		op_access_level = 1;
	} else {
		MENU_init(rootMenu);
 8006916:	480d      	ldr	r0, [pc, #52]	; (800694c <MENU_gtoDefaultMenu+0x3c>)
 8006918:	f7ff bf70 	b.w	80067fc <MENU_init>
void MENU_gtoDefaultMenu(void) {
 800691c:	b510      	push	{r4, lr}
		currentMenuLevel = 0;
 800691e:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <MENU_gtoDefaultMenu+0x40>)
		currentMenuNumber = 0;
 8006920:	4c0c      	ldr	r4, [pc, #48]	; (8006954 <MENU_gtoDefaultMenu+0x44>)
		currentMenuLevel = 0;
 8006922:	7013      	strb	r3, [r2, #0]
		currentMenuNumber = 0;
 8006924:	7023      	strb	r3, [r4, #0]
		LcdErase();
 8006926:	f7fd fe07 	bl	8004538 <LcdErase>
		(currentMenu[currentMenuNumber].menuHandlerCallback)(0xFF);	//<- clear button		//( buttonPressed);  //<--- must be state function with key checking
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <MENU_gtoDefaultMenu+0x48>)
 800692c:	7822      	ldrb	r2, [r4, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006934:	20ff      	movs	r0, #255	; 0xff
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4798      	blx	r3
		menuState = 2;
 800693a:	4908      	ldr	r1, [pc, #32]	; (800695c <MENU_gtoDefaultMenu+0x4c>)
		op_access_level = 1;
 800693c:	4b08      	ldr	r3, [pc, #32]	; (8006960 <MENU_gtoDefaultMenu+0x50>)
		menuState = 2;
 800693e:	2002      	movs	r0, #2
		op_access_level = 1;
 8006940:	2201      	movs	r2, #1
		menuState = 2;
 8006942:	7008      	strb	r0, [r1, #0]
		op_access_level = 1;
 8006944:	701a      	strb	r2, [r3, #0]
	}
}
 8006946:	bd10      	pop	{r4, pc}
 8006948:	200000eb 	.word	0x200000eb
 800694c:	0800b5f4 	.word	0x0800b5f4
 8006950:	200000e8 	.word	0x200000e8
 8006954:	200006a8 	.word	0x200006a8
 8006958:	200006a4 	.word	0x200006a4
 800695c:	200000ef 	.word	0x200000ef
 8006960:	200000f0 	.word	0x200000f0

08006964 <MENU_handler>:

//----------------------------  Menu Handler -----------------------------------
// * This function handles the events which comes from keyboard.
// * Before using this function, you should initialize the menu system. 

void MENU_handler(unsigned char buttonPressed) {
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char handler_result;

	//  ToDo for warnins - must save screen and menu state, then go to warnings state.
	//  After warning accepted - restore screen and state
	if (gucWarnings)
 8006968:	4dab      	ldr	r5, [pc, #684]	; (8006c18 <MENU_handler+0x2b4>)
		menuState = 3;
 800696a:	4cac      	ldr	r4, [pc, #688]	; (8006c1c <MENU_handler+0x2b8>)
	if (gucWarnings)
 800696c:	782b      	ldrb	r3, [r5, #0]
void MENU_handler(unsigned char buttonPressed) {
 800696e:	b082      	sub	sp, #8
	if (gucWarnings)
 8006970:	b32b      	cbz	r3, 80069be <MENU_handler+0x5a>
		menuState = 3;
 8006972:	2203      	movs	r2, #3
 8006974:	7022      	strb	r2, [r4, #0]
		break;
		//-------------- Non handeled warnings ----------------
	case 3:
		selectedMenuItem = gucWarnings;

		if (menuWarnings[selectedMenuItem].menuHandlerCallback) {
 8006976:	4aaa      	ldr	r2, [pc, #680]	; (8006c20 <MENU_handler+0x2bc>)
		selectedMenuItem = gucWarnings;
 8006978:	4eaa      	ldr	r6, [pc, #680]	; (8006c24 <MENU_handler+0x2c0>)
 800697a:	b259      	sxtb	r1, r3
		if (menuWarnings[selectedMenuItem].menuHandlerCallback) {
 800697c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		selectedMenuItem = gucWarnings;
 8006980:	7031      	strb	r1, [r6, #0]
		if (menuWarnings[selectedMenuItem].menuHandlerCallback) {
 8006982:	68d2      	ldr	r2, [r2, #12]
 8006984:	2a00      	cmp	r2, #0
 8006986:	f000 80cf 	beq.w	8006b28 <MENU_handler+0x1c4>
			//--------------  Callback function --------
			if ((menuWarnings[selectedMenuItem].menuHandlerCallback)(0xFF)) {		// Cal the handler of the event
 800698a:	20ff      	movs	r0, #255	; 0xff
 800698c:	4790      	blx	r2
 800698e:	2800      	cmp	r0, #0
 8006990:	f000 80bd 	beq.w	8006b0e <MENU_handler+0x1aa>
				if (gucDefaultMenu) {
 8006994:	4ba4      	ldr	r3, [pc, #656]	; (8006c28 <MENU_handler+0x2c4>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f040 80bb 	bne.w	8006b14 <MENU_handler+0x1b0>
					MENU_gtoDefaultMenu();
				} else if (op_access_level > 0) {
 800699e:	4ba3      	ldr	r3, [pc, #652]	; (8006c2c <MENU_handler+0x2c8>)
 80069a0:	781f      	ldrb	r7, [r3, #0]
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	f040 80b9 	bne.w	8006b1a <MENU_handler+0x1b6>
	case 4:
		if ((menuWarnings[selectedMenuItem].menuHandlerCallback)(buttonPressed)) {
			if (gucDefaultMenu) {
				MENU_gtoDefaultMenu();
			} else if (op_access_level < 1) {
				MENU_init(rootMenu);
 80069a8:	48a1      	ldr	r0, [pc, #644]	; (8006c30 <MENU_handler+0x2cc>)
 80069aa:	f7ff ff27 	bl	80067fc <MENU_init>
				menuState = 0;
 80069ae:	7027      	strb	r7, [r4, #0]
				selectedMenuItem = -1;
				currentMenuOffset = 0;
				MENU_printMenu();	// Restore the last menu, after finished callback function

			}
			gucEventFlag = 0;			// Clear flag - event handler is completed
 80069b0:	4aa0      	ldr	r2, [pc, #640]	; (8006c34 <MENU_handler+0x2d0>)
 80069b2:	2300      	movs	r3, #0
 80069b4:	7013      	strb	r3, [r2, #0]
			gucWarnings = W_NOWARNING;
 80069b6:	702b      	strb	r3, [r5, #0]
		}
		break;
	}

}
 80069b8:	b002      	add	sp, #8
 80069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (menuState) {
 80069be:	7822      	ldrb	r2, [r4, #0]
 80069c0:	2a04      	cmp	r2, #4
 80069c2:	d8f9      	bhi.n	80069b8 <MENU_handler+0x54>
 80069c4:	a101      	add	r1, pc, #4	; (adr r1, 80069cc <MENU_handler+0x68>)
 80069c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	08006a5f 	.word	0x08006a5f
 80069d0:	08006a5f 	.word	0x08006a5f
 80069d4:	08006a19 	.word	0x08006a19
 80069d8:	08006977 	.word	0x08006977
 80069dc:	080069e1 	.word	0x080069e1
		if ((menuWarnings[selectedMenuItem].menuHandlerCallback)(buttonPressed)) {
 80069e0:	4e90      	ldr	r6, [pc, #576]	; (8006c24 <MENU_handler+0x2c0>)
 80069e2:	4b8f      	ldr	r3, [pc, #572]	; (8006c20 <MENU_handler+0x2bc>)
 80069e4:	f996 2000 	ldrsb.w	r2, [r6]
 80069e8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	4798      	blx	r3
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d0e1      	beq.n	80069b8 <MENU_handler+0x54>
			if (gucDefaultMenu) {
 80069f4:	4b8c      	ldr	r3, [pc, #560]	; (8006c28 <MENU_handler+0x2c4>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 808b 	bne.w	8006b14 <MENU_handler+0x1b0>
			} else if (op_access_level < 1) {
 80069fe:	4a8b      	ldr	r2, [pc, #556]	; (8006c2c <MENU_handler+0x2c8>)
 8006a00:	7817      	ldrb	r7, [r2, #0]
 8006a02:	2f00      	cmp	r7, #0
 8006a04:	d0d0      	beq.n	80069a8 <MENU_handler+0x44>
				currentMenuOffset = 0;
 8006a06:	498c      	ldr	r1, [pc, #560]	; (8006c38 <MENU_handler+0x2d4>)
				menuState = 1;
 8006a08:	2201      	movs	r2, #1
				currentMenuOffset = 0;
 8006a0a:	700b      	strb	r3, [r1, #0]
				selectedMenuItem = -1;
 8006a0c:	23ff      	movs	r3, #255	; 0xff
				menuState = 1;
 8006a0e:	7022      	strb	r2, [r4, #0]
				selectedMenuItem = -1;
 8006a10:	7033      	strb	r3, [r6, #0]
				MENU_printMenu();	// Restore the last menu, after finished callback function
 8006a12:	f7ff fe85 	bl	8006720 <MENU_printMenu>
 8006a16:	e7cb      	b.n	80069b0 <MENU_handler+0x4c>
		if (handler_result = (currentMenu[currentMenuNumber].menuHandlerCallback)(buttonPressed)) {
 8006a18:	4d88      	ldr	r5, [pc, #544]	; (8006c3c <MENU_handler+0x2d8>)
 8006a1a:	4e89      	ldr	r6, [pc, #548]	; (8006c40 <MENU_handler+0x2dc>)
 8006a1c:	782a      	ldrb	r2, [r5, #0]
 8006a1e:	6833      	ldr	r3, [r6, #0]
 8006a20:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	4798      	blx	r3
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0c5      	beq.n	80069b8 <MENU_handler+0x54>
			if ((currentMenu[currentMenuNumber].psubMenu) && (handler_result == 1)) {
 8006a2c:	6832      	ldr	r2, [r6, #0]
 8006a2e:	782b      	ldrb	r3, [r5, #0]
 8006a30:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006a34:	6899      	ldr	r1, [r3, #8]
 8006a36:	b111      	cbz	r1, 8006a3e <MENU_handler+0xda>
 8006a38:	2801      	cmp	r0, #1
 8006a3a:	f000 8096 	beq.w	8006b6a <MENU_handler+0x206>
				menuState = 1;
 8006a3e:	2501      	movs	r5, #1
 8006a40:	7025      	strb	r5, [r4, #0]
				MENU_printMenu();	// Restore the last menu, after finished callback function
 8006a42:	f7ff fe6d 	bl	8006720 <MENU_printMenu>
				if (selectedMenuItem != -1)
 8006a46:	4b77      	ldr	r3, [pc, #476]	; (8006c24 <MENU_handler+0x2c0>)
 8006a48:	f993 0000 	ldrsb.w	r0, [r3]
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d0b3      	beq.n	80069b8 <MENU_handler+0x54>
					MENU_printMenuItem(selectedMenuItem, 1);
 8006a50:	4629      	mov	r1, r5
 8006a52:	b2c0      	uxtb	r0, r0
}
 8006a54:	b002      	add	sp, #8
 8006a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					MENU_printMenuItem(selectedMenuItem, 1);
 8006a5a:	f7ff bf1b 	b.w	8006894 <MENU_printMenuItem>
		if (buttonPressed == KEY_DN) {
 8006a5e:	2801      	cmp	r0, #1
 8006a60:	d02e      	beq.n	8006ac0 <MENU_handler+0x15c>
		} else if (buttonPressed == KEY_UP) {
 8006a62:	2802      	cmp	r0, #2
 8006a64:	d06a      	beq.n	8006b3c <MENU_handler+0x1d8>
		if ((buttonPressed == KEY_TL) && (selectedMenuItem != -1)) {
 8006a66:	2803      	cmp	r0, #3
 8006a68:	f040 80a2 	bne.w	8006bb0 <MENU_handler+0x24c>
 8006a6c:	4d6d      	ldr	r5, [pc, #436]	; (8006c24 <MENU_handler+0x2c0>)
 8006a6e:	f995 3000 	ldrsb.w	r3, [r5]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	d0a0      	beq.n	80069b8 <MENU_handler+0x54>
			if ((currentMenuNumber < currentMenuSize) && ((op_access_level > currentMenu[currentMenuNumber].access_level))) {
 8006a76:	4a73      	ldr	r2, [pc, #460]	; (8006c44 <MENU_handler+0x2e0>)
			currentMenuNumber = selectedMenuItem;
 8006a78:	4e70      	ldr	r6, [pc, #448]	; (8006c3c <MENU_handler+0x2d8>)
			if ((currentMenuNumber < currentMenuSize) && ((op_access_level > currentMenu[currentMenuNumber].access_level))) {
 8006a7a:	7811      	ldrb	r1, [r2, #0]
			currentMenuNumber = selectedMenuItem;
 8006a7c:	b2db      	uxtb	r3, r3
			if ((currentMenuNumber < currentMenuSize) && ((op_access_level > currentMenu[currentMenuNumber].access_level))) {
 8006a7e:	4299      	cmp	r1, r3
			currentMenuNumber = selectedMenuItem;
 8006a80:	7033      	strb	r3, [r6, #0]
			if ((currentMenuNumber < currentMenuSize) && ((op_access_level > currentMenu[currentMenuNumber].access_level))) {
 8006a82:	d999      	bls.n	80069b8 <MENU_handler+0x54>
 8006a84:	4f6e      	ldr	r7, [pc, #440]	; (8006c40 <MENU_handler+0x2dc>)
 8006a86:	4969      	ldr	r1, [pc, #420]	; (8006c2c <MENU_handler+0x2c8>)
 8006a88:	6838      	ldr	r0, [r7, #0]
 8006a8a:	7809      	ldrb	r1, [r1, #0]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	eb00 0c03 	add.w	ip, r0, r3
 8006a92:	5cc3      	ldrb	r3, [r0, r3]
 8006a94:	428b      	cmp	r3, r1
 8006a96:	d28f      	bcs.n	80069b8 <MENU_handler+0x54>
				if (currentMenu[currentMenuNumber].menuHandlerCallback) {
 8006a98:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	f000 80d9 	beq.w	8006c54 <MENU_handler+0x2f0>
					LcdErase();
 8006aa2:	f7fd fd49 	bl	8004538 <LcdErase>
					if ((currentMenu[currentMenuNumber].menuHandlerCallback)(0xFE)) { //<- clear button		//( buttonPressed);  //<--- must be state function with key checking
 8006aa6:	7832      	ldrb	r2, [r6, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006aae:	20fe      	movs	r0, #254	; 0xfe
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	4798      	blx	r3
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f040 8110 	bne.w	8006cda <MENU_handler+0x376>
						menuState = 2;
 8006aba:	2302      	movs	r3, #2
 8006abc:	7023      	strb	r3, [r4, #0]
 8006abe:	e77b      	b.n	80069b8 <MENU_handler+0x54>
			if ((selectedMenuItem < (currentMenuSize - 1))
 8006ac0:	4b60      	ldr	r3, [pc, #384]	; (8006c44 <MENU_handler+0x2e0>)
 8006ac2:	4e58      	ldr	r6, [pc, #352]	; (8006c24 <MENU_handler+0x2c0>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f996 2000 	ldrsb.w	r2, [r6]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	429a      	cmp	r2, r3
 8006ace:	f6bf af73 	bge.w	80069b8 <MENU_handler+0x54>
					&& (op_access_level > currentMenu[selectedMenuItem + 1].access_level)) {
 8006ad2:	4b5b      	ldr	r3, [pc, #364]	; (8006c40 <MENU_handler+0x2dc>)
 8006ad4:	4955      	ldr	r1, [pc, #340]	; (8006c2c <MENU_handler+0x2c8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	7809      	ldrb	r1, [r1, #0]
 8006ada:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006ade:	7c1b      	ldrb	r3, [r3, #16]
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	f4bf af69 	bcs.w	80069b8 <MENU_handler+0x54>
				if (selectedMenuItem - currentMenuOffset > MENU_MAX_MENU_ITEMS_LCD - 2) {
 8006ae6:	4954      	ldr	r1, [pc, #336]	; (8006c38 <MENU_handler+0x2d4>)
 8006ae8:	780b      	ldrb	r3, [r1, #0]
 8006aea:	1ad0      	subs	r0, r2, r3
 8006aec:	2804      	cmp	r0, #4
 8006aee:	f300 808b 	bgt.w	8006c08 <MENU_handler+0x2a4>
 8006af2:	b2d0      	uxtb	r0, r2
				if (selectedMenuItem != -1)
 8006af4:	3201      	adds	r2, #1
 8006af6:	f000 8085 	beq.w	8006c04 <MENU_handler+0x2a0>
					MENU_printMenuItem(selectedMenuItem, 0);
 8006afa:	2100      	movs	r1, #0
 8006afc:	f7ff feca 	bl	8006894 <MENU_printMenuItem>
 8006b00:	7833      	ldrb	r3, [r6, #0]
				selectedMenuItem++;
 8006b02:	3301      	adds	r3, #1
 8006b04:	b2db      	uxtb	r3, r3
				MENU_printMenuItem(selectedMenuItem, 1);
 8006b06:	4618      	mov	r0, r3
 8006b08:	2101      	movs	r1, #1
				selectedMenuItem++;
 8006b0a:	7033      	strb	r3, [r6, #0]
 8006b0c:	e7a2      	b.n	8006a54 <MENU_handler+0xf0>
				menuState = 4;
 8006b0e:	2304      	movs	r3, #4
 8006b10:	7023      	strb	r3, [r4, #0]
 8006b12:	e751      	b.n	80069b8 <MENU_handler+0x54>
				MENU_gtoDefaultMenu();
 8006b14:	f7ff fefc 	bl	8006910 <MENU_gtoDefaultMenu>
 8006b18:	e74a      	b.n	80069b0 <MENU_handler+0x4c>
					menuState = 1;
 8006b1a:	2201      	movs	r2, #1
					selectedMenuItem = -1;
 8006b1c:	23ff      	movs	r3, #255	; 0xff
					menuState = 1;
 8006b1e:	7022      	strb	r2, [r4, #0]
					selectedMenuItem = -1;
 8006b20:	7033      	strb	r3, [r6, #0]
					MENU_printMenu();
 8006b22:	f7ff fdfd 	bl	8006720 <MENU_printMenu>
 8006b26:	e743      	b.n	80069b0 <MENU_handler+0x4c>
			if (MessageBox(gucWarnings, buttonPressed)) {
 8006b28:	4601      	mov	r1, r0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fa60 	bl	8006ff0 <MessageBox>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f040 80c0 	bne.w	8006cb6 <MENU_handler+0x352>
			gucWarnings = W_NOWARNING;
 8006b36:	2300      	movs	r3, #0
 8006b38:	702b      	strb	r3, [r5, #0]
 8006b3a:	e73d      	b.n	80069b8 <MENU_handler+0x54>
			if (selectedMenuItem > 0) {
 8006b3c:	4e39      	ldr	r6, [pc, #228]	; (8006c24 <MENU_handler+0x2c0>)
 8006b3e:	f996 0000 	ldrsb.w	r0, [r6]
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f77f af38 	ble.w	80069b8 <MENU_handler+0x54>
				if (currentMenuOffset > 0 && selectedMenuItem - currentMenuOffset == 0) {
 8006b48:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <MENU_handler+0x2d4>)
 8006b4a:	7813      	ldrb	r3, [r2, #0]
 8006b4c:	b113      	cbz	r3, 8006b54 <MENU_handler+0x1f0>
 8006b4e:	4298      	cmp	r0, r3
 8006b50:	f000 80aa 	beq.w	8006ca8 <MENU_handler+0x344>
				MENU_printMenuItem(selectedMenuItem, 0);
 8006b54:	b2c0      	uxtb	r0, r0
 8006b56:	2100      	movs	r1, #0
 8006b58:	f7ff fe9c 	bl	8006894 <MENU_printMenuItem>
				selectedMenuItem--;
 8006b5c:	7833      	ldrb	r3, [r6, #0]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b2db      	uxtb	r3, r3
				MENU_printMenuItem(selectedMenuItem, 1);
 8006b62:	4618      	mov	r0, r3
 8006b64:	2101      	movs	r1, #1
				selectedMenuItem--;
 8006b66:	7033      	strb	r3, [r6, #0]
 8006b68:	e774      	b.n	8006a54 <MENU_handler+0xf0>
				parentMenu[currentMenuLevel] = currentMenu;
 8006b6a:	4837      	ldr	r0, [pc, #220]	; (8006c48 <MENU_handler+0x2e4>)
 8006b6c:	4f37      	ldr	r7, [pc, #220]	; (8006c4c <MENU_handler+0x2e8>)
 8006b6e:	7801      	ldrb	r1, [r0, #0]
				parentMenuTitle[currentMenuLevel] = currentMenu[currentMenuNumber].menuTitle;
 8006b70:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8006c50 <MENU_handler+0x2ec>
				parentMenu[currentMenuLevel] = currentMenu;
 8006b74:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
				currentMenuLevel += 1;
 8006b78:	3101      	adds	r1, #1
 8006b7a:	b2c9      	uxtb	r1, r1
				currentMenu = currentMenu[currentMenuNumber].psubMenu;
 8006b7c:	689a      	ldr	r2, [r3, #8]
				selectedMenuItem = -1;
 8006b7e:	4f29      	ldr	r7, [pc, #164]	; (8006c24 <MENU_handler+0x2c0>)
				parentMenuTitle[currentMenuLevel] = currentMenu[currentMenuNumber].menuTitle;
 8006b80:	685b      	ldr	r3, [r3, #4]
				currentMenuLevel += 1;
 8006b82:	7001      	strb	r1, [r0, #0]
				parentMenuTitle[currentMenuLevel] = currentMenu[currentMenuNumber].menuTitle;
 8006b84:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
				selectedMenuItem = -1;
 8006b88:	20ff      	movs	r0, #255	; 0xff
				currentMenuNumber = 0;
 8006b8a:	2300      	movs	r3, #0
				currentMenu = currentMenu[currentMenuNumber].psubMenu;
 8006b8c:	6032      	str	r2, [r6, #0]
				selectedMenuItem = -1;
 8006b8e:	7038      	strb	r0, [r7, #0]
				currentMenuNumber = 0;
 8006b90:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < MENU_MAX_MENU_ITEMS && menu[i].menuTitle; i++)
 8006b92:	6851      	ldr	r1, [r2, #4]
 8006b94:	b2d8      	uxtb	r0, r3
 8006b96:	3210      	adds	r2, #16
 8006b98:	3301      	adds	r3, #1
 8006b9a:	b111      	cbz	r1, 8006ba2 <MENU_handler+0x23e>
 8006b9c:	2b0a      	cmp	r3, #10
 8006b9e:	d1f8      	bne.n	8006b92 <MENU_handler+0x22e>
 8006ba0:	4618      	mov	r0, r3
				currentMenuSize = MENU_getMenuSize(currentMenu);
 8006ba2:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <MENU_handler+0x2e0>)
 8006ba4:	7018      	strb	r0, [r3, #0]
				MENU_printMenu();
 8006ba6:	f7ff fdbb 	bl	8006720 <MENU_printMenu>
				menuState = 1;
 8006baa:	2301      	movs	r3, #1
 8006bac:	7023      	strb	r3, [r4, #0]
 8006bae:	e703      	b.n	80069b8 <MENU_handler+0x54>
		if (buttonPressed == KEY_BACK) {
 8006bb0:	280b      	cmp	r0, #11
 8006bb2:	f47f af01 	bne.w	80069b8 <MENU_handler+0x54>
			if (currentMenuLevel) {
 8006bb6:	4924      	ldr	r1, [pc, #144]	; (8006c48 <MENU_handler+0x2e4>)
 8006bb8:	780b      	ldrb	r3, [r1, #0]
 8006bba:	b1f3      	cbz	r3, 8006bfa <MENU_handler+0x296>
				currentMenuLevel--;
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b2db      	uxtb	r3, r3
				currentMenu = parentMenu[currentMenuLevel];
 8006bc0:	4a22      	ldr	r2, [pc, #136]	; (8006c4c <MENU_handler+0x2e8>)
 8006bc2:	4d1f      	ldr	r5, [pc, #124]	; (8006c40 <MENU_handler+0x2dc>)
				currentMenuLevel--;
 8006bc4:	700b      	strb	r3, [r1, #0]
				currentMenu = parentMenu[currentMenuLevel];
 8006bc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				selectedMenuItem = -1;
 8006bca:	4816      	ldr	r0, [pc, #88]	; (8006c24 <MENU_handler+0x2c0>)
				currentMenuOffset = 0;
 8006bcc:	491a      	ldr	r1, [pc, #104]	; (8006c38 <MENU_handler+0x2d4>)
				currentMenu = parentMenu[currentMenuLevel];
 8006bce:	602a      	str	r2, [r5, #0]
				currentMenuOffset = 0;
 8006bd0:	2300      	movs	r3, #0
				selectedMenuItem = -1;
 8006bd2:	25ff      	movs	r5, #255	; 0xff
 8006bd4:	7005      	strb	r5, [r0, #0]
				currentMenuOffset = 0;
 8006bd6:	700b      	strb	r3, [r1, #0]
	for (i = 0; i < MENU_MAX_MENU_ITEMS && menu[i].menuTitle; i++)
 8006bd8:	6851      	ldr	r1, [r2, #4]
 8006bda:	b2d8      	uxtb	r0, r3
 8006bdc:	3210      	adds	r2, #16
 8006bde:	3301      	adds	r3, #1
 8006be0:	b111      	cbz	r1, 8006be8 <MENU_handler+0x284>
 8006be2:	2b0a      	cmp	r3, #10
 8006be4:	d1f8      	bne.n	8006bd8 <MENU_handler+0x274>
 8006be6:	4618      	mov	r0, r3
				currentMenuSize = MENU_getMenuSize(currentMenu);
 8006be8:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <MENU_handler+0x2e0>)
				menuState = 1;
 8006bea:	2301      	movs	r3, #1
				currentMenuSize = MENU_getMenuSize(currentMenu);
 8006bec:	7010      	strb	r0, [r2, #0]
				menuState = 1;
 8006bee:	7023      	strb	r3, [r4, #0]
}
 8006bf0:	b002      	add	sp, #8
 8006bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				MENU_printMenu();
 8006bf6:	f7ff bd93 	b.w	8006720 <MENU_printMenu>
}
 8006bfa:	b002      	add	sp, #8
 8006bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				HAL_NVIC_SystemReset();
 8006c00:	f7fa bdba 	b.w	8001778 <HAL_NVIC_SystemReset>
 8006c04:	23ff      	movs	r3, #255	; 0xff
 8006c06:	e77c      	b.n	8006b02 <MENU_handler+0x19e>
					currentMenuOffset++;
 8006c08:	3301      	adds	r3, #1
 8006c0a:	700b      	strb	r3, [r1, #0]
					MENU_printMenu();
 8006c0c:	f7ff fd88 	bl	8006720 <MENU_printMenu>
 8006c10:	f996 2000 	ldrsb.w	r2, [r6]
 8006c14:	e76d      	b.n	8006af2 <MENU_handler+0x18e>
 8006c16:	bf00      	nop
 8006c18:	200000ee 	.word	0x200000ee
 8006c1c:	200000ef 	.word	0x200000ef
 8006c20:	0800b524 	.word	0x0800b524
 8006c24:	20000134 	.word	0x20000134
 8006c28:	200000ec 	.word	0x200000ec
 8006c2c:	200000f0 	.word	0x200000f0
 8006c30:	0800b5f4 	.word	0x0800b5f4
 8006c34:	200000ed 	.word	0x200000ed
 8006c38:	200000e9 	.word	0x200000e9
 8006c3c:	200006a8 	.word	0x200006a8
 8006c40:	200006a4 	.word	0x200006a4
 8006c44:	200000ea 	.word	0x200000ea
 8006c48:	200000e8 	.word	0x200000e8
 8006c4c:	200000f4 	.word	0x200000f4
 8006c50:	20000114 	.word	0x20000114
				} else if (currentMenu[currentMenuNumber].psubMenu) { // Enter in Sub menu If exists
 8006c54:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f43f aead 	beq.w	80069b8 <MENU_handler+0x54>
					if (currentMenuLevel < MENU_MAX_LEVEL) {
 8006c5e:	4c2c      	ldr	r4, [pc, #176]	; (8006d10 <MENU_handler+0x3ac>)
 8006c60:	7823      	ldrb	r3, [r4, #0]
 8006c62:	2b07      	cmp	r3, #7
 8006c64:	d840      	bhi.n	8006ce8 <MENU_handler+0x384>
						parentMenu[currentMenuLevel] = currentMenu;
 8006c66:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8006d2c <MENU_handler+0x3c8>
						parentMenuTitle[currentMenuLevel] = currentMenu[currentMenuNumber].menuTitle;
 8006c6a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8006d30 <MENU_handler+0x3cc>
						parentMenu[currentMenuLevel] = currentMenu;
 8006c6e:	f84e 0023 	str.w	r0, [lr, r3, lsl #2]
						currentMenuLevel += 1;
 8006c72:	3301      	adds	r3, #1
 8006c74:	b2d8      	uxtb	r0, r3
						currentMenuNumber = 0;
 8006c76:	7031      	strb	r1, [r6, #0]
						currentMenuOffset = 0;
 8006c78:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8006d28 <MENU_handler+0x3c4>
						parentMenuTitle[currentMenuLevel] = currentMenu[currentMenuNumber].menuTitle;
 8006c7c:	f8dc 6004 	ldr.w	r6, [ip, #4]
						currentMenu = currentMenu[currentMenuNumber].psubMenu;
 8006c80:	f8dc 3008 	ldr.w	r3, [ip, #8]
						currentMenuLevel += 1;
 8006c84:	7020      	strb	r0, [r4, #0]
						parentMenuTitle[currentMenuLevel] = currentMenu[currentMenuNumber].menuTitle;
 8006c86:	f848 6020 	str.w	r6, [r8, r0, lsl #2]
						selectedMenuItem = -1;
 8006c8a:	24ff      	movs	r4, #255	; 0xff
						currentMenu = currentMenu[currentMenuNumber].psubMenu;
 8006c8c:	603b      	str	r3, [r7, #0]
						currentMenuOffset = 0;
 8006c8e:	f88e 1000 	strb.w	r1, [lr]
						selectedMenuItem = -1;
 8006c92:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < MENU_MAX_MENU_ITEMS && menu[i].menuTitle; i++)
 8006c94:	6858      	ldr	r0, [r3, #4]
 8006c96:	b2cc      	uxtb	r4, r1
 8006c98:	3310      	adds	r3, #16
 8006c9a:	3101      	adds	r1, #1
 8006c9c:	b110      	cbz	r0, 8006ca4 <MENU_handler+0x340>
 8006c9e:	290a      	cmp	r1, #10
 8006ca0:	d1f8      	bne.n	8006c94 <MENU_handler+0x330>
 8006ca2:	460c      	mov	r4, r1
						currentMenuSize = MENU_getMenuSize(currentMenu);
 8006ca4:	7014      	strb	r4, [r2, #0]
 8006ca6:	e7a3      	b.n	8006bf0 <MENU_handler+0x28c>
					currentMenuOffset--;
 8006ca8:	3801      	subs	r0, #1
 8006caa:	7010      	strb	r0, [r2, #0]
					MENU_printMenu();
 8006cac:	f7ff fd38 	bl	8006720 <MENU_printMenu>
 8006cb0:	f996 0000 	ldrsb.w	r0, [r6]
 8006cb4:	e74e      	b.n	8006b54 <MENU_handler+0x1f0>
				LcdErase();
 8006cb6:	f7fd fc3f 	bl	8004538 <LcdErase>
				if (gucDefaultMenu) {
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <MENU_handler+0x3b0>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	bb23      	cbnz	r3, 8006d0a <MENU_handler+0x3a6>
				} else if (op_access_level < 1) {
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <MENU_handler+0x3b4>)
 8006cc2:	7817      	ldrb	r7, [r2, #0]
 8006cc4:	b9c7      	cbnz	r7, 8006cf8 <MENU_handler+0x394>
					MENU_init(rootMenu);
 8006cc6:	4815      	ldr	r0, [pc, #84]	; (8006d1c <MENU_handler+0x3b8>)
 8006cc8:	f7ff fd98 	bl	80067fc <MENU_init>
					menuState = 0;
 8006ccc:	7027      	strb	r7, [r4, #0]
				gucEventFlag = 0;			// Clear flag - event handler is completed
 8006cce:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <MENU_handler+0x3bc>)
 8006cd0:	2100      	movs	r1, #0
				selectedMenuItem = -1;
 8006cd2:	23ff      	movs	r3, #255	; 0xff
				gucEventFlag = 0;			// Clear flag - event handler is completed
 8006cd4:	7011      	strb	r1, [r2, #0]
				selectedMenuItem = -1;
 8006cd6:	7033      	strb	r3, [r6, #0]
 8006cd8:	e72d      	b.n	8006b36 <MENU_handler+0x1d2>
						menuState = 1;
 8006cda:	2601      	movs	r6, #1
 8006cdc:	7026      	strb	r6, [r4, #0]
						MENU_printMenu();
 8006cde:	f7ff fd1f 	bl	8006720 <MENU_printMenu>
						MENU_printMenuItem(selectedMenuItem, 1);
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	7828      	ldrb	r0, [r5, #0]
 8006ce6:	e6b5      	b.n	8006a54 <MENU_handler+0xf0>
						LcdTextXY(0, 0, NORMAL_FNT, NORM_LINE, (char*) "Too many menu!");
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <MENU_handler+0x3c0>)
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	2301      	movs	r3, #1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	f7fd fc45 	bl	8004580 <LcdTextXY>
 8006cf6:	e65f      	b.n	80069b8 <MENU_handler+0x54>
					currentMenuOffset = 0;
 8006cf8:	490b      	ldr	r1, [pc, #44]	; (8006d28 <MENU_handler+0x3c4>)
					menuState = 1;
 8006cfa:	2201      	movs	r2, #1
					currentMenuOffset = 0;
 8006cfc:	700b      	strb	r3, [r1, #0]
					selectedMenuItem = -1;
 8006cfe:	23ff      	movs	r3, #255	; 0xff
					menuState = 1;
 8006d00:	7022      	strb	r2, [r4, #0]
					selectedMenuItem = -1;
 8006d02:	7033      	strb	r3, [r6, #0]
					MENU_printMenu();	// Restore the last menu, after finished callback function
 8006d04:	f7ff fd0c 	bl	8006720 <MENU_printMenu>
 8006d08:	e7e1      	b.n	8006cce <MENU_handler+0x36a>
					MENU_gtoDefaultMenu();
 8006d0a:	f7ff fe01 	bl	8006910 <MENU_gtoDefaultMenu>
 8006d0e:	e7de      	b.n	8006cce <MENU_handler+0x36a>
 8006d10:	200000e8 	.word	0x200000e8
 8006d14:	200000ec 	.word	0x200000ec
 8006d18:	200000f0 	.word	0x200000f0
 8006d1c:	0800b5f4 	.word	0x0800b5f4
 8006d20:	200000ed 	.word	0x200000ed
 8006d24:	0800b9c0 	.word	0x0800b9c0
 8006d28:	200000e9 	.word	0x200000e9
 8006d2c:	200000f4 	.word	0x200000f4
 8006d30:	20000114 	.word	0x20000114

08006d34 <EditValue>:
//			- 0 (false)  - working
//			- 1 (true)	 - Success - the input value is correct
//			- 2 (false)  - not sucsess or ESC(MOD ) key pressed
//----------------------------------------------------------------------

unsigned char EditValue(unsigned char kbd_key, S_EDITBOX *property) {
 8006d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d38:	688b      	ldr	r3, [r1, #8]
    unsigned int digit;
    char format_str[6];

    if (property->ucInit)
 8006d3a:	794d      	ldrb	r5, [r1, #5]
 8006d3c:	681e      	ldr	r6, [r3, #0]
        edit_state = ST_INIT;
 8006d3e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8006e48 <EditValue+0x114>
unsigned char EditValue(unsigned char kbd_key, S_EDITBOX *property) {
 8006d42:	b084      	sub	sp, #16
 8006d44:	460c      	mov	r4, r1
 8006d46:	4607      	mov	r7, r0
    if (property->ucInit)
 8006d48:	2d00      	cmp	r5, #0
 8006d4a:	d043      	beq.n	8006dd4 <EditValue+0xa0>
        edit_state = ST_INIT;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f888 3000 	strb.w	r3, [r8]

    //digit = *property->pucValue + (*(property->pucValue + 1) << 8);
    digit = *(unsigned int*)property->pucValue;
    switch (edit_state) {
        case ST_INIT:
            if (property->ucFractSize == 0)
 8006d52:	78e3      	ldrb	r3, [r4, #3]
 8006d54:	b90b      	cbnz	r3, 8006d5a <EditValue+0x26>
                property->ucFractSize = 1;
 8006d56:	2301      	movs	r3, #1
 8006d58:	70e3      	strb	r3, [r4, #3]

            if (!property->ucFont || property->ucFont > BIG_FNT) {
 8006d5a:	7923      	ldrb	r3, [r4, #4]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	2b02      	cmp	r3, #2
                property->ucFont = NORMAL_FNT;
 8006d60:	bf84      	itt	hi
 8006d62:	2301      	movhi	r3, #1
 8006d64:	7123      	strbhi	r3, [r4, #4]
            }
            LcdBox(2, 4, 125, 60);
 8006d66:	227d      	movs	r2, #125	; 0x7d
 8006d68:	233c      	movs	r3, #60	; 0x3c
 8006d6a:	2104      	movs	r1, #4
 8006d6c:	2002      	movs	r0, #2
 8006d6e:	f7fd fe1f 	bl	80049b0 <LcdBox>
            LcdTextXY(0, 0, NORMAL_FNT, CENTERED, property->pucTitle);
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	2100      	movs	r1, #0
 8006d78:	2304      	movs	r3, #4
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	f7fd fbff 	bl	8004580 <LcdTextXY>
            property->ucInit = 0;
            //input_ptr = 0;
            edit_state = ST_EDIT;
 8006d82:	2302      	movs	r3, #2
            property->ucInit = 0;
 8006d84:	2200      	movs	r2, #0
            edit_state = ST_EDIT;
 8006d86:	f888 3000 	strb.w	r3, [r8]
 8006d8a:	68a3      	ldr	r3, [r4, #8]
            property->ucInit = 0;
 8006d8c:	7162      	strb	r2, [r4, #5]
            break;
    }
    // return new value in the buffer
    //*property->pucValue = digit;
    //*(property->pucValue + 1) = digit >> 8;
    *(unsigned int*)property->pucValue = digit;
 8006d8e:	601e      	str	r6, [r3, #0]

    // --- Display the input string ---
    sprintf(format_str, "%%0%dd ", property->ucIntSize);
    sprintf((char*) edit_buff, format_str, digit);
 8006d90:	4d2b      	ldr	r5, [pc, #172]	; (8006e40 <EditValue+0x10c>)
    sprintf(format_str, "%%0%dd ", property->ucIntSize);
 8006d92:	78a2      	ldrb	r2, [r4, #2]
 8006d94:	492b      	ldr	r1, [pc, #172]	; (8006e44 <EditValue+0x110>)
 8006d96:	a802      	add	r0, sp, #8
 8006d98:	f001 ffc4 	bl	8008d24 <siprintf>
    sprintf((char*) edit_buff, format_str, digit);
 8006d9c:	a902      	add	r1, sp, #8
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	f001 ffbf 	bl	8008d24 <siprintf>
    LcdTextXY(property->x_pos, property->y_pos, property->ucFont, INVERSE, edit_buff);
 8006da6:	7922      	ldrb	r2, [r4, #4]
 8006da8:	7861      	ldrb	r1, [r4, #1]
 8006daa:	7820      	ldrb	r0, [r4, #0]
 8006dac:	9500      	str	r5, [sp, #0]
 8006dae:	2302      	movs	r3, #2
 8006db0:	f7fd fbe6 	bl	8004580 <LcdTextXY>
    LcdUpdate();
 8006db4:	f7fe f838 	bl	8004e28 <LcdUpdate>

    //---------- Accept changes -------------
    if (kbd_key == KEY_TL) {
 8006db8:	2f03      	cmp	r7, #3
 8006dba:	d033      	beq.n	8006e24 <EditValue+0xf0>
        edit_state = ST_INIT;
        return 1;
    }

    //------- Go back - exit without changes -------
    if (kbd_key == KEY_BACK) {
 8006dbc:	2f0b      	cmp	r7, #11
        edit_state = ST_INIT;
        return 2; // ESC  - go back without new valu in the buffer
 8006dbe:	bf0a      	itet	eq
 8006dc0:	2502      	moveq	r5, #2
    }

    return 0;
 8006dc2:	2500      	movne	r5, #0
        edit_state = ST_INIT;
 8006dc4:	2300      	moveq	r3, #0
}
 8006dc6:	4628      	mov	r0, r5
        edit_state = ST_INIT;
 8006dc8:	bf08      	it	eq
 8006dca:	f888 3000 	strbeq.w	r3, [r8]
}
 8006dce:	b004      	add	sp, #16
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (edit_state) {
 8006dd4:	f898 2000 	ldrb.w	r2, [r8]
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	d0ba      	beq.n	8006d52 <EditValue+0x1e>
 8006ddc:	2a02      	cmp	r2, #2
 8006dde:	d1d6      	bne.n	8006d8e <EditValue+0x5a>
            if (kbd_key == KEY_UP) {
 8006de0:	2802      	cmp	r0, #2
 8006de2:	d027      	beq.n	8006e34 <EditValue+0x100>
            if (kbd_key == KEY_DN) {
 8006de4:	2801      	cmp	r0, #1
 8006de6:	d1d2      	bne.n	8006d8e <EditValue+0x5a>
                if (digit > property->uiMinValue)
 8006de8:	69ca      	ldr	r2, [r1, #28]
 8006dea:	42b2      	cmp	r2, r6
 8006dec:	d201      	bcs.n	8006df2 <EditValue+0xbe>
                    digit -= property->ucFractSize;
 8006dee:	78ca      	ldrb	r2, [r1, #3]
 8006df0:	1ab6      	subs	r6, r6, r2
    *(unsigned int*)property->pucValue = digit;
 8006df2:	601e      	str	r6, [r3, #0]
    sprintf((char*) edit_buff, format_str, digit);
 8006df4:	4f12      	ldr	r7, [pc, #72]	; (8006e40 <EditValue+0x10c>)
    sprintf(format_str, "%%0%dd ", property->ucIntSize);
 8006df6:	78a2      	ldrb	r2, [r4, #2]
 8006df8:	4912      	ldr	r1, [pc, #72]	; (8006e44 <EditValue+0x110>)
 8006dfa:	a802      	add	r0, sp, #8
 8006dfc:	f001 ff92 	bl	8008d24 <siprintf>
    sprintf((char*) edit_buff, format_str, digit);
 8006e00:	a902      	add	r1, sp, #8
 8006e02:	4632      	mov	r2, r6
 8006e04:	4638      	mov	r0, r7
 8006e06:	f001 ff8d 	bl	8008d24 <siprintf>
    LcdTextXY(property->x_pos, property->y_pos, property->ucFont, INVERSE, edit_buff);
 8006e0a:	7820      	ldrb	r0, [r4, #0]
 8006e0c:	7922      	ldrb	r2, [r4, #4]
 8006e0e:	7861      	ldrb	r1, [r4, #1]
 8006e10:	9700      	str	r7, [sp, #0]
 8006e12:	2302      	movs	r3, #2
 8006e14:	f7fd fbb4 	bl	8004580 <LcdTextXY>
    LcdUpdate();
 8006e18:	f7fe f806 	bl	8004e28 <LcdUpdate>
}
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	b004      	add	sp, #16
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 1;
 8006e24:	2501      	movs	r5, #1
        edit_state = ST_INIT;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4628      	mov	r0, r5
        edit_state = ST_INIT;
 8006e2a:	f888 3000 	strb.w	r3, [r8]
}
 8006e2e:	b004      	add	sp, #16
 8006e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (digit < property->uiMaxValue)
 8006e34:	698a      	ldr	r2, [r1, #24]
 8006e36:	42b2      	cmp	r2, r6
 8006e38:	d9db      	bls.n	8006df2 <EditValue+0xbe>
                    digit += property->ucFractSize;
 8006e3a:	78ca      	ldrb	r2, [r1, #3]
 8006e3c:	4416      	add	r6, r2
 8006e3e:	e7d8      	b.n	8006df2 <EditValue+0xbe>
 8006e40:	20000138 	.word	0x20000138
 8006e44:	0800b9dc 	.word	0x0800b9dc
 8006e48:	20000160 	.word	0x20000160

08006e4c <SelectBox>:
//		- uunsigned char return code
//	
//-----------------------------------------------------------------------------
#define DISPLAY_OPTIONS		6 

unsigned char SelectBox(unsigned char kbd_key, S_EDITBOX *property) {
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	b085      	sub	sp, #20
 8006e52:	4b63      	ldr	r3, [pc, #396]	; (8006fe0 <SelectBox+0x194>)
 8006e54:	9002      	str	r0, [sp, #8]
    char option_nr, start_option, max_option;
    char y;
    long pos;


    if (kbd_key == 0xFF)
 8006e56:	28ff      	cmp	r0, #255	; 0xff
unsigned char SelectBox(unsigned char kbd_key, S_EDITBOX *property) {
 8006e58:	460e      	mov	r6, r1
 8006e5a:	f891 8014 	ldrb.w	r8, [r1, #20]
 8006e5e:	9303      	str	r3, [sp, #12]
    if (kbd_key == 0xFF)
 8006e60:	f000 8088 	beq.w	8006f74 <SelectBox+0x128>
        edit_state = ST_INIT;

    switch (edit_state) {
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8084 	beq.w	8006f74 <SelectBox+0x128>
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d96b      	bls.n	8006f48 <SelectBox+0xfc>
            }

            break;
    }

    if ((property->ucOptions > DISPLAY_OPTIONS)) {
 8006e70:	f1b8 0f06 	cmp.w	r8, #6
 8006e74:	d91e      	bls.n	8006eb4 <SelectBox+0x68>
        if (selected < property->ucOptions)
 8006e76:	f8df a174 	ldr.w	sl, [pc, #372]	; 8006fec <SelectBox+0x1a0>
 8006e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e7e:	4543      	cmp	r3, r8
 8006e80:	d272      	bcs.n	8006f68 <SelectBox+0x11c>
            max_option = selected + 1;
 8006e82:	3301      	adds	r3, #1
 8006e84:	b2db      	uxtb	r3, r3
        else
            max_option = selected;
        if (max_option >= DISPLAY_OPTIONS)
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d86e      	bhi.n	8006f68 <SelectBox+0x11c>

    } else {
        max_option = property->ucOptions;
        start_option = 0;
    }
    LcdErase();
 8006e8a:	f7fd fb55 	bl	8004538 <LcdErase>
    LcdBox(2, 4, 125, 60);
 8006e8e:	233c      	movs	r3, #60	; 0x3c
 8006e90:	227d      	movs	r2, #125	; 0x7d
 8006e92:	2104      	movs	r1, #4
 8006e94:	2002      	movs	r0, #2
 8006e96:	f7fd fd8b 	bl	80049b0 <LcdBox>
    LcdTextXY(0, 0, NORMAL_FNT, CENTERED, property->pucTitle);
 8006e9a:	68f3      	ldr	r3, [r6, #12]
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f7fd fb6b 	bl	8004580 <LcdTextXY>
            max_option = DISPLAY_OPTIONS;
 8006eaa:	f04f 0806 	mov.w	r8, #6
            start_option = 0;
 8006eae:	f04f 0900 	mov.w	r9, #0
 8006eb2:	e015      	b.n	8006ee0 <SelectBox+0x94>
        start_option = 0;
 8006eb4:	f04f 0900 	mov.w	r9, #0
    LcdErase();
 8006eb8:	f7fd fb3e 	bl	8004538 <LcdErase>
    LcdBox(2, 4, 125, 60);
 8006ebc:	233c      	movs	r3, #60	; 0x3c
 8006ebe:	227d      	movs	r2, #125	; 0x7d
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	2002      	movs	r0, #2
 8006ec4:	f7fd fd74 	bl	80049b0 <LcdBox>
    LcdTextXY(0, 0, NORMAL_FNT, CENTERED, property->pucTitle);
 8006ec8:	68f3      	ldr	r3, [r6, #12]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4608      	mov	r0, r1
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f7fd fb54 	bl	8004580 <LcdTextXY>

    y = 0;
    for (option_nr = start_option; option_nr < max_option; option_nr++) {
 8006ed8:	45c1      	cmp	r9, r8
 8006eda:	d226      	bcs.n	8006f2a <SelectBox+0xde>
 8006edc:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8006fec <SelectBox+0x1a0>
 8006ee0:	4f40      	ldr	r7, [pc, #256]	; (8006fe4 <SelectBox+0x198>)
            start_option = 0;
 8006ee2:	464d      	mov	r5, r9
        sprintf((char*) edit_buff, " %s ", property->pucSelect[option_nr]);
        edit_buff[20] = 0;
 8006ee4:	f04f 0b00 	mov.w	fp, #0
        sprintf((char*) edit_buff, " %s ", property->pucSelect[option_nr]);
 8006ee8:	b22b      	sxth	r3, r5
 8006eea:	6932      	ldr	r2, [r6, #16]
 8006eec:	493e      	ldr	r1, [pc, #248]	; (8006fe8 <SelectBox+0x19c>)
 8006eee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ef2:	483c      	ldr	r0, [pc, #240]	; (8006fe4 <SelectBox+0x198>)
 8006ef4:	f001 ff16 	bl	8008d24 <siprintf>
        edit_buff[20] = 0;
 8006ef8:	f887 b014 	strb.w	fp, [r7, #20]
        if (selected == option_nr)
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
            LcdTextXY(property->x_pos, property->y_pos + y, NORMAL_FNT, INVERSE, edit_buff);
 8006f00:	7871      	ldrb	r1, [r6, #1]
 8006f02:	7830      	ldrb	r0, [r6, #0]
 8006f04:	9700      	str	r7, [sp, #0]
 8006f06:	eba5 0409 	sub.w	r4, r5, r9
 8006f0a:	b2e4      	uxtb	r4, r4
        if (selected == option_nr)
 8006f0c:	42ab      	cmp	r3, r5
            LcdTextXY(property->x_pos, property->y_pos + y, NORMAL_FNT, INVERSE, edit_buff);
 8006f0e:	4421      	add	r1, r4
    for (option_nr = start_option; option_nr < max_option; option_nr++) {
 8006f10:	f105 0501 	add.w	r5, r5, #1
        else
            LcdTextXY(property->x_pos, property->y_pos + y, NORMAL_FNT, NORMAL, edit_buff);
 8006f14:	f04f 0300 	mov.w	r3, #0
            LcdTextXY(property->x_pos, property->y_pos + y, NORMAL_FNT, INVERSE, edit_buff);
 8006f18:	b2c9      	uxtb	r1, r1
 8006f1a:	bf08      	it	eq
 8006f1c:	2302      	moveq	r3, #2
            LcdTextXY(property->x_pos, property->y_pos + y, NORMAL_FNT, NORMAL, edit_buff);
 8006f1e:	2201      	movs	r2, #1
    for (option_nr = start_option; option_nr < max_option; option_nr++) {
 8006f20:	b2ed      	uxtb	r5, r5
            LcdTextXY(property->x_pos, property->y_pos + y, NORMAL_FNT, NORMAL, edit_buff);
 8006f22:	f7fd fb2d 	bl	8004580 <LcdTextXY>
    for (option_nr = start_option; option_nr < max_option; option_nr++) {
 8006f26:	4545      	cmp	r5, r8
 8006f28:	d3de      	bcc.n	8006ee8 <SelectBox+0x9c>

        y++;
    }

    if (property->ucOptions > DISPLAY_OPTIONS) {
 8006f2a:	7d30      	ldrb	r0, [r6, #20]
 8006f2c:	2806      	cmp	r0, #6
 8006f2e:	d82b      	bhi.n	8006f88 <SelectBox+0x13c>
        pos = selected * 16;
        pos /= property->ucOptions;
        LcdScrollBar(pos);
    }

    LcdUpdate();
 8006f30:	f7fd ff7a 	bl	8004e28 <LcdUpdate>


    //---------- Accept changes -------------
    if ((kbd_key == KEY_TL)) {
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d033      	beq.n	8006fa2 <SelectBox+0x156>
        edit_state = ST_INIT;
        return 1;
    }

    //------- Go back - exit without changes -------
    if (kbd_key == KEY_BACK) {
 8006f3a:	9b02      	ldr	r3, [sp, #8]
 8006f3c:	2b0b      	cmp	r3, #11
 8006f3e:	d03b      	beq.n	8006fb8 <SelectBox+0x16c>
        edit_state = ST_INIT;
        return 2;
    }

    return 0;
 8006f40:	2000      	movs	r0, #0

}
 8006f42:	b005      	add	sp, #20
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((kbd_key == KEY_DN)) {
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d03b      	beq.n	8006fc6 <SelectBox+0x17a>
            } else if ((kbd_key == KEY_UP)) {
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d18d      	bne.n	8006e70 <SelectBox+0x24>
                if (selected > 0)
 8006f54:	f8df a094 	ldr.w	sl, [pc, #148]	; 8006fec <SelectBox+0x1a0>
 8006f58:	f89a 3000 	ldrb.w	r3, [sl]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d087      	beq.n	8006e70 <SelectBox+0x24>
                    selected--;
 8006f60:	3b01      	subs	r3, #1
 8006f62:	f88a 3000 	strb.w	r3, [sl]
 8006f66:	e783      	b.n	8006e70 <SelectBox+0x24>
            start_option = max_option - DISPLAY_OPTIONS;
 8006f68:	f1a3 0906 	sub.w	r9, r3, #6
 8006f6c:	fa5f f989 	uxtb.w	r9, r9
 8006f70:	4698      	mov	r8, r3
 8006f72:	e7a1      	b.n	8006eb8 <SelectBox+0x6c>
            selected = *property->pucValue; // make inverse selected value
 8006f74:	68b3      	ldr	r3, [r6, #8]
 8006f76:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006fec <SelectBox+0x1a0>
 8006f7a:	781b      	ldrb	r3, [r3, #0]
            edit_state = ST_EDIT;
 8006f7c:	9a03      	ldr	r2, [sp, #12]
            selected = *property->pucValue; // make inverse selected value
 8006f7e:	f88a 3000 	strb.w	r3, [sl]
            edit_state = ST_EDIT;
 8006f82:	2302      	movs	r3, #2
 8006f84:	7013      	strb	r3, [r2, #0]
            break;
 8006f86:	e773      	b.n	8006e70 <SelectBox+0x24>
        pos = selected * 16;
 8006f88:	4b18      	ldr	r3, [pc, #96]	; (8006fec <SelectBox+0x1a0>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	011b      	lsls	r3, r3, #4
        pos /= property->ucOptions;
 8006f8e:	fb93 f0f0 	sdiv	r0, r3, r0
        LcdScrollBar(pos);
 8006f92:	b2c0      	uxtb	r0, r0
 8006f94:	f7fd fd2c 	bl	80049f0 <LcdScrollBar>
    LcdUpdate();
 8006f98:	f7fd ff46 	bl	8004e28 <LcdUpdate>
    if ((kbd_key == KEY_TL)) {
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d1cb      	bne.n	8006f3a <SelectBox+0xee>
        *property->pucValue = selected;
 8006fa2:	4a12      	ldr	r2, [pc, #72]	; (8006fec <SelectBox+0x1a0>)
 8006fa4:	68b3      	ldr	r3, [r6, #8]
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	701a      	strb	r2, [r3, #0]
        edit_state = ST_INIT;
 8006faa:	9a03      	ldr	r2, [sp, #12]
 8006fac:	2300      	movs	r3, #0
        return 1;
 8006fae:	2001      	movs	r0, #1
        edit_state = ST_INIT;
 8006fb0:	7013      	strb	r3, [r2, #0]
}
 8006fb2:	b005      	add	sp, #20
 8006fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        edit_state = ST_INIT;
 8006fb8:	9a03      	ldr	r2, [sp, #12]
 8006fba:	2300      	movs	r3, #0
        return 2;
 8006fbc:	2002      	movs	r0, #2
        edit_state = ST_INIT;
 8006fbe:	7013      	strb	r3, [r2, #0]
}
 8006fc0:	b005      	add	sp, #20
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (selected < property->ucOptions - 1)
 8006fc6:	f8df a024 	ldr.w	sl, [pc, #36]	; 8006fec <SelectBox+0x1a0>
 8006fca:	f89a 3000 	ldrb.w	r3, [sl]
 8006fce:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f6bf af4c 	bge.w	8006e70 <SelectBox+0x24>
                    selected++;
 8006fd8:	3301      	adds	r3, #1
 8006fda:	f88a 3000 	strb.w	r3, [sl]
 8006fde:	e747      	b.n	8006e70 <SelectBox+0x24>
 8006fe0:	20000160 	.word	0x20000160
 8006fe4:	20000138 	.word	0x20000138
 8006fe8:	0800b9e4 	.word	0x0800b9e4
 8006fec:	20000162 	.word	0x20000162

08006ff0 <MessageBox>:
 **
 **      returns 1 if pressed OK , 2 - ESC(CL),  0 - no key pressed
 **
 *******************************************************************************/

unsigned char MessageBox(unsigned char warning_nr, unsigned char key) {
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char idx;
    unsigned char row;
    char result;

    result = 0;
    if (key == 0xFE)
 8006ff4:	29fe      	cmp	r1, #254	; 0xfe
unsigned char MessageBox(unsigned char warning_nr, unsigned char key) {
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	4604      	mov	r4, r0
        mb_state = ST_INIT;
 8006ffc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80070c8 <MessageBox+0xd8>
    if (key == 0xFE)
 8007000:	d00e      	beq.n	8007020 <MessageBox+0x30>

    switch (mb_state) {
 8007002:	f898 3000 	ldrb.w	r3, [r8]
 8007006:	b173      	cbz	r3, 8007026 <MessageBox+0x36>
            //-------- Nothing there, wait for CL ----------
            break;
    }


    if (key == KEY_TL) {
 8007008:	2f03      	cmp	r7, #3
 800700a:	d04b      	beq.n	80070a4 <MessageBox+0xb4>
        mb_state = ST_INIT;
        result = 1;
    }

    if  (key == KEY_BACK) { //||  ( g_eUSBKbdEvents == E_ESC_KEY ) ) {
 800700c:	2f0b      	cmp	r7, #11
        mb_state = ST_INIT;
 800700e:	bf05      	ittet	eq
 8007010:	2300      	moveq	r3, #0
        result = 2;
 8007012:	2002      	moveq	r0, #2
    result = 0;
 8007014:	2000      	movne	r0, #0
        mb_state = ST_INIT;
 8007016:	f888 3000 	strbeq.w	r3, [r8]
    }

    return result;
}
 800701a:	b006      	add	sp, #24
 800701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mb_state = ST_INIT;
 8007020:	2300      	movs	r3, #0
 8007022:	f888 3000 	strb.w	r3, [r8]
            LcdErase();
 8007026:	f7fd fa87 	bl	8004538 <LcdErase>
            message = menuWarnings[warning_nr].menuTitle;
 800702a:	4826      	ldr	r0, [pc, #152]	; (80070c4 <MessageBox+0xd4>)
 800702c:	eb00 1404 	add.w	r4, r0, r4, lsl #4
            row = 4;
 8007030:	2504      	movs	r5, #4
            message = menuWarnings[warning_nr].menuTitle;
 8007032:	6864      	ldr	r4, [r4, #4]
 8007034:	7822      	ldrb	r2, [r4, #0]
                while ((*message != 0x00) && (idx < 14)) {
 8007036:	2a00      	cmp	r2, #0
 8007038:	d041      	beq.n	80070be <MessageBox+0xce>
 800703a:	ae02      	add	r6, sp, #8
                    if (*message == '\n') {
 800703c:	2a0a      	cmp	r2, #10
 800703e:	d038      	beq.n	80070b2 <MessageBox+0xc2>
 8007040:	4630      	mov	r0, r6
 8007042:	f104 0c0e 	add.w	ip, r4, #14
 8007046:	4623      	mov	r3, r4
 8007048:	e001      	b.n	800704e <MessageBox+0x5e>
 800704a:	2a0a      	cmp	r2, #10
 800704c:	d033      	beq.n	80070b6 <MessageBox+0xc6>
                    message++;
 800704e:	3301      	adds	r3, #1
                    msg[idx] = *message;
 8007050:	f800 2b01 	strb.w	r2, [r0], #1
                while ((*message != 0x00) && (idx < 14)) {
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	1b19      	subs	r1, r3, r4
 8007058:	b2c9      	uxtb	r1, r1
 800705a:	b372      	cbz	r2, 80070ba <MessageBox+0xca>
 800705c:	4563      	cmp	r3, ip
 800705e:	d1f4      	bne.n	800704a <MessageBox+0x5a>
 8007060:	461c      	mov	r4, r3
 8007062:	210e      	movs	r1, #14
                msg[idx] = 0;
 8007064:	ab06      	add	r3, sp, #24
 8007066:	eb03 0c01 	add.w	ip, r3, r1
 800706a:	f04f 0e00 	mov.w	lr, #0
                LcdTextXY(0, row, BOLD_FNT, CENTERED, msg);
 800706e:	9600      	str	r6, [sp, #0]
 8007070:	2202      	movs	r2, #2
 8007072:	4629      	mov	r1, r5
 8007074:	4670      	mov	r0, lr
 8007076:	2304      	movs	r3, #4
                msg[idx] = 0;
 8007078:	f80c ec10 	strb.w	lr, [ip, #-16]
                LcdTextXY(0, row, BOLD_FNT, CENTERED, msg);
 800707c:	f7fd fa80 	bl	8004580 <LcdTextXY>
            } while (*message != 0x00);
 8007080:	7822      	ldrb	r2, [r4, #0]
                row++;
 8007082:	3501      	adds	r5, #1
 8007084:	b2ed      	uxtb	r5, r5
            } while (*message != 0x00);
 8007086:	2a00      	cmp	r2, #0
 8007088:	d1d8      	bne.n	800703c <MessageBox+0x4c>
            LcdBox(2, 2, SCRN_RIGHT - 2, SCRN_BOTTOM - 2);
 800708a:	2102      	movs	r1, #2
 800708c:	233d      	movs	r3, #61	; 0x3d
 800708e:	4608      	mov	r0, r1
 8007090:	227d      	movs	r2, #125	; 0x7d
 8007092:	f7fd fc8d 	bl	80049b0 <LcdBox>
            LcdUpdate();
 8007096:	f7fd fec7 	bl	8004e28 <LcdUpdate>
            mb_state = ST_INPUT;
 800709a:	2301      	movs	r3, #1
    if (key == KEY_TL) {
 800709c:	2f03      	cmp	r7, #3
            mb_state = ST_INPUT;
 800709e:	f888 3000 	strb.w	r3, [r8]
    if (key == KEY_TL) {
 80070a2:	d1b3      	bne.n	800700c <MessageBox+0x1c>
        mb_state = ST_INIT;
 80070a4:	2300      	movs	r3, #0
        result = 1;
 80070a6:	2001      	movs	r0, #1
        mb_state = ST_INIT;
 80070a8:	f888 3000 	strb.w	r3, [r8]
}
 80070ac:	b006      	add	sp, #24
 80070ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (*message == '\n') {
 80070b2:	4623      	mov	r3, r4
 80070b4:	2100      	movs	r1, #0
                        message++;
 80070b6:	1c5c      	adds	r4, r3, #1
                        break;
 80070b8:	e7d4      	b.n	8007064 <MessageBox+0x74>
                    message++;
 80070ba:	461c      	mov	r4, r3
 80070bc:	e7d2      	b.n	8007064 <MessageBox+0x74>
                while ((*message != 0x00) && (idx < 14)) {
 80070be:	4611      	mov	r1, r2
 80070c0:	ae02      	add	r6, sp, #8
 80070c2:	e7cf      	b.n	8007064 <MessageBox+0x74>
 80070c4:	0800b524 	.word	0x0800b524
 80070c8:	20000161 	.word	0x20000161

080070cc <TextBox>:
 * 
 * 
 * 
 ***********************************************************************/

void TextBox(char top, char left, char width, char font_type, char * text) {
 80070cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070d0:	b089      	sub	sp, #36	; 0x24
 80070d2:	4690      	mov	r8, r2
 80070d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80070d6:	4605      	mov	r5, r0
 80070d8:	4699      	mov	r9, r3
 80070da:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    char  msg[20];
    unsigned char idx;
    unsigned char row;

    LcdErase();
 80070de:	f7fd fa2b 	bl	8004538 <LcdErase>
    LcdBox(2, 4, 125, 60);
 80070e2:	233c      	movs	r3, #60	; 0x3c
 80070e4:	227d      	movs	r2, #125	; 0x7d
 80070e6:	2104      	movs	r1, #4
 80070e8:	2002      	movs	r0, #2
 80070ea:	f7fd fc61 	bl	80049b0 <LcdBox>
 80070ee:	b2ff      	uxtb	r7, r7
 80070f0:	7823      	ldrb	r3, [r4, #0]
 80070f2:	3701      	adds	r7, #1
 80070f4:	ae03      	add	r6, sp, #12
    //LcdBox(2,2,SCRN_RIGHT-2 , SCRN_BOTTOM-2);

    row = top;
    do {
        idx = 0;
        while ((*text != 0x00) && (idx < width)) {
 80070f6:	b3a3      	cbz	r3, 8007162 <TextBox+0x96>
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	d033      	beq.n	8007166 <TextBox+0x9a>
            if (*text == '\n') {
 80070fe:	2b0a      	cmp	r3, #10
 8007100:	d029      	beq.n	8007156 <TextBox+0x8a>
 8007102:	4631      	mov	r1, r6
 8007104:	eb04 0c07 	add.w	ip, r4, r7
 8007108:	4622      	mov	r2, r4
 800710a:	e003      	b.n	8007114 <TextBox+0x48>
        while ((*text != 0x00) && (idx < width)) {
 800710c:	4594      	cmp	ip, r2
 800710e:	d026      	beq.n	800715e <TextBox+0x92>
            if (*text == '\n') {
 8007110:	2b0a      	cmp	r3, #10
 8007112:	d022      	beq.n	800715a <TextBox+0x8e>
                text++;
                break;
            }
            msg[idx] = *text;
 8007114:	f801 3b01 	strb.w	r3, [r1], #1
        while ((*text != 0x00) && (idx < width)) {
 8007118:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800711c:	1b10      	subs	r0, r2, r4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f4      	bne.n	800710c <TextBox+0x40>
 8007122:	4614      	mov	r4, r2
            text++;
            idx++;
        }
        msg[idx] = 0;
 8007124:	ab08      	add	r3, sp, #32
 8007126:	eb03 0c00 	add.w	ip, r3, r0
 800712a:	f04f 0e00 	mov.w	lr, #0
        LcdTextXY(1, row, font_type, CENTERED, msg);
 800712e:	9600      	str	r6, [sp, #0]
 8007130:	2304      	movs	r3, #4
 8007132:	4629      	mov	r1, r5
 8007134:	464a      	mov	r2, r9
 8007136:	2001      	movs	r0, #1
        msg[idx] = 0;
 8007138:	f80c ec14 	strb.w	lr, [ip, #-20]
        LcdTextXY(1, row, font_type, CENTERED, msg);
 800713c:	f7fd fa20 	bl	8004580 <LcdTextXY>
        row++;

    } while ((*text != 0x00) && (row < 8));
 8007140:	7823      	ldrb	r3, [r4, #0]
        row++;
 8007142:	3501      	adds	r5, #1
 8007144:	b2ed      	uxtb	r5, r5
    } while ((*text != 0x00) && (row < 8));
 8007146:	b10b      	cbz	r3, 800714c <TextBox+0x80>
 8007148:	2d07      	cmp	r5, #7
 800714a:	d9d4      	bls.n	80070f6 <TextBox+0x2a>
    LcdUpdate();
 800714c:	f7fd fe6c 	bl	8004e28 <LcdUpdate>
}
 8007150:	b009      	add	sp, #36	; 0x24
 8007152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (*text == '\n') {
 8007156:	4622      	mov	r2, r4
 8007158:	2000      	movs	r0, #0
                text++;
 800715a:	1c54      	adds	r4, r2, #1
                break;
 800715c:	e7e2      	b.n	8007124 <TextBox+0x58>
 800715e:	4664      	mov	r4, ip
 8007160:	e7e0      	b.n	8007124 <TextBox+0x58>
        while ((*text != 0x00) && (idx < width)) {
 8007162:	4618      	mov	r0, r3
 8007164:	e7de      	b.n	8007124 <TextBox+0x58>
 8007166:	4640      	mov	r0, r8
 8007168:	e7dc      	b.n	8007124 <TextBox+0x58>
 800716a:	bf00      	nop

0800716c <eepr_buffWrite>:
	return page;
}

//--------------------------- EEPROM -------------------------
//HAL_StatusTypeDef writeEEPROMByte(uint32_t address, uint8_t *data, uint32_t length) {
HAL_StatusTypeDef eepr_buffWrite(uint8_t *data, uint32_t address, uint8_t length) {
 800716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716e:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
	HAL_StatusTypeDef status;
	uint32_t FirstPage = 0;
	uint32_t Address = 0, PAGEError = 0;
 8007172:	2400      	movs	r4, #0
	__IO uint32_t data32 = 0, MemoryProgramStatus = 0;
 8007174:	9402      	str	r4, [sp, #8]
	uint32_t Address = 0, PAGEError = 0;
 8007176:	9401      	str	r4, [sp, #4]
	__IO uint32_t data32 = 0, MemoryProgramStatus = 0;
 8007178:	9403      	str	r4, [sp, #12]
 800717a:	f10d 4478 	add.w	r4, sp, #4160749568	; 0xf8000000
 800717e:	3420      	adds	r4, #32
	__IO uint64_t *flashData;
	__IO uint32_t *ramData;
	uint8_t *pBuff;

	/*  Preserve the content of the page */
	Address = FLASH_USER_START_ADDR;
 8007180:	4b35      	ldr	r3, [pc, #212]	; (8007258 <eepr_buffWrite+0xec>)
	ramData = (uint32_t*)buff;
	while (Address < FLASH_USER_END_ADDR1) {
 8007182:	4e36      	ldr	r6, [pc, #216]	; (800725c <eepr_buffWrite+0xf0>)
 8007184:	f5a4 4578 	sub.w	r5, r4, #63488	; 0xf800
		*ramData = *(__IO uint32_t *) Address;
 8007188:	681c      	ldr	r4, [r3, #0]
 800718a:	50ec      	str	r4, [r5, r3]
		Address = Address + 4;
 800718c:	3304      	adds	r3, #4
	while (Address < FLASH_USER_END_ADDR1) {
 800718e:	42b3      	cmp	r3, r6
 8007190:	d1fa      	bne.n	8007188 <eepr_buffWrite+0x1c>
		ramData ++;
	}

	/*  Update  page content   */
	pBuff = (uint8_t*)&buff[address];
 8007192:	ab08      	add	r3, sp, #32
 8007194:	440b      	add	r3, r1
	while (length) {
 8007196:	b152      	cbz	r2, 80071ae <eepr_buffWrite+0x42>
 8007198:	3a01      	subs	r2, #1
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	3201      	adds	r2, #1
 800719e:	441a      	add	r2, r3
 80071a0:	1e41      	subs	r1, r0, #1
		*pBuff = *data;
 80071a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071a6:	f803 0b01 	strb.w	r0, [r3], #1
	while (length) {
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d1f9      	bne.n	80071a2 <eepr_buffWrite+0x36>
		length--;
		pBuff++;
	}

	/* Unlock the Flash to enable the flash control register access **/
	HAL_FLASH_Unlock();
 80071ae:	f7fa fc2f 	bl	8001a10 <HAL_FLASH_Unlock>
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE)) {
 80071b2:	4b2b      	ldr	r3, [pc, #172]	; (8007260 <eepr_buffWrite+0xf4>)
 80071b4:	6819      	ldr	r1, [r3, #0]
 80071b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071ba:	b28a      	uxth	r2, r1
 80071bc:	429a      	cmp	r2, r3
 80071be:	d007      	beq.n	80071d0 <eepr_buffWrite+0x64>
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <eepr_buffWrite+0xf8>)
 80071c2:	4b25      	ldr	r3, [pc, #148]	; (8007258 <eepr_buffWrite+0xec>)
 80071c4:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 80071c8:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d924      	bls.n	800721a <eepr_buffWrite+0xae>
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80071d0:	231f      	movs	r3, #31

	/* Get the 1st page to erase */
	FirstPage = GetPage(FLASH_USER_START_ADDR);

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80071d2:	2200      	movs	r2, #0
	EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.Page = FirstPage;
 80071d4:	9306      	str	r3, [sp, #24]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 80071d6:	a901      	add	r1, sp, #4
	EraseInitStruct.Banks = FLASH_BANK_1;
 80071d8:	2301      	movs	r3, #1
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 80071da:	a804      	add	r0, sp, #16
	EraseInitStruct.Banks = FLASH_BANK_1;
 80071dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	EraseInitStruct.NbPages = 1;
 80071e0:	9307      	str	r3, [sp, #28]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 80071e2:	f7fa fcfb 	bl	8001bdc <HAL_FLASHEx_Erase>
 80071e6:	b9a0      	cbnz	r0, 8007212 <eepr_buffWrite+0xa6>
 80071e8:	f10d 4378 	add.w	r3, sp, #4160749568	; 0xf8000000
 80071ec:	3320      	adds	r3, #32
	}

	/* Program the user Flash area word by word
	 (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	Address = FLASH_USER_START_ADDR;
 80071ee:	4c1a      	ldr	r4, [pc, #104]	; (8007258 <eepr_buffWrite+0xec>)
	flashData = (uint64_t *)&buff[0];
	while (Address < FLASH_USER_END_ADDR) {
 80071f0:	4f1d      	ldr	r7, [pc, #116]	; (8007268 <eepr_buffWrite+0xfc>)
 80071f2:	f5a3 4678 	sub.w	r6, r3, #63488	; 0xf800
 80071f6:	e001      	b.n	80071fc <eepr_buffWrite+0x90>
 80071f8:	42bc      	cmp	r4, r7
 80071fa:	d011      	beq.n	8007220 <eepr_buffWrite+0xb4>
 80071fc:	1933      	adds	r3, r6, r4
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, *flashData) == HAL_OK) {
 80071fe:	4621      	mov	r1, r4
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	2000      	movs	r0, #0
 8007206:	f7fa fc4d 	bl	8001aa4 <HAL_FLASH_Program>
			Address = Address + 8;
 800720a:	3408      	adds	r4, #8
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, *flashData) == HAL_OK) {
 800720c:	4605      	mov	r5, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d0f2      	beq.n	80071f8 <eepr_buffWrite+0x8c>
		return status;
 8007212:	2001      	movs	r0, #1
		status = HAL_ERROR;
		return status;
	}

	return HAL_OK;
}
 8007214:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8007218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	0adb      	lsrs	r3, r3, #11
 800721e:	e7d8      	b.n	80071d2 <eepr_buffWrite+0x66>
	HAL_FLASH_Lock();
 8007220:	f7fa fc0a 	bl	8001a38 <HAL_FLASH_Lock>
 8007224:	f10d 4278 	add.w	r2, sp, #4160749568	; 0xf8000000
 8007228:	3220      	adds	r2, #32
	Address = FLASH_USER_START_ADDR;
 800722a:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <eepr_buffWrite+0xec>)
	while (Address < FLASH_USER_END_ADDR1) {
 800722c:	4c0b      	ldr	r4, [pc, #44]	; (800725c <eepr_buffWrite+0xf0>)
	MemoryProgramStatus = 0x0;
 800722e:	9503      	str	r5, [sp, #12]
 8007230:	f5a2 4078 	sub.w	r0, r2, #63488	; 0xf800
		data32 = *(__IO uint32_t *) Address;
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	9202      	str	r2, [sp, #8]
		if ( data32 != *ramData) {
 8007238:	58c1      	ldr	r1, [r0, r3]
 800723a:	9a02      	ldr	r2, [sp, #8]
 800723c:	4291      	cmp	r1, r2
		Address = Address + 4;
 800723e:	f103 0304 	add.w	r3, r3, #4
		if ( data32 != *ramData) {
 8007242:	d002      	beq.n	800724a <eepr_buffWrite+0xde>
			MemoryProgramStatus++;
 8007244:	9a03      	ldr	r2, [sp, #12]
 8007246:	3201      	adds	r2, #1
 8007248:	9203      	str	r2, [sp, #12]
	while (Address < FLASH_USER_END_ADDR1) {
 800724a:	42a3      	cmp	r3, r4
 800724c:	d1f2      	bne.n	8007234 <eepr_buffWrite+0xc8>
	if (MemoryProgramStatus != 0) {
 800724e:	9803      	ldr	r0, [sp, #12]
		return status;
 8007250:	3000      	adds	r0, #0
 8007252:	bf18      	it	ne
 8007254:	2001      	movne	r0, #1
 8007256:	e7dd      	b.n	8007214 <eepr_buffWrite+0xa8>
 8007258:	0800f800 	.word	0x0800f800
 800725c:	0800fff0 	.word	0x0800fff0
 8007260:	1fff75e0 	.word	0x1fff75e0
 8007264:	03fffc00 	.word	0x03fffc00
 8007268:	08010000 	.word	0x08010000

0800726c <eepr_buffRead>:

void eepr_buffRead(uint8_t*buff, uint32_t address, uint8_t length) {
 800726c:	b082      	sub	sp, #8
	uint32_t Address = 0;
	__IO uint32_t data32 = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	9301      	str	r3, [sp, #4]

	Address = FLASH_USER_START_ADDR + address;
	while (length) {
 8007272:	b17a      	cbz	r2, 8007294 <eepr_buffRead+0x28>
 8007274:	1e53      	subs	r3, r2, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800727c:	3301      	adds	r3, #1
 800727e:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8007282:	4403      	add	r3, r0
		data32 = *(__IO uint32_t *) Address;
 8007284:	f851 2b01 	ldr.w	r2, [r1], #1
 8007288:	9201      	str	r2, [sp, #4]
		*buff = (uint8_t) data32;
 800728a:	9a01      	ldr	r2, [sp, #4]
 800728c:	f800 2b01 	strb.w	r2, [r0], #1
	while (length) {
 8007290:	4283      	cmp	r3, r0
 8007292:	d1f7      	bne.n	8007284 <eepr_buffRead+0x18>
		Address = Address + 1;
		buff++;
		length--;
	}
}
 8007294:	b002      	add	sp, #8
 8007296:	4770      	bx	lr

08007298 <float_format>:

	//
	// Multiply by 1000 to preserve first three decimal values.
	// Truncates at the 3rd decimal place.
	//
	i32FPart = (int32_t) (inpData * 1000.0f);
 8007298:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80072c8 <float_format+0x30>
	i32IPart = (int32_t) inpData;
 800729c:	490b      	ldr	r1, [pc, #44]	; (80072cc <float_format+0x34>)

	//
	// Subtract off the integer part from this newly formed decimal
	// part.
	//
	i32FPart = i32FPart - (i32IPart * 1000);
 800729e:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <float_format+0x38>)
	i32FPart = (int32_t) (inpData * 1000.0f);
 80072a0:	ee60 7a27 	vmul.f32	s15, s0, s15
	i32IPart = (int32_t) inpData;
 80072a4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	i32FPart = (int32_t) (inpData * 1000.0f);
 80072a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	i32IPart = (int32_t) inpData;
 80072ac:	ee17 3a10 	vmov	r3, s14
 80072b0:	ed81 7a00 	vstr	s14, [r1]
	i32FPart = i32FPart - (i32IPart * 1000);
 80072b4:	ee17 1a90 	vmov	r1, s15
 80072b8:	fb02 1303 	mla	r3, r2, r3, r1

	//
	// make the decimal part a positive number for display.
	//
	if (i32FPart < 0) {
 80072bc:	2b00      	cmp	r3, #0
		i32FPart *= -1;
 80072be:	4a05      	ldr	r2, [pc, #20]	; (80072d4 <float_format+0x3c>)
 80072c0:	bfb8      	it	lt
 80072c2:	425b      	neglt	r3, r3
 80072c4:	6013      	str	r3, [r2, #0]
	}
}
 80072c6:	4770      	bx	lr
 80072c8:	447a0000 	.word	0x447a0000
 80072cc:	20000898 	.word	0x20000898
 80072d0:	fffffc18 	.word	0xfffffc18
 80072d4:	200006f8 	.word	0x200006f8

080072d8 <HAL_GPIO_EXTI_Callback>:

//------------------------ MPU6050 ORQ and IR pin interrupts -----------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	//------------- IR remote ----------
	if (GPIO_Pin == GPIO_PIN_11) {
 80072d8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80072dc:	d00d      	beq.n	80072fa <HAL_GPIO_EXTI_Callback+0x22>
			IRpinIntHandler();
		}
	}

	//------------ Encodes ------------
	if (GPIO_Pin == GPIO_PIN_6)
 80072de:	2840      	cmp	r0, #64	; 0x40
 80072e0:	d104      	bne.n	80072ec <HAL_GPIO_EXTI_Callback+0x14>
		enc_leftCounter++;
 80072e2:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <HAL_GPIO_EXTI_Callback+0x3c>)
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	3301      	adds	r3, #1
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4770      	bx	lr
	if (GPIO_Pin == GPIO_PIN_7)
 80072ec:	2880      	cmp	r0, #128	; 0x80
 80072ee:	d10a      	bne.n	8007306 <HAL_GPIO_EXTI_Callback+0x2e>
		enc_rightCounter++;
 80072f0:	4a09      	ldr	r2, [pc, #36]	; (8007318 <HAL_GPIO_EXTI_Callback+0x40>)
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	3301      	adds	r3, #1
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	4770      	bx	lr
		if (pinIRQenable) {
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <HAL_GPIO_EXTI_Callback+0x44>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b903      	cbnz	r3, 8007302 <HAL_GPIO_EXTI_Callback+0x2a>

	//-------------  Gyroscope ----------
	if (GPIO_Pin == GPIO_PIN_15) {
		mpu_irq = 1;
	}
}
 8007300:	4770      	bx	lr
			IRpinIntHandler();
 8007302:	f7fd bc71 	b.w	8004be8 <IRpinIntHandler>
	if (GPIO_Pin == GPIO_PIN_15) {
 8007306:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800730a:	d1f9      	bne.n	8007300 <HAL_GPIO_EXTI_Callback+0x28>
		mpu_irq = 1;
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <HAL_GPIO_EXTI_Callback+0x48>)
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
}
 8007312:	4770      	bx	lr
 8007314:	200001bc 	.word	0x200001bc
 8007318:	200001b4 	.word	0x200001b4
 800731c:	20000028 	.word	0x20000028
 8007320:	2000017c 	.word	0x2000017c

08007324 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007324:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007326:	2100      	movs	r1, #0
void SystemClock_Config(void) {
 8007328:	b0a5      	sub	sp, #148	; 0x94
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800732a:	460c      	mov	r4, r1
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800732c:	a813      	add	r0, sp, #76	; 0x4c
 800732e:	2244      	movs	r2, #68	; 0x44
 8007330:	f001 fcf0 	bl	8008d14 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8007334:	4621      	mov	r1, r4
 8007336:	2234      	movs	r2, #52	; 0x34
 8007338:	a806      	add	r0, sp, #24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800733a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800733e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007342:	9405      	str	r4, [sp, #20]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8007344:	f001 fce6 	bl	8008d14 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8007348:	f44f 7000 	mov.w	r0, #512	; 0x200
 800734c:	f7fb fc74 	bl	8002c38 <HAL_PWREx_ControlVoltageScaling>
			!= HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007350:	2302      	movs	r3, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007352:	2140      	movs	r1, #64	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
 8007354:	2201      	movs	r2, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007356:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007358:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLN = 10;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800735c:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007360:	a813      	add	r0, sp, #76	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 10;
 8007362:	230a      	movs	r3, #10
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007364:	f44f 7580 	mov.w	r5, #256	; 0x100
	RCC_OscInitStruct.PLL.PLLN = 10;
 8007368:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800736c:	e9cd 5116 	strd	r5, r1, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007370:	f7fb fd46 	bl	8002e00 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007374:	220f      	movs	r2, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007376:	2303      	movs	r3, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8007378:	2104      	movs	r1, #4
 800737a:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800737c:	e9cd 2301 	strd	r2, r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007380:	e9cd 4403 	strd	r4, r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007384:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8007386:	f7fc f871 	bl	800346c <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_ADC;
 800738a:	f244 0340 	movw	r3, #16448	; 0x4040
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800738e:	a806      	add	r0, sp, #24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007390:	940b      	str	r4, [sp, #44]	; 0x2c
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_ADC;
 8007392:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8007394:	f7fc f902 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8007398:	b025      	add	sp, #148	; 0x94
 800739a:	bd30      	pop	{r4, r5, pc}

0800739c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */

//---------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
	/* Report to main program that ADC sequencer has reached its end */
	if (AdcHandle == &hadc1) {
 800739c:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <HAL_ADC_ConvCpltCallback+0x1c>)
 800739e:	4298      	cmp	r0, r3
 80073a0:	d006      	beq.n	80073b0 <HAL_ADC_ConvCpltCallback+0x14>
		adc1_complete = 1;
	}

	if (AdcHandle == &hadc2)
 80073a2:	4b06      	ldr	r3, [pc, #24]	; (80073bc <HAL_ADC_ConvCpltCallback+0x20>)
 80073a4:	4298      	cmp	r0, r3
 80073a6:	d102      	bne.n	80073ae <HAL_ADC_ConvCpltCallback+0x12>
		adc2_complete = 1;
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	701a      	strb	r2, [r3, #0]

	//HAL_ADC_Stop_DMA(&hadc1);
}
 80073ae:	4770      	bx	lr
		adc1_complete = 1;
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e7f4      	b.n	80073a2 <HAL_ADC_ConvCpltCallback+0x6>
 80073b8:	20000824 	.word	0x20000824
 80073bc:	200006fc 	.word	0x200006fc
 80073c0:	20000164 	.word	0x20000164
 80073c4:	20000163 	.word	0x20000163

080073c8 <read_sensors>:
ADC_CHANNEL_4, ADC_CHANNEL_5, ADC_CHANNEL_6 };
const uint32_t rank[6] = { ADC_REGULAR_RANK_1, ADC_REGULAR_RANK_2,
ADC_REGULAR_RANK_3, ADC_REGULAR_RANK_4, ADC_REGULAR_RANK_5,
ADC_REGULAR_RANK_6 };

void read_sensors(void) {
 80073c8:	b570      	push	{r4, r5, r6, lr}
	unsigned char sens;

	adc1_complete = 0;
 80073ca:	4d3a      	ldr	r5, [pc, #232]	; (80074b4 <read_sensors+0xec>)
	adc2_complete = 0;
 80073cc:	4e3a      	ldr	r6, [pc, #232]	; (80074b8 <read_sensors+0xf0>)
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &sensor_calmin[0], 3);
 80073ce:	493b      	ldr	r1, [pc, #236]	; (80074bc <read_sensors+0xf4>)
 80073d0:	483b      	ldr	r0, [pc, #236]	; (80074c0 <read_sensors+0xf8>)
	adc1_complete = 0;
 80073d2:	2300      	movs	r3, #0
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &sensor_calmin[0], 3);
 80073d4:	2203      	movs	r2, #3
	adc1_complete = 0;
 80073d6:	702b      	strb	r3, [r5, #0]
	adc2_complete = 0;
 80073d8:	7033      	strb	r3, [r6, #0]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &sensor_calmin[0], 3);
 80073da:	f7fa f807 	bl	80013ec <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &sensor_calmin[3], 3);
 80073de:	2203      	movs	r2, #3
 80073e0:	4938      	ldr	r1, [pc, #224]	; (80074c4 <read_sensors+0xfc>)
 80073e2:	4839      	ldr	r0, [pc, #228]	; (80074c8 <read_sensors+0x100>)
 80073e4:	f7fa f802 	bl	80013ec <HAL_ADC_Start_DMA>

	while (!adc2_complete)
 80073e8:	7833      	ldrb	r3, [r6, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0fc      	beq.n	80073e8 <read_sensors+0x20>
		;
	while (!adc1_complete)
 80073ee:	782b      	ldrb	r3, [r5, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0fc      	beq.n	80073ee <read_sensors+0x26>
		;

	//-------------- Read  Left sensors ------------
	HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, SET);  //LEDS OFF
 80073f4:	2201      	movs	r2, #1
 80073f6:	2104      	movs	r1, #4
 80073f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073fc:	f7fa fd48 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PING2_GPIO_Port, PING2_Pin, RESET);  //LEDS On
	delay(3);
 8007400:	4c32      	ldr	r4, [pc, #200]	; (80074cc <read_sensors+0x104>)
	HAL_GPIO_WritePin(PING2_GPIO_Port, PING2_Pin, RESET);  //LEDS On
 8007402:	2200      	movs	r2, #0
 8007404:	2108      	movs	r1, #8
 8007406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800740a:	f7fa fd41 	bl	8001e90 <HAL_GPIO_WritePin>
	delay(3);
 800740e:	2303      	movs	r3, #3
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1fc      	bne.n	8007412 <read_sensors+0x4a>

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &sensor_values[0], 3);
 8007418:	2203      	movs	r2, #3
 800741a:	492d      	ldr	r1, [pc, #180]	; (80074d0 <read_sensors+0x108>)
 800741c:	4828      	ldr	r0, [pc, #160]	; (80074c0 <read_sensors+0xf8>)
 800741e:	f7f9 ffe5 	bl	80013ec <HAL_ADC_Start_DMA>
	while (!adc2_complete)
 8007422:	7833      	ldrb	r3, [r6, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0fc      	beq.n	8007422 <read_sensors+0x5a>
		;
	adc2_complete = 0;
 8007428:	2300      	movs	r3, #0
	//HAL_ADC_Stop_DMA(&hadc2);

	//-------------- Read  Right sensors ------------
	HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);  //LEDS On
 800742a:	461a      	mov	r2, r3
 800742c:	2104      	movs	r1, #4
 800742e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	adc2_complete = 0;
 8007432:	7033      	strb	r3, [r6, #0]
	HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);  //LEDS On
 8007434:	f7fa fd2c 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PING2_GPIO_Port, PING2_Pin, SET);  //LEDS OFF
 8007438:	2201      	movs	r2, #1
 800743a:	2108      	movs	r1, #8
 800743c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007440:	f7fa fd26 	bl	8001e90 <HAL_GPIO_WritePin>
	delay(3);
 8007444:	2303      	movs	r3, #3
 8007446:	6023      	str	r3, [r4, #0]
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1fc      	bne.n	8007448 <read_sensors+0x80>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &sensor_values[3], 3);
 800744e:	2203      	movs	r2, #3
 8007450:	4920      	ldr	r1, [pc, #128]	; (80074d4 <read_sensors+0x10c>)
 8007452:	481d      	ldr	r0, [pc, #116]	; (80074c8 <read_sensors+0x100>)
 8007454:	f7f9 ffca 	bl	80013ec <HAL_ADC_Start_DMA>
	while (!adc1_complete)
 8007458:	782b      	ldrb	r3, [r5, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0fc      	beq.n	8007458 <read_sensors+0x90>
		;
	adc1_complete = 0;
 800745e:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);  //LEDS OFF
 8007460:	4622      	mov	r2, r4
 8007462:	2104      	movs	r1, #4
 8007464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	adc1_complete = 0;
 8007468:	702c      	strb	r4, [r5, #0]
	HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);  //LEDS OFF
 800746a:	f7fa fd11 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PING2_GPIO_Port, PING2_Pin, RESET);  //LEDS OFF
 800746e:	4622      	mov	r2, r4
 8007470:	2108      	movs	r1, #8
 8007472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007476:	f7fa fd0b 	bl	8001e90 <HAL_GPIO_WritePin>
 800747a:	4d10      	ldr	r5, [pc, #64]	; (80074bc <read_sensors+0xf4>)
 800747c:	4914      	ldr	r1, [pc, #80]	; (80074d0 <read_sensors+0x108>)
 800747e:	4622      	mov	r2, r4
	//-------------------------------------------------
	for (sens = 0; sens < 6; sens++) {
		if (sensor_values[sens] > sensor_calmin[sens])
			sensor_values[sens] -= sensor_calmin[sens];
		else
			sensor_values[sens] = 1;
 8007480:	2401      	movs	r4, #1
 8007482:	e00a      	b.n	800749a <read_sensors+0xd2>
			sensor_values[sens] -= sensor_calmin[sens];
 8007484:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8007488:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800748c:	1a1b      	subs	r3, r3, r0
 800748e:	b29b      	uxth	r3, r3
 8007490:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8007494:	3201      	adds	r2, #1
	for (sens = 0; sens < 6; sens++) {
 8007496:	2a06      	cmp	r2, #6
 8007498:	d00a      	beq.n	80074b0 <read_sensors+0xe8>
		if (sensor_values[sens] > sensor_calmin[sens])
 800749a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800749e:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 80074a2:	4298      	cmp	r0, r3
 80074a4:	d3ee      	bcc.n	8007484 <read_sensors+0xbc>
			sensor_values[sens] = 1;
 80074a6:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
 80074aa:	3201      	adds	r2, #1
	for (sens = 0; sens < 6; sens++) {
 80074ac:	2a06      	cmp	r2, #6
 80074ae:	d1f4      	bne.n	800749a <read_sensors+0xd2>
	}

}
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
 80074b2:	bf00      	nop
 80074b4:	20000163 	.word	0x20000163
 80074b8:	20000164 	.word	0x20000164
 80074bc:	200008a8 	.word	0x200008a8
 80074c0:	200006fc 	.word	0x200006fc
 80074c4:	200008ae 	.word	0x200008ae
 80074c8:	20000824 	.word	0x20000824
 80074cc:	2000088c 	.word	0x2000088c
 80074d0:	200006d8 	.word	0x200006d8
 80074d4:	200006de 	.word	0x200006de

080074d8 <main>:
  int main(void) {
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	ed2d 8b02 	vpush	{d8}
 80074e0:	b0ad      	sub	sp, #180	; 0xb4
	HAL_Init();
 80074e2:	f7f9 fbc1 	bl	8000c68 <HAL_Init>
	SystemClock_Config();
 80074e6:	f7ff ff1d 	bl	8007324 <SystemClock_Config>
	HAL_SYSTICK_Config(SystemCoreClock / 10000);
 80074ea:	4ac4      	ldr	r2, [pc, #784]	; (80077fc <main+0x324>)
 80074ec:	4bc4      	ldr	r3, [pc, #784]	; (8007800 <main+0x328>)
 80074ee:	6810      	ldr	r0, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80074f0:	4fc4      	ldr	r7, [pc, #784]	; (8007804 <main+0x32c>)
	hi2c1.Instance = I2C1;
 80074f2:	4ec5      	ldr	r6, [pc, #788]	; (8007808 <main+0x330>)
	htim2.Instance = TIM2;
 80074f4:	4dc5      	ldr	r5, [pc, #788]	; (800780c <main+0x334>)
	htim6.Instance = TIM6;
 80074f6:	f8df b350 	ldr.w	fp, [pc, #848]	; 8007848 <main+0x370>
	HAL_SYSTICK_Config(SystemCoreClock / 10000);
 80074fa:	fba3 3000 	umull	r3, r0, r3, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80074fe:	2400      	movs	r4, #0
	HAL_SYSTICK_Config(SystemCoreClock / 10000);
 8007500:	0b40      	lsrs	r0, r0, #13
 8007502:	f7fa f94b 	bl	800179c <HAL_SYSTICK_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007506:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 800750a:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 800750e:	9420      	str	r4, [sp, #128]	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007512:	f043 0304 	orr.w	r3, r3, #4
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	9309      	str	r3, [sp, #36]	; 0x24
 8007520:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8007522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007530:	930a      	str	r3, [sp, #40]	; 0x28
 8007532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800753c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	930b      	str	r3, [sp, #44]	; 0x2c
 8007544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007548:	f043 0302 	orr.w	r3, r3, #2
 800754c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	930c      	str	r3, [sp, #48]	; 0x30
 8007556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	f043 0308 	orr.w	r3, r3, #8
 800755e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, PING1_Pin | PING2_Pin | LCD_A0_Pin,
 8007568:	4622      	mov	r2, r4
 800756a:	211c      	movs	r1, #28
 800756c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, PING1_Pin | PING2_Pin | LCD_A0_Pin,
 8007572:	f7fa fc8d 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | LCD_CS_Pin, GPIO_PIN_RESET);
 8007576:	4622      	mov	r2, r4
 8007578:	2130      	movs	r1, #48	; 0x30
 800757a:	48a5      	ldr	r0, [pc, #660]	; (8007810 <main+0x338>)
 800757c:	f7fa fc88 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | DIR1_Pin | DIR2_Pin,
 8007580:	4622      	mov	r2, r4
 8007582:	f243 0130 	movw	r1, #12336	; 0x3030
 8007586:	48a3      	ldr	r0, [pc, #652]	; (8007814 <main+0x33c>)
 8007588:	f7fa fc82 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 800758c:	4622      	mov	r2, r4
 800758e:	2104      	movs	r1, #4
 8007590:	48a1      	ldr	r0, [pc, #644]	; (8007818 <main+0x340>)
 8007592:	f7fa fc7d 	bl	8001e90 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007596:	f04f 0903 	mov.w	r9, #3
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6
 800759a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800759e:	a91c      	add	r1, sp, #112	; 0x70
 80075a0:	489b      	ldr	r0, [pc, #620]	; (8007810 <main+0x338>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a2:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075a4:	e9cd 391c 	strd	r3, r9, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075a8:	f7fa fba4 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 80075ac:	230b      	movs	r3, #11
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80075ae:	a91c      	add	r1, sp, #112	; 0x70
 80075b0:	489a      	ldr	r0, [pc, #616]	; (800781c <main+0x344>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 80075b2:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075b4:	f04f 0801 	mov.w	r8, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	e9cd 941d 	strd	r9, r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80075bc:	f7fa fb9a 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = PING1_Pin | PING2_Pin | LCD_A0_Pin;
 80075c0:	231c      	movs	r3, #28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c2:	a91c      	add	r1, sp, #112	; 0x70
 80075c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c8:	e9cd 381c 	strd	r3, r8, [sp, #112]	; 0x70
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075cc:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d0:	f7fa fb90 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_4 | LCD_CS_Pin;
 80075d4:	2330      	movs	r3, #48	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075d6:	a91c      	add	r1, sp, #112	; 0x70
 80075d8:	488d      	ldr	r0, [pc, #564]	; (8007810 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_4 | LCD_CS_Pin;
 80075da:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075dc:	e9cd 841d 	strd	r8, r4, [sp, #116]	; 0x74
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e0:	941f      	str	r4, [sp, #124]	; 0x7c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075e2:	f7fa fb87 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BUTT1_Pin | BUTT2_Pin | BUTT3_Pin | BUTT4_Pin;
 80075e6:	f240 4307 	movw	r3, #1031	; 0x407
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ea:	a91c      	add	r1, sp, #112	; 0x70
 80075ec:	4889      	ldr	r0, [pc, #548]	; (8007814 <main+0x33c>)
	GPIO_InitStruct.Pin = BUTT1_Pin | BUTT2_Pin | BUTT3_Pin | BUTT4_Pin;
 80075ee:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f0:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f4:	f7fa fb7e 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_8 | GPIO_PIN_9;
 80075f8:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075fc:	a91c      	add	r1, sp, #112	; 0x70
 80075fe:	4885      	ldr	r0, [pc, #532]	; (8007814 <main+0x33c>)
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_8 | GPIO_PIN_9;
 8007600:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007602:	e9cd 941d 	strd	r9, r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007606:	f7fa fb75 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | DIR1_Pin | DIR2_Pin;
 800760a:	f243 0330 	movw	r3, #12336	; 0x3030
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760e:	a91c      	add	r1, sp, #112	; 0x70
 8007610:	4880      	ldr	r0, [pc, #512]	; (8007814 <main+0x33c>)
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | DIR1_Pin | DIR2_Pin;
 8007612:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007614:	e9cd 841d 	strd	r8, r4, [sp, #116]	; 0x74
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007618:	941f      	str	r4, [sp, #124]	; 0x7c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800761a:	f7fa fb6b 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800761e:	4b80      	ldr	r3, [pc, #512]	; (8007820 <main+0x348>)
	HAL_GPIO_Init(GYRO_GPIO_Port, &GPIO_InitStruct);
 8007620:	487c      	ldr	r0, [pc, #496]	; (8007814 <main+0x33c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Pin = GYRO_Pin;
 8007624:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	HAL_GPIO_Init(GYRO_GPIO_Port, &GPIO_InitStruct);
 8007628:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800762a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(GYRO_GPIO_Port, &GPIO_InitStruct);
 800762e:	f7fa fb61 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007632:	4b7c      	ldr	r3, [pc, #496]	; (8007824 <main+0x34c>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007634:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	GPIO_InitStruct.Pin = IR_Pin;
 8007638:	f44f 6200 	mov.w	r2, #2048	; 0x800
	HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 800763c:	a91c      	add	r1, sp, #112	; 0x70
 800763e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007642:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8007646:	f7fa fb55 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800764a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800764e:	a91c      	add	r1, sp, #112	; 0x70
 8007650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = BEEP_Pin;
 8007654:	f04f 0a04 	mov.w	sl, #4
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007658:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765a:	e9cd 941d 	strd	r9, r4, [sp, #116]	; 0x74
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765e:	f7fa fb49 	bl	8001cf4 <HAL_GPIO_Init>
	HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8007662:	a91c      	add	r1, sp, #112	; 0x70
 8007664:	486c      	ldr	r0, [pc, #432]	; (8007818 <main+0x340>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007666:	941f      	str	r4, [sp, #124]	; 0x7c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007668:	e9cd 841d 	strd	r8, r4, [sp, #116]	; 0x74
	GPIO_InitStruct.Pin = BEEP_Pin;
 800766c:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
	HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8007670:	f7fa fb40 	bl	8001cf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007674:	4b6c      	ldr	r3, [pc, #432]	; (8007828 <main+0x350>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007676:	4867      	ldr	r0, [pc, #412]	; (8007814 <main+0x33c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007678:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Pin = ENC1_Pin | GPIO_PIN_7;
 800767a:	22c0      	movs	r2, #192	; 0xc0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800767c:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800767e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007682:	f7fa fb37 	bl	8001cf4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007686:	4622      	mov	r2, r4
 8007688:	4621      	mov	r1, r4
 800768a:	2017      	movs	r0, #23
 800768c:	f7fa f830 	bl	80016f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007690:	2017      	movs	r0, #23
 8007692:	f7fa f863 	bl	800175c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007696:	4621      	mov	r1, r4
 8007698:	4622      	mov	r2, r4
 800769a:	2028      	movs	r0, #40	; 0x28
 800769c:	f7fa f828 	bl	80016f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80076a0:	2028      	movs	r0, #40	; 0x28
 80076a2:	f7fa f85b 	bl	800175c <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 80076a6:	4a61      	ldr	r2, [pc, #388]	; (800782c <main+0x354>)
	hi2c1.Init.Timing = 0x00702991;
 80076a8:	4b61      	ldr	r3, [pc, #388]	; (8007830 <main+0x358>)
	hi2c1.Init.OwnAddress1 = 0;
 80076aa:	60b4      	str	r4, [r6, #8]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80076ac:	4630      	mov	r0, r6
	hi2c1.Init.Timing = 0x00702991;
 80076ae:	e9c6 2300 	strd	r2, r3, [r6]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80076b2:	e9c6 8403 	strd	r8, r4, [r6, #12]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80076b6:	e9c6 4405 	strd	r4, r4, [r6, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80076ba:	e9c6 4407 	strd	r4, r4, [r6, #28]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80076be:	f7fa fd01 	bl	80020c4 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80076c2:	4621      	mov	r1, r4
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7fb fa5d 	bl	8002b84 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80076ca:	4621      	mov	r1, r4
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7fb fa83 	bl	8002bd8 <HAL_I2CEx_ConfigDigitalFilter>
	hspi1.Instance = SPI1;
 80076d2:	4b58      	ldr	r3, [pc, #352]	; (8007834 <main+0x35c>)
 80076d4:	4e58      	ldr	r6, [pc, #352]	; (8007838 <main+0x360>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80076d6:	609c      	str	r4, [r3, #8]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80076d8:	f04f 0c02 	mov.w	ip, #2
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80076dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80076e0:	e9c3 2c03 	strd	r2, ip, [r3, #12]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80076e4:	2228      	movs	r2, #40	; 0x28
 80076e6:	61da      	str	r2, [r3, #28]
	hspi1.Init.CRCPolynomial = 7;
 80076e8:	2207      	movs	r2, #7
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80076ea:	f44f 7e00 	mov.w	lr, #512	; 0x200
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80076ee:	f44f 7182 	mov.w	r1, #260	; 0x104
	hspi1.Init.CRCPolynomial = 7;
 80076f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80076f4:	4618      	mov	r0, r3
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80076f6:	2208      	movs	r2, #8
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80076f8:	f8c3 e018 	str.w	lr, [r3, #24]
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80076fc:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80076fe:	e9c3 6100 	strd	r6, r1, [r3]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007702:	615c      	str	r4, [r3, #20]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007704:	e9c3 4408 	strd	r4, r4, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007708:	629c      	str	r4, [r3, #40]	; 0x28
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800770a:	631c      	str	r4, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800770c:	f7fc f8c4 	bl	8003898 <HAL_SPI_Init>
	htim2.Instance = TIM2;
 8007710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007714:	602b      	str	r3, [r5, #0]
	htim2.Init.Period = 256;
 8007716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800771a:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800771c:	4628      	mov	r0, r5
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800771e:	2380      	movs	r3, #128	; 0x80
 8007720:	61ab      	str	r3, [r5, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007722:	e9c5 9401 	strd	r9, r4, [r5, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007726:	612c      	str	r4, [r5, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007728:	9415      	str	r4, [sp, #84]	; 0x54
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800772a:	9411      	str	r4, [sp, #68]	; 0x44
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800772c:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8007730:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8007734:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8007738:	9422      	str	r4, [sp, #136]	; 0x88
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800773a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800773e:	9418      	str	r4, [sp, #96]	; 0x60
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007740:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8007744:	f7fc fd10 	bl	8004168 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800774c:	a915      	add	r1, sp, #84	; 0x54
 800774e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007750:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8007752:	f7fc fb61 	bl	8003e18 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8007756:	4628      	mov	r0, r5
 8007758:	f7fc fd22 	bl	80041a0 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800775c:	a911      	add	r1, sp, #68	; 0x44
 800775e:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007760:	9411      	str	r4, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007762:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8007764:	f7fc fe48 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = 128;
 8007768:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800776a:	4622      	mov	r2, r4
 800776c:	a91c      	add	r1, sp, #112	; 0x70
 800776e:	4628      	mov	r0, r5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007770:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007774:	2360      	movs	r3, #96	; 0x60
 8007776:	931c      	str	r3, [sp, #112]	; 0x70
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007778:	9420      	str	r4, [sp, #128]	; 0x80
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800777a:	f7fc fd8b 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
	sConfigOC.Pulse = 64;
 800777e:	2340      	movs	r3, #64	; 0x40
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8007780:	4652      	mov	r2, sl
 8007782:	a91c      	add	r1, sp, #112	; 0x70
 8007784:	4628      	mov	r0, r5
	sConfigOC.Pulse = 64;
 8007786:	931d      	str	r3, [sp, #116]	; 0x74
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8007788:	f7fc fd84 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim2);
 800778c:	4628      	mov	r0, r5
 800778e:	f000 ff47 	bl	8008620 <HAL_TIM_MspPostInit>
	htim15.Instance = TIM15;
 8007792:	4e2a      	ldr	r6, [pc, #168]	; (800783c <main+0x364>)
	htim6.Instance = TIM6;
 8007794:	4a2a      	ldr	r2, [pc, #168]	; (8007840 <main+0x368>)
 8007796:	f8cb 2000 	str.w	r2, [fp]
	htim6.Init.Prescaler = 79;
 800779a:	254f      	movs	r5, #79	; 0x4f
	htim6.Init.Period = 10000;
 800779c:	f242 7310 	movw	r3, #10000	; 0x2710
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80077a0:	2180      	movs	r1, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80077a2:	4658      	mov	r0, fp
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80077a4:	f8cb 1018 	str.w	r1, [fp, #24]
	htim6.Init.Period = 10000;
 80077a8:	f8cb 300c 	str.w	r3, [fp, #12]
	htim6.Init.Prescaler = 79;
 80077ac:	f8cb 5004 	str.w	r5, [fp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077b0:	f8cb 4008 	str.w	r4, [fp, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80077b4:	941c      	str	r4, [sp, #112]	; 0x70
 80077b6:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80077ba:	f7fc fcd5 	bl	8004168 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80077be:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80077c0:	2320      	movs	r3, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80077c2:	4658      	mov	r0, fp
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80077c4:	931c      	str	r3, [sp, #112]	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077c6:	941e      	str	r4, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80077c8:	f7fc fe16 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
	htim15.Instance = TIM15;
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <main+0x36c>)
 80077ce:	6032      	str	r2, [r6, #0]
	htim15.Init.Period = 10;
 80077d0:	230a      	movs	r3, #10
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 80077d2:	4630      	mov	r0, r6
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077d4:	e9c6 5401 	strd	r5, r4, [r6, #4]
	htim15.Init.Period = 10;
 80077d8:	60f3      	str	r3, [r6, #12]
	htim15.Init.RepetitionCounter = 0;
 80077da:	e9c6 4404 	strd	r4, r4, [r6, #16]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077de:	61b4      	str	r4, [r6, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80077e0:	941c      	str	r4, [sp, #112]	; 0x70
 80077e2:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 80077e6:	941f      	str	r4, [sp, #124]	; 0x7c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80077e8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80077ec:	9417      	str	r4, [sp, #92]	; 0x5c
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 80077ee:	f7fc fcbb 	bl	8004168 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 80077f6:	a91c      	add	r1, sp, #112	; 0x70
 80077f8:	e028      	b.n	800784c <main+0x374>
 80077fa:	bf00      	nop
 80077fc:	20000058 	.word	0x20000058
 8007800:	d1b71759 	.word	0xd1b71759
 8007804:	40021000 	.word	0x40021000
 8007808:	20000760 	.word	0x20000760
 800780c:	20000a04 	.word	0x20000a04
 8007810:	48000800 	.word	0x48000800
 8007814:	48000400 	.word	0x48000400
 8007818:	48000c00 	.word	0x48000c00
 800781c:	48001c00 	.word	0x48001c00
 8007820:	10210000 	.word	0x10210000
 8007824:	10310000 	.word	0x10310000
 8007828:	10110000 	.word	0x10110000
 800782c:	40005400 	.word	0x40005400
 8007830:	00702991 	.word	0x00702991
 8007834:	2000099c 	.word	0x2000099c
 8007838:	40013000 	.word	0x40013000
 800783c:	200007b0 	.word	0x200007b0
 8007840:	40001000 	.word	0x40001000
 8007844:	40014000 	.word	0x40014000
 8007848:	2000090c 	.word	0x2000090c
 800784c:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800784e:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8007850:	f7fc fae2 	bl	8003e18 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK) {
 8007854:	2108      	movs	r1, #8
 8007856:	4630      	mov	r0, r6
	htim16.Instance = TIM16;
 8007858:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 8007c10 <main+0x738>
	htim1.Instance = TIM1;
 800785c:	4dd0      	ldr	r5, [pc, #832]	; (8007ba0 <main+0x6c8>)
	if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK) {
 800785e:	f7fc fcbb 	bl	80041d8 <HAL_TIM_OnePulse_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8007862:	a915      	add	r1, sp, #84	; 0x54
 8007864:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007866:	9415      	str	r4, [sp, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007868:	9417      	str	r4, [sp, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 800786a:	f7fc fdc5 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
	htim16.Init.Period = 100;
 800786e:	2364      	movs	r3, #100	; 0x64
	htim16.Instance = TIM16;
 8007870:	4acc      	ldr	r2, [pc, #816]	; (8007ba4 <main+0x6cc>)
	htim16.Init.Period = 100;
 8007872:	f8cb 300c 	str.w	r3, [fp, #12]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8007876:	4658      	mov	r0, fp
	htim16.Init.Prescaler = 127;
 8007878:	237f      	movs	r3, #127	; 0x7f
 800787a:	f8cb 3004 	str.w	r3, [fp, #4]
	htim16.Instance = TIM16;
 800787e:	f8cb 2000 	str.w	r2, [fp]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007882:	f8cb 4008 	str.w	r4, [fp, #8]
	htim16.Init.RepetitionCounter = 0;
 8007886:	e9cb 4404 	strd	r4, r4, [fp, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800788a:	f8cb 4018 	str.w	r4, [fp, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800788e:	f7fc fc6b 	bl	8004168 <HAL_TIM_Base_Init>
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8007892:	2108      	movs	r1, #8
 8007894:	4658      	mov	r0, fp
 8007896:	f7fc fc9f 	bl	80041d8 <HAL_TIM_OnePulse_Init>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800789a:	4621      	mov	r1, r4
 800789c:	222c      	movs	r2, #44	; 0x2c
 800789e:	a81c      	add	r0, sp, #112	; 0x70
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80078a0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80078a4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80078a8:	940e      	str	r4, [sp, #56]	; 0x38
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80078aa:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80078ae:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 80078b2:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 80078b6:	941b      	str	r4, [sp, #108]	; 0x6c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80078b8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80078bc:	f001 fa2a 	bl	8008d14 <memset>
	htim1.Init.Period = 256;
 80078c0:	f44f 7280 	mov.w	r2, #256	; 0x100
	htim1.Instance = TIM1;
 80078c4:	4bb8      	ldr	r3, [pc, #736]	; (8007ba8 <main+0x6d0>)
	htim1.Init.Period = 256;
 80078c6:	60ea      	str	r2, [r5, #12]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80078c8:	4628      	mov	r0, r5
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80078ca:	2280      	movs	r2, #128	; 0x80
 80078cc:	61aa      	str	r2, [r5, #24]
	htim1.Instance = TIM1;
 80078ce:	602b      	str	r3, [r5, #0]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078d0:	e9c5 9401 	strd	r9, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 80078d4:	e9c5 4404 	strd	r4, r4, [r5, #16]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80078d8:	f7fc fc46 	bl	8004168 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80078e0:	a911      	add	r1, sp, #68	; 0x44
 80078e2:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e4:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80078e6:	f7fc fa97 	bl	8003e18 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80078ea:	4628      	mov	r0, r5
 80078ec:	f7fc fc58 	bl	80041a0 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80078f0:	a90e      	add	r1, sp, #56	; 0x38
 80078f2:	4628      	mov	r0, r5
	sConfigOC.Pulse = 128;
 80078f4:	f04f 0b60 	mov.w	fp, #96	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80078f8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078fc:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80078fe:	f7fc fd7b 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = 128;
 8007902:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8007904:	4622      	mov	r2, r4
 8007906:	a915      	add	r1, sp, #84	; 0x54
 8007908:	4628      	mov	r0, r5
	sConfigOC.Pulse = 128;
 800790a:	e9cd b315 	strd	fp, r3, [sp, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800790e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007912:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007916:	941b      	str	r4, [sp, #108]	; 0x6c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8007918:	f7fc fcbc 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800791c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8007924:	a91c      	add	r1, sp, #112	; 0x70
 8007926:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007928:	9221      	str	r2, [sp, #132]	; 0x84
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800792a:	9324      	str	r3, [sp, #144]	; 0x90
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800792c:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
	sBreakDeadTimeConfig.DeadTime = 0;
 8007930:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007934:	9420      	str	r4, [sp, #128]	; 0x80
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007936:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800793a:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800793e:	f7fc fd95 	bl	800446c <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_MspPostInit(&htim1);
 8007942:	4628      	mov	r0, r5
 8007944:	f000 fe6c 	bl	8008620 <HAL_TIM_MspPostInit>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	hadc1.Instance = ADC1;
 800794a:	4d98      	ldr	r5, [pc, #608]	; (8007bac <main+0x6d4>)
	hadc2.Instance = ADC2;
 800794c:	4e98      	ldr	r6, [pc, #608]	; (8007bb0 <main+0x6d8>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 800794e:	ea43 0308 	orr.w	r3, r3, r8
 8007952:	64bb      	str	r3, [r7, #72]	; 0x48
 8007954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007956:	ea03 0308 	and.w	r3, r3, r8
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800795a:	4622      	mov	r2, r4
 800795c:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800795e:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007960:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007962:	9b11      	ldr	r3, [sp, #68]	; 0x44
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007964:	f7f9 fec4 	bl	80016f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007968:	200b      	movs	r0, #11
 800796a:	f7f9 fef7 	bl	800175c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800796e:	4621      	mov	r1, r4
 8007970:	4622      	mov	r2, r4
 8007972:	200c      	movs	r0, #12
 8007974:	f7f9 febc 	bl	80016f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007978:	200c      	movs	r0, #12
 800797a:	f7f9 feef 	bl	800175c <HAL_NVIC_EnableIRQ>
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800797e:	2208      	movs	r2, #8
	hadc1.Instance = ADC1;
 8007980:	4b8c      	ldr	r3, [pc, #560]	; (8007bb4 <main+0x6dc>)
 8007982:	602b      	str	r3, [r5, #0]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007984:	e9c5 2402 	strd	r2, r4, [r5, #8]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8007988:	4628      	mov	r0, r5
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800798a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800798e:	636a      	str	r2, [r5, #52]	; 0x34
	ADC_MultiModeTypeDef multimode = { 0 };
 8007990:	9415      	str	r4, [sp, #84]	; 0x54
 8007992:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8007996:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 800799a:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 800799e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80079a2:	606c      	str	r4, [r5, #4]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80079a4:	e9c5 8a04 	strd	r8, sl, [r5, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80079a8:	762c      	strb	r4, [r5, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80079aa:	766c      	strb	r4, [r5, #25]
	hadc1.Init.NbrOfConversion = 3;
 80079ac:	f8c5 901c 	str.w	r9, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80079b0:	f885 4020 	strb.w	r4, [r5, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80079b4:	e9c5 8409 	strd	r8, r4, [r5, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80079b8:	62ec      	str	r4, [r5, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80079ba:	f885 8030 	strb.w	r8, [r5, #48]	; 0x30
	hadc1.Init.OversamplingMode = DISABLE;
 80079be:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80079c2:	f7f9 f989 	bl	8000cd8 <HAL_ADC_Init>
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80079c6:	a915      	add	r1, sp, #84	; 0x54
 80079c8:	4628      	mov	r0, r5
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80079ca:	9415      	str	r4, [sp, #84]	; 0x54
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80079cc:	f7f9 fe12 	bl	80015f4 <HAL_ADCEx_MultiModeConfigChannel>
	sConfig.Channel = ADC_CHANNEL_4;
 80079d0:	4b79      	ldr	r3, [pc, #484]	; (8007bb8 <main+0x6e0>)
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80079d2:	941e      	str	r4, [sp, #120]	; 0x78
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80079d4:	227f      	movs	r2, #127	; 0x7f
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80079d6:	f04f 0b06 	mov.w	fp, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80079da:	a91c      	add	r1, sp, #112	; 0x70
 80079dc:	4628      	mov	r0, r5
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80079de:	e9cd 2a1f 	strd	r2, sl, [sp, #124]	; 0x7c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80079e2:	e9cd 3b1c 	strd	r3, fp, [sp, #112]	; 0x70
	sConfig.Offset = 0;
 80079e6:	9421      	str	r4, [sp, #132]	; 0x84
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80079e8:	f7f9 faae 	bl	8000f48 <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80079ec:	4a73      	ldr	r2, [pc, #460]	; (8007bbc <main+0x6e4>)
 80079ee:	230c      	movs	r3, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80079f0:	a91c      	add	r1, sp, #112	; 0x70
 80079f2:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80079f4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80079f8:	f7f9 faa6 	bl	8000f48 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_6;
 80079fc:	4b70      	ldr	r3, [pc, #448]	; (8007bc0 <main+0x6e8>)
	sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80079fe:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007a02:	a91c      	add	r1, sp, #112	; 0x70
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8007a04:	2712      	movs	r7, #18
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007a06:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8007a08:	e9cd 371c 	strd	r3, r7, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007a0c:	f7f9 fa9c 	bl	8000f48 <HAL_ADC_ConfigChannel>
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8007a10:	2208      	movs	r2, #8
	hadc2.Instance = ADC2;
 8007a12:	4b6c      	ldr	r3, [pc, #432]	; (8007bc4 <main+0x6ec>)
 8007a14:	6033      	str	r3, [r6, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007a16:	e9c6 4201 	strd	r4, r2, [r6, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8007a1a:	4630      	mov	r0, r6
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a20:	6372      	str	r2, [r6, #52]	; 0x34
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8007a22:	941c      	str	r4, [sp, #112]	; 0x70
 8007a24:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 8007a28:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 8007a2c:	9421      	str	r4, [sp, #132]	; 0x84
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007a2e:	e9c6 4803 	strd	r4, r8, [r6, #12]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007a32:	f8c6 a014 	str.w	sl, [r6, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8007a36:	7634      	strb	r4, [r6, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8007a38:	7674      	strb	r4, [r6, #25]
	hadc2.Init.NbrOfConversion = 3;
 8007a3a:	f8c6 901c 	str.w	r9, [r6, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007a3e:	f886 4020 	strb.w	r4, [r6, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007a42:	e9c6 8409 	strd	r8, r4, [r6, #36]	; 0x24
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a46:	62f4      	str	r4, [r6, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8007a48:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
	hadc2.Init.OversamplingMode = DISABLE;
 8007a4c:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8007a50:	f7f9 f942 	bl	8000cd8 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_1;
 8007a54:	4b5c      	ldr	r3, [pc, #368]	; (8007bc8 <main+0x6f0>)
 8007a56:	931c      	str	r3, [sp, #112]	; 0x70
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007a58:	227f      	movs	r2, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8007a5a:	a91c      	add	r1, sp, #112	; 0x70
 8007a5c:	4630      	mov	r0, r6
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007a5e:	e9cd 2a1f 	strd	r2, sl, [sp, #124]	; 0x7c
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007a62:	e9cd b41d 	strd	fp, r4, [sp, #116]	; 0x74
	sConfig.Offset = 0;
 8007a66:	9421      	str	r4, [sp, #132]	; 0x84
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8007a68:	f7f9 fa6e 	bl	8000f48 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_2;
 8007a6c:	4b57      	ldr	r3, [pc, #348]	; (8007bcc <main+0x6f4>)
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8007a6e:	220c      	movs	r2, #12
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8007a70:	a91c      	add	r1, sp, #112	; 0x70
 8007a72:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_2;
 8007a74:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8007a78:	f7f9 fa66 	bl	8000f48 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_3;
 8007a7c:	4b54      	ldr	r3, [pc, #336]	; (8007bd0 <main+0x6f8>)
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8007a7e:	a91c      	add	r1, sp, #112	; 0x70
 8007a80:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_3;
 8007a82:	e9cd 371c 	strd	r3, r7, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8007a86:	f7f9 fa5f 	bl	8000f48 <HAL_ADC_ConfigChannel>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8007a8a:	217f      	movs	r1, #127	; 0x7f
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f7f9 fd61 	bl	8001554 <HAL_ADCEx_Calibration_Start>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8007a92:	217f      	movs	r1, #127	; 0x7f
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7f9 fd5d 	bl	8001554 <HAL_ADCEx_Calibration_Start>
	TurboStop();
 8007a9a:	f7fd fa01 	bl	8004ea0 <TurboStop>
	MotorsStop();
 8007a9e:	f7fd fa13 	bl	8004ec8 <MotorsStop>
	MotorLeftSpeed(0);
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7fd fa1e 	bl	8004ee4 <MotorLeftSpeed>
	MotorRightSpeed(0);
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7fd fa3f 	bl	8004f2c <MotorRightSpeed>
	EncodersInit();
 8007aae:	f7fc fd25 	bl	80044fc <EncodersInit>
	if (dev_settings_chk()) {
 8007ab2:	f7fd fc1f 	bl	80052f4 <dev_settings_chk>
 8007ab6:	b108      	cbz	r0, 8007abc <main+0x5e4>
		dev_factory_settings();
 8007ab8:	f7fd fb9a 	bl	80051f0 <dev_factory_settings>
	if (maze_settings_chk()) {
 8007abc:	f7fd fc3a 	bl	8005334 <maze_settings_chk>
 8007ac0:	b108      	cbz	r0, 8007ac6 <main+0x5ee>
		dev_factory_settings();
 8007ac2:	f7fd fb95 	bl	80051f0 <dev_factory_settings>
	ir_init();
 8007ac6:	f7fd f871 	bl	8004bac <ir_init>
	LcdInit();
 8007aca:	f7fd f959 	bl	8004d80 <LcdInit>
	LcdContrast(0xFF);
 8007ace:	20ff      	movs	r0, #255	; 0xff
 8007ad0:	f7fd f9a0 	bl	8004e14 <LcdContrast>
	LcdErase();
 8007ad4:	f7fc fd30 	bl	8004538 <LcdErase>
	LcdBitmap(0, 0, (IMG_DEF*) &splash_screen);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4608      	mov	r0, r1
 8007adc:	4a3d      	ldr	r2, [pc, #244]	; (8007bd4 <main+0x6fc>)
 8007ade:	f7fd f803 	bl	8004ae8 <LcdBitmap>
	LcdUpdate();
 8007ae2:	f7fd f9a1 	bl	8004e28 <LcdUpdate>
	speedW = 0;
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	; (8007bd8 <main+0x700>)
 8007ae8:	2400      	movs	r4, #0
	HAL_Delay(10000);
 8007aea:	f242 7010 	movw	r0, #10000	; 0x2710
	result = SD_MPU6050_Init(&hi2c1, &mpu1, SD_MPU6050_Device_0,
 8007aee:	2503      	movs	r5, #3
	speedW = 0;
 8007af0:	601c      	str	r4, [r3, #0]
	HAL_Delay(10000);
 8007af2:	f7f9 f8df 	bl	8000cb4 <HAL_Delay>
	result = SD_MPU6050_Init(&hi2c1, &mpu1, SD_MPU6050_Device_0,
 8007af6:	4623      	mov	r3, r4
 8007af8:	4938      	ldr	r1, [pc, #224]	; (8007bdc <main+0x704>)
 8007afa:	9500      	str	r5, [sp, #0]
 8007afc:	4622      	mov	r2, r4
 8007afe:	4838      	ldr	r0, [pc, #224]	; (8007be0 <main+0x708>)
 8007b00:	f7fd fadc 	bl	80050bc <SD_MPU6050_Init>
 8007b04:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <main+0x70c>)
 8007b06:	4601      	mov	r1, r0
 8007b08:	7018      	strb	r0, [r3, #0]
	if (result == SD_MPU6050_Result_Ok) {
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	f040 8170 	bne.w	8007df0 <main+0x918>
		LcdTextXY(0, 0, BIG_FNT, CENTERED, mpu_ok);
 8007b10:	4b35      	ldr	r3, [pc, #212]	; (8007be8 <main+0x710>)
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	462a      	mov	r2, r5
 8007b16:	2304      	movs	r3, #4
 8007b18:	f7fc fd32 	bl	8004580 <LcdTextXY>
	LcdUpdate();
 8007b1c:	f7fd f984 	bl	8004e28 <LcdUpdate>
	HAL_Delay(10000);
 8007b20:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b24:	f7f9 f8c6 	bl	8000cb4 <HAL_Delay>
		SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);	// dummy read
 8007b28:	4d2c      	ldr	r5, [pc, #176]	; (8007bdc <main+0x704>)
 8007b2a:	4c2d      	ldr	r4, [pc, #180]	; (8007be0 <main+0x708>)
	HAL_Delay(10000);
 8007b2c:	f04f 08c8 	mov.w	r8, #200	; 0xc8
		SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);	// dummy read
 8007b30:	4629      	mov	r1, r5
 8007b32:	4620      	mov	r0, r4
 8007b34:	f7fd fb3a 	bl	80051ac <SD_MPU6050_ReadGyroscope>
 8007b38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		HAL_Delay(10);
 8007b3c:	200a      	movs	r0, #10
 8007b3e:	f7f9 f8b9 	bl	8000cb4 <HAL_Delay>
	for (tmp_char = 0; tmp_char < 200; tmp_char++) {
 8007b42:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8007b46:	d1f3      	bne.n	8007b30 <main+0x658>
	front_min = maze_settings.maze_width * 5 - SENSORS_GAP
 8007b48:	4a28      	ldr	r2, [pc, #160]	; (8007bec <main+0x714>)
	g_pfGyroOffset[2] = dev_settings.gyro_offset;
 8007b4a:	4e29      	ldr	r6, [pc, #164]	; (8007bf0 <main+0x718>)
	front_min = maze_settings.maze_width * 5 - SENSORS_GAP
 8007b4c:	f8d2 9000 	ldr.w	r9, [r2]
	fAngle = 0;
 8007b50:	eddf 8a28 	vldr	s17, [pc, #160]	; 8007bf4 <main+0x71c>
 8007b54:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <main+0x720>)
	g_pfGyroOffset[2] = dev_settings.gyro_offset;
 8007b56:	4929      	ldr	r1, [pc, #164]	; (8007bfc <main+0x724>)
 8007b58:	6d73      	ldr	r3, [r6, #84]	; 0x54
	fAngle = 0;
 8007b5a:	edc2 8a00 	vstr	s17, [r2]
	g_pfGyroOffset[2] = dev_settings.gyro_offset;
 8007b5e:	608b      	str	r3, [r1, #8]
			+ dev_settings.ramp / STEPK + (dev_settings.fast_speed * 0.35); // 25
 8007b60:	68b0      	ldr	r0, [r6, #8]
	state = POWERON;
 8007b62:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8007c14 <main+0x73c>
 8007b66:	4c26      	ldr	r4, [pc, #152]	; (8007c00 <main+0x728>)
 8007b68:	4f26      	ldr	r7, [pc, #152]	; (8007c04 <main+0x72c>)
 8007b6a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007c18 <main+0x740>
 8007b6e:	4d26      	ldr	r5, [pc, #152]	; (8007c08 <main+0x730>)
	i32FPart = (int32_t) (inpData * 1000.0f);
 8007b70:	ed9f 8a26 	vldr	s16, [pc, #152]	; 8007c0c <main+0x734>
			+ dev_settings.ramp / STEPK + (dev_settings.fast_speed * 0.35); // 25
 8007b74:	f7f8 fcc6 	bl	8000504 <__aeabi_ui2d>
 8007b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b7c:	69f0      	ldr	r0, [r6, #28]
 8007b7e:	f7f8 fcc1 	bl	8000504 <__aeabi_ui2d>
 8007b82:	a305      	add	r3, pc, #20	; (adr r3, 8007b98 <main+0x6c0>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fe60 	bl	800084c <__aeabi_ddiv>
	front_min = maze_settings.maze_width * 5 - SENSORS_GAP
 8007b8c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8007b90:	e044      	b.n	8007c1c <main+0x744>
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
 8007b98:	9999999a 	.word	0x9999999a
 8007b9c:	3ffb9999 	.word	0x3ffb9999
 8007ba0:	2000094c 	.word	0x2000094c
 8007ba4:	40014400 	.word	0x40014400
 8007ba8:	40012c00 	.word	0x40012c00
 8007bac:	20000824 	.word	0x20000824
 8007bb0:	200006fc 	.word	0x200006fc
 8007bb4:	50040000 	.word	0x50040000
 8007bb8:	10c00010 	.word	0x10c00010
 8007bbc:	14f00020 	.word	0x14f00020
 8007bc0:	19200040 	.word	0x19200040
 8007bc4:	50040100 	.word	0x50040100
 8007bc8:	04300002 	.word	0x04300002
 8007bcc:	08600004 	.word	0x08600004
 8007bd0:	0c900008 	.word	0x0c900008
 8007bd4:	0800b430 	.word	0x0800b430
 8007bd8:	20000818 	.word	0x20000818
 8007bdc:	20000ae8 	.word	0x20000ae8
 8007be0:	20000760 	.word	0x20000760
 8007be4:	20000994 	.word	0x20000994
 8007be8:	20000048 	.word	0x20000048
 8007bec:	2000060c 	.word	0x2000060c
 8007bf0:	20000624 	.word	0x20000624
 8007bf4:	00000000 	.word	0x00000000
 8007bf8:	200005fc 	.word	0x200005fc
 8007bfc:	20000600 	.word	0x20000600
 8007c00:	200006f0 	.word	0x200006f0
 8007c04:	200006d8 	.word	0x200006d8
 8007c08:	2000017c 	.word	0x2000017c
 8007c0c:	447a0000 	.word	0x447a0000
 8007c10:	20000aa4 	.word	0x20000aa4
 8007c14:	2000080c 	.word	0x2000080c
 8007c18:	20000908 	.word	0x20000908
			+ dev_settings.ramp / STEPK + (dev_settings.fast_speed * 0.35); // 25
 8007c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c20:	f1a9 0041 	sub.w	r0, r9, #65	; 0x41
 8007c24:	f7f8 fc6e 	bl	8000504 <__aeabi_ui2d>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c30:	f7f8 fb2c 	bl	800028c <__adddf3>
 8007c34:	a3cc      	add	r3, pc, #816	; (adr r3, 8007f68 <main+0xa90>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c42:	f7f8 fcd9 	bl	80005f8 <__aeabi_dmul>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c4e:	f7f8 fb1d 	bl	800028c <__adddf3>
	front_min = maze_settings.maze_width * 5 - SENSORS_GAP
 8007c52:	f7f8 ff6b 	bl	8000b2c <__aeabi_d2iz>
 8007c56:	4ba4      	ldr	r3, [pc, #656]	; (8007ee8 <main+0xa10>)
 8007c58:	6018      	str	r0, [r3, #0]
			+ (dev_settings.fast_speed * 0.7);
 8007c5a:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8007c5e:	f7f8 fc51 	bl	8000504 <__aeabi_ui2d>
 8007c62:	a39b      	add	r3, pc, #620	; (adr r3, 8007ed0 <main+0x9f8>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c70:	f7f8 fcc2 	bl	80005f8 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c7c:	f7f8 fb06 	bl	800028c <__adddf3>
	front_turn_min = maze_settings.maze_width * 10
 8007c80:	f7f8 ff54 	bl	8000b2c <__aeabi_d2iz>
 8007c84:	4999      	ldr	r1, [pc, #612]	; (8007eec <main+0xa14>)
			- ROBOT_WIDTH / 2) * STEPK - dev_settings.fast_speed * 0.25; //SENSORS_GAP
 8007c86:	4b9a      	ldr	r3, [pc, #616]	; (8007ef0 <main+0xa18>)
	front_turn_min = maze_settings.maze_width * 10
 8007c88:	6008      	str	r0, [r1, #0]
			- ROBOT_WIDTH / 2) * STEPK - dev_settings.fast_speed * 0.25; //SENSORS_GAP
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c90:	f7f8 fcb2 	bl	80005f8 <__aeabi_dmul>
 8007c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c98:	f109 000f 	add.w	r0, r9, #15
 8007c9c:	f7f8 fc32 	bl	8000504 <__aeabi_ui2d>
 8007ca0:	a38d      	add	r3, pc, #564	; (adr r3, 8007ed8 <main+0xa00>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fca7 	bl	80005f8 <__aeabi_dmul>
 8007caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cae:	f7f8 faeb 	bl	8000288 <__aeabi_dsub>
	goto_center_steps = ((maze_settings.maze_width * 5) + SENSORS_GAP
 8007cb2:	f7f8 ff3b 	bl	8000b2c <__aeabi_d2iz>
 8007cb6:	4b8f      	ldr	r3, [pc, #572]	; (8007ef4 <main+0xa1c>)
 8007cb8:	6018      	str	r0, [r3, #0]
			* STEPK - dev_settings.fast_speed * 0.25; //+ (40 * STEPK);
 8007cba:	f1a9 0073 	sub.w	r0, r9, #115	; 0x73
 8007cbe:	f7f8 fc21 	bl	8000504 <__aeabi_ui2d>
 8007cc2:	a385      	add	r3, pc, #532	; (adr r3, 8007ed8 <main+0xa00>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc96 	bl	80005f8 <__aeabi_dmul>
 8007ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cd0:	f7f8 fada 	bl	8000288 <__aeabi_dsub>
	goto_wall = (maze_settings.maze_width * 5 - (SENSORS_GAP + ROBOT_WIDTH / 2))
 8007cd4:	f7f8 ff2a 	bl	8000b2c <__aeabi_d2iz>
 8007cd8:	4b87      	ldr	r3, [pc, #540]	; (8007ef8 <main+0xa20>)
 8007cda:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8007f70 <main+0xa98>
 8007cde:	6018      	str	r0, [r3, #0]
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007ce0:	2028      	movs	r0, #40	; 0x28
 8007ce2:	f7f9 fd3b 	bl	800175c <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start(&htim6);
 8007ce6:	4885      	ldr	r0, [pc, #532]	; (8007efc <main+0xa24>)
 8007ce8:	f7fc f808 	bl	8003cfc <HAL_TIM_Base_Start>
	speedW = 0;
 8007cec:	4b84      	ldr	r3, [pc, #528]	; (8007f00 <main+0xa28>)
	fAngle = 0;
 8007cee:	4a85      	ldr	r2, [pc, #532]	; (8007f04 <main+0xa2c>)
	speedW = 0;
 8007cf0:	f8c3 8000 	str.w	r8, [r3]
	speedX = 0;
 8007cf4:	4b84      	ldr	r3, [pc, #528]	; (8007f08 <main+0xa30>)
	fAngle = 0;
 8007cf6:	edc2 8a00 	vstr	s17, [r2]
	speedX = 0;
 8007cfa:	f8c3 8000 	str.w	r8, [r3]
	turn = 0;
 8007cfe:	4b83      	ldr	r3, [pc, #524]	; (8007f0c <main+0xa34>)
	state = POWERON;
 8007d00:	f88a 8000 	strb.w	r8, [sl]
	turn = 0;
 8007d04:	f8c3 8000 	str.w	r8, [r3]
	tmp_char = 0;
 8007d08:	f8cd 8010 	str.w	r8, [sp, #16]
		gulSysTimer = 10;			// time slot for all measurements
 8007d0c:	230a      	movs	r3, #10
 8007d0e:	6023      	str	r3, [r4, #0]
		read_sensors();
 8007d10:	f7ff fb5a 	bl	80073c8 <read_sensors>
		frontL_distance = dev_settings.frontL_callibration / sensor_values[4];
 8007d14:	497e      	ldr	r1, [pc, #504]	; (8007f10 <main+0xa38>)
 8007d16:	893a      	ldrh	r2, [r7, #8]
 8007d18:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8007d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1e:	600b      	str	r3, [r1, #0]
		frontR_distance = dev_settings.frontR_callibration / sensor_values[1];
 8007d20:	497c      	ldr	r1, [pc, #496]	; (8007f14 <main+0xa3c>)
 8007d22:	887a      	ldrh	r2, [r7, #2]
 8007d24:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d2a:	600b      	str	r3, [r1, #0]
		left_distance = dev_settings.sideL_callibration / sensor_values[3];
 8007d2c:	497a      	ldr	r1, [pc, #488]	; (8007f18 <main+0xa40>)
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d36:	600b      	str	r3, [r1, #0]
		right_distance = dev_settings.sideR_callibration / sensor_values[2];
 8007d38:	4978      	ldr	r1, [pc, #480]	; (8007f1c <main+0xa44>)
 8007d3a:	88ba      	ldrh	r2, [r7, #4]
 8007d3c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d42:	600b      	str	r3, [r1, #0]
		left_side = dev_settings.left_callibration / sensor_values[5];
 8007d44:	4976      	ldr	r1, [pc, #472]	; (8007f20 <main+0xa48>)
 8007d46:	897a      	ldrh	r2, [r7, #10]
 8007d48:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8007d4a:	fbb3 f3f2 	udiv	r3, r3, r2
		right_side = dev_settings.right_callibration / sensor_values[0];
 8007d4e:	883a      	ldrh	r2, [r7, #0]
		left_side = dev_settings.left_callibration / sensor_values[5];
 8007d50:	600b      	str	r3, [r1, #0]
		right_side = dev_settings.right_callibration / sensor_values[0];
 8007d52:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d54:	fbb3 f3f2 	udiv	r3, r3, r2
		right_side_distance = right_side;
 8007d58:	4a72      	ldr	r2, [pc, #456]	; (8007f24 <main+0xa4c>)
		right_side = dev_settings.right_callibration / sensor_values[0];
 8007d5a:	f8cb 3000 	str.w	r3, [fp]
		right_side_distance = right_side;
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	f8cd 9008 	str.w	r9, [sp, #8]
		while (gulSysTimer) {	// wait always time base - 10 = 1ms;
 8007d64:	e002      	b.n	8007d6c <main+0x894>
			if ((mpu_irq) && (gulSysTimer > 1)) {
 8007d66:	782b      	ldrb	r3, [r5, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d14a      	bne.n	8007e02 <main+0x92a>
		while (gulSysTimer) {	// wait always time base - 10 = 1ms;
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f9      	bne.n	8007d66 <main+0x88e>
		if(dogTurnFlag)
 8007d72:	4b6d      	ldr	r3, [pc, #436]	; (8007f28 <main+0xa50>)
 8007d74:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007d78:	f993 3000 	ldrsb.w	r3, [r3]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 80f9 	bne.w	8007f74 <main+0xa9c>
		switch (state) {
 8007d82:	f89a 3000 	ldrb.w	r3, [sl]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	f000 8145 	beq.w	8008016 <main+0xb3e>
 8007d8c:	f0c0 8171 	bcc.w	8008072 <main+0xb9a>
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	f040 816a 	bne.w	800806a <main+0xb92>
			MotorLeftSpeed(0);
 8007d96:	2000      	movs	r0, #0
 8007d98:	f7fd f8a4 	bl	8004ee4 <MotorLeftSpeed>
			MotorRightSpeed(0);
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	f7fd f8c5 	bl	8004f2c <MotorRightSpeed>
			if (gucKeyboardKey != 0xFF) {
 8007da2:	f899 3000 	ldrb.w	r3, [r9]
 8007da6:	2bff      	cmp	r3, #255	; 0xff
 8007da8:	d013      	beq.n	8007dd2 <main+0x8fa>
				if (last_key != gucKeyboardKey) {
 8007daa:	4a60      	ldr	r2, [pc, #384]	; (8007f2c <main+0xa54>)
 8007dac:	f899 3000 	ldrb.w	r3, [r9]
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d00d      	beq.n	8007dd2 <main+0x8fa>
					gucKeyHoldTimer = 3;
 8007db6:	4a5e      	ldr	r2, [pc, #376]	; (8007f30 <main+0xa58>)
 8007db8:	2303      	movs	r3, #3
 8007dba:	7013      	strb	r3, [r2, #0]
					if (gucKeyboardKey != 0xFF) {
 8007dbc:	f899 3000 	ldrb.w	r3, [r9]
 8007dc0:	2bff      	cmp	r3, #255	; 0xff
 8007dc2:	d006      	beq.n	8007dd2 <main+0x8fa>
						gucKeyboardTimer = 10; // 100 ms time inteval before next key reading
 8007dc4:	4a5b      	ldr	r2, [pc, #364]	; (8007f34 <main+0xa5c>)
 8007dc6:	230a      	movs	r3, #10
 8007dc8:	8013      	strh	r3, [r2, #0]
						MENU_handler(gucKeyboardKey); // Parameter only gucKeyboardKey, but in the menu function must be checked all events
 8007dca:	f899 0000 	ldrb.w	r0, [r9]
 8007dce:	f7fe fdc9 	bl	8006964 <MENU_handler>
			if (gucRepeatOff) {
 8007dd2:	4b59      	ldr	r3, [pc, #356]	; (8007f38 <main+0xa60>)
			last_key = gucKeyboardKey;
 8007dd4:	f899 2000 	ldrb.w	r2, [r9]
 8007dd8:	4954      	ldr	r1, [pc, #336]	; (8007f2c <main+0xa54>)
			if (gucRepeatOff) {
 8007dda:	781b      	ldrb	r3, [r3, #0]
			last_key = gucKeyboardKey;
 8007ddc:	700a      	strb	r2, [r1, #0]
			if (gucRepeatOff) {
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d094      	beq.n	8007d0c <main+0x834>
				MENU_handler(0xFE);
 8007de2:	20fe      	movs	r0, #254	; 0xfe
 8007de4:	f7fe fdbe 	bl	8006964 <MENU_handler>
				gucRepeatOff = 0;
 8007de8:	4a53      	ldr	r2, [pc, #332]	; (8007f38 <main+0xa60>)
 8007dea:	2300      	movs	r3, #0
 8007dec:	7013      	strb	r3, [r2, #0]
 8007dee:	e78d      	b.n	8007d0c <main+0x834>
		LcdTextXY(0, 0, BIG_FNT, CENTERED, mpu_not);
 8007df0:	4b52      	ldr	r3, [pc, #328]	; (8007f3c <main+0xa64>)
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	462a      	mov	r2, r5
 8007df6:	2304      	movs	r3, #4
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f7fc fbc0 	bl	8004580 <LcdTextXY>
 8007e00:	e68c      	b.n	8007b1c <main+0x644>
			if ((mpu_irq) && (gulSysTimer > 1)) {
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d9b1      	bls.n	8007d6c <main+0x894>
				mpu_irq = 0;
 8007e08:	2300      	movs	r3, #0
				SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);
 8007e0a:	494d      	ldr	r1, [pc, #308]	; (8007f40 <main+0xa68>)
 8007e0c:	484d      	ldr	r0, [pc, #308]	; (8007f44 <main+0xa6c>)
				mpu_irq = 0;
 8007e0e:	702b      	strb	r3, [r5, #0]
 8007e10:	9306      	str	r3, [sp, #24]
				SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);
 8007e12:	f7fd f9cb 	bl	80051ac <SD_MPU6050_ReadGyroscope>
				g_pfGyro[2] = -(float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;// Get float
 8007e16:	4b4a      	ldr	r3, [pc, #296]	; (8007f40 <main+0xa68>)
				gulDeltaT = gulTimeTick;
 8007e18:	494b      	ldr	r1, [pc, #300]	; (8007f48 <main+0xa70>)
				g_pfGyro[2] = -(float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;// Get float
 8007e1a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8007e1e:	ed93 7a01 	vldr	s14, [r3, #4]
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e22:	4b4a      	ldr	r3, [pc, #296]	; (8007f4c <main+0xa74>)
				g_pfGyro[2] = -(float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;// Get float
 8007e24:	ee07 2a90 	vmov	s15, r2
 8007e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e2c:	4a48      	ldr	r2, [pc, #288]	; (8007f50 <main+0xa78>)
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e2e:	edd3 6a02 	vldr	s13, [r3, #8]
				gulTimeTick = 0;
 8007e32:	9b06      	ldr	r3, [sp, #24]
				g_pfGyro[2] = -(float) mpu1.Gyroscope_Z * mpu1.Gyro_Mult;// Get float
 8007e34:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007e38:	edc2 7a02 	vstr	s15, [r2, #8]
				gulDeltaT = gulTimeTick;
 8007e3c:	f8d1 8000 	ldr.w	r8, [r1]
				gulTimeTick = 0;
 8007e40:	600b      	str	r3, [r1, #0]
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e42:	edd2 7a02 	vldr	s15, [r2, #8]
				gulDeltaT = gulTimeTick;
 8007e46:	4b43      	ldr	r3, [pc, #268]	; (8007f54 <main+0xa7c>)
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
				gulDeltaT = gulTimeTick;
 8007e4c:	f8c3 8000 	str.w	r8, [r3]
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e50:	ee17 0a90 	vmov	r0, s15
 8007e54:	f7f8 fb78 	bl	8000548 <__aeabi_f2d>
 8007e58:	a321      	add	r3, pc, #132	; (adr r3, 8007ee0 <main+0xa08>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fbcb 	bl	80005f8 <__aeabi_dmul>
 8007e62:	e9cd 0106 	strd	r0, r1, [sp, #24]
						* gulDeltaT;
 8007e66:	4640      	mov	r0, r8
 8007e68:	f7f8 fb4c 	bl	8000504 <__aeabi_ui2d>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e78:	4b22      	ldr	r3, [pc, #136]	; (8007f04 <main+0xa2c>)
						* gulDeltaT;
 8007e7a:	4680      	mov	r8, r0
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e7c:	6818      	ldr	r0, [r3, #0]
						* gulDeltaT;
 8007e7e:	4689      	mov	r9, r1
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007e80:	f7f8 fb62 	bl	8000548 <__aeabi_f2d>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 f9fe 	bl	800028c <__adddf3>
 8007e90:	f7f8 fe74 	bl	8000b7c <__aeabi_d2f>
 8007e94:	ee07 0a10 	vmov	s14, r0
	i32FPart = (int32_t) (inpData * 1000.0f);
 8007e98:	ee67 7a08 	vmul.f32	s15, s14, s16
	i32IPart = (int32_t) inpData;
 8007e9c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	i32FPart = (int32_t) (inpData * 1000.0f);
 8007ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	i32FPart = i32FPart - (i32IPart * 1000);
 8007ea4:	4a2c      	ldr	r2, [pc, #176]	; (8007f58 <main+0xa80>)
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007ea6:	4817      	ldr	r0, [pc, #92]	; (8007f04 <main+0xa2c>)
	i32IPart = (int32_t) inpData;
 8007ea8:	ee16 1a90 	vmov	r1, s13
	i32FPart = (int32_t) (inpData * 1000.0f);
 8007eac:	ee17 3a90 	vmov	r3, s15
	i32FPart = i32FPart - (i32IPart * 1000);
 8007eb0:	fb02 3301 	mla	r3, r2, r1, r3
	i32IPart = (int32_t) inpData;
 8007eb4:	4a29      	ldr	r2, [pc, #164]	; (8007f5c <main+0xa84>)
				fAngle += (g_pfGyro[2] + g_pfGyroOffset[2]) * 0.0001
 8007eb6:	ed80 7a00 	vstr	s14, [r0]
	i32IPart = (int32_t) inpData;
 8007eba:	edc2 6a00 	vstr	s13, [r2]
	if (i32FPart < 0) {
 8007ebe:	2b00      	cmp	r3, #0
		i32FPart *= -1;
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <main+0xa88>)
 8007ec2:	bfb8      	it	lt
 8007ec4:	425b      	neglt	r3, r3
 8007ec6:	6013      	str	r3, [r2, #0]
				lAngle = i32IPart;
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <main+0xa8c>)
 8007eca:	edc3 6a00 	vstr	s13, [r3]
 8007ece:	e74d      	b.n	8007d6c <main+0x894>
 8007ed0:	66666666 	.word	0x66666666
 8007ed4:	3fe66666 	.word	0x3fe66666
 8007ed8:	9999999a 	.word	0x9999999a
 8007edc:	3ffb9999 	.word	0x3ffb9999
 8007ee0:	eb1c432d 	.word	0xeb1c432d
 8007ee4:	3f1a36e2 	.word	0x3f1a36e2
 8007ee8:	20000ae4 	.word	0x20000ae4
 8007eec:	20000b0c 	.word	0x20000b0c
 8007ef0:	3fd00000 	.word	0x3fd00000
 8007ef4:	20000888 	.word	0x20000888
 8007ef8:	20000904 	.word	0x20000904
 8007efc:	2000090c 	.word	0x2000090c
 8007f00:	20000818 	.word	0x20000818
 8007f04:	200005fc 	.word	0x200005fc
 8007f08:	20000800 	.word	0x20000800
 8007f0c:	20000808 	.word	0x20000808
 8007f10:	20000a94 	.word	0x20000a94
 8007f14:	20000890 	.word	0x20000890
 8007f18:	20000a98 	.word	0x20000a98
 8007f1c:	20000b18 	.word	0x20000b18
 8007f20:	2000089c 	.word	0x2000089c
 8007f24:	20000184 	.word	0x20000184
 8007f28:	200001a0 	.word	0x200001a0
 8007f2c:	20000900 	.word	0x20000900
 8007f30:	20000901 	.word	0x20000901
 8007f34:	200007ac 	.word	0x200007ac
 8007f38:	20000174 	.word	0x20000174
 8007f3c:	20000038 	.word	0x20000038
 8007f40:	20000ae8 	.word	0x20000ae8
 8007f44:	20000760 	.word	0x20000760
 8007f48:	20000820 	.word	0x20000820
 8007f4c:	20000600 	.word	0x20000600
 8007f50:	200005d8 	.word	0x200005d8
 8007f54:	20000a90 	.word	0x20000a90
 8007f58:	fffffc18 	.word	0xfffffc18
 8007f5c:	20000898 	.word	0x20000898
 8007f60:	200006f8 	.word	0x200006f8
 8007f64:	200006d0 	.word	0x200006d0
 8007f68:	66666666 	.word	0x66666666
 8007f6c:	3fd66666 	.word	0x3fd66666
 8007f70:	20000034 	.word	0x20000034
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, SET);
 8007f74:	2201      	movs	r2, #1
 8007f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f7a:	48a3      	ldr	r0, [pc, #652]	; (8008208 <main+0xd30>)
 8007f7c:	f7f9 ff88 	bl	8001e90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8007f80:	2201      	movs	r2, #1
 8007f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f86:	48a0      	ldr	r0, [pc, #640]	; (8008208 <main+0xd30>)
 8007f88:	f7f9 ff82 	bl	8001e90 <HAL_GPIO_WritePin>
			everyThird++;
 8007f8c:	4b9f      	ldr	r3, [pc, #636]	; (800820c <main+0xd34>)
			errorW = lAngle - turn;
 8007f8e:	48a0      	ldr	r0, [pc, #640]	; (8008210 <main+0xd38>)
			everyThird++;
 8007f90:	681a      	ldr	r2, [r3, #0]
			errorW = lAngle - turn;
 8007f92:	49a0      	ldr	r1, [pc, #640]	; (8008214 <main+0xd3c>)
 8007f94:	6803      	ldr	r3, [r0, #0]
 8007f96:	6809      	ldr	r1, [r1, #0]
 8007f98:	9102      	str	r1, [sp, #8]
			everyThird++;
 8007f9a:	1c50      	adds	r0, r2, #1
			if(everyThird % 3 == 0)
 8007f9c:	4a9e      	ldr	r2, [pc, #632]	; (8008218 <main+0xd40>)
			everySecond++;
 8007f9e:	499f      	ldr	r1, [pc, #636]	; (800821c <main+0xd44>)
			if(everyThird % 3 == 0)
 8007fa0:	fb82 c200 	smull	ip, r2, r2, r0
 8007fa4:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8007fa8:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
			errorW = lAngle - turn;
 8007fac:	9a02      	ldr	r2, [sp, #8]
			everySecond++;
 8007fae:	6809      	ldr	r1, [r1, #0]
			errorW = lAngle - turn;
 8007fb0:	1ad3      	subs	r3, r2, r3
			everyThird++;
 8007fb2:	4a96      	ldr	r2, [pc, #600]	; (800820c <main+0xd34>)
 8007fb4:	6010      	str	r0, [r2, #0]
			errorW = lAngle - turn;
 8007fb6:	4a9a      	ldr	r2, [pc, #616]	; (8008220 <main+0xd48>)
 8007fb8:	6013      	str	r3, [r2, #0]
			everySecond++;
 8007fba:	4a98      	ldr	r2, [pc, #608]	; (800821c <main+0xd44>)
 8007fbc:	3101      	adds	r1, #1
			if(everyThird % 3 == 0)
 8007fbe:	4560      	cmp	r0, ip
			everySecond++;
 8007fc0:	6011      	str	r1, [r2, #0]
			if(everyThird % 3 == 0)
 8007fc2:	f000 808b 	beq.w	80080dc <main+0xc04>
 8007fc6:	4a97      	ldr	r2, [pc, #604]	; (8008224 <main+0xd4c>)
 8007fc8:	f8d2 c000 	ldr.w	ip, [r2]
 8007fcc:	4a96      	ldr	r2, [pc, #600]	; (8008228 <main+0xd50>)
			if(everySecond % 2 == 0)
 8007fce:	07c9      	lsls	r1, r1, #31
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	d56c      	bpl.n	80080ae <main+0xbd6>
 8007fd4:	4995      	ldr	r1, [pc, #596]	; (800822c <main+0xd54>)
			if (errors_sumW > 1000)
 8007fd6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007fda:	6809      	ldr	r1, [r1, #0]
 8007fdc:	dd78      	ble.n	80080d0 <main+0xbf8>
				errors_sumW = 1000;
 8007fde:	4892      	ldr	r0, [pc, #584]	; (8008228 <main+0xd50>)
 8007fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fe4:	6002      	str	r2, [r0, #0]
			control_valueW = dev_settings.wkp * errorW
 8007fe6:	e9d6 020c 	ldrd	r0, r2, [r6, #48]	; 0x30
					+ dev_settings.wkd * dt +  integralW;
 8007fea:	fb02 f20c 	mul.w	r2, r2, ip
 8007fee:	fb00 2303 	mla	r3, r0, r3, r2
			if (control_valueW > (signed int) dev_settings.turn_clamp)
 8007ff2:	6a32      	ldr	r2, [r6, #32]
					+ dev_settings.wkd * dt +  integralW;
 8007ff4:	440b      	add	r3, r1
			control_valueW = dev_settings.wkp * errorW
 8007ff6:	498e      	ldr	r1, [pc, #568]	; (8008230 <main+0xd58>)
			if (control_valueW > (signed int) dev_settings.turn_clamp)
 8007ff8:	4293      	cmp	r3, r2
			control_valueW = dev_settings.wkp * errorW
 8007ffa:	600b      	str	r3, [r1, #0]
				control_valueW = dev_settings.turn_clamp;
 8007ffc:	bfc4      	itt	gt
 8007ffe:	4613      	movgt	r3, r2
 8008000:	600a      	strgt	r2, [r1, #0]
			if (control_valueW < (signed int) (-dev_settings.turn_clamp))
 8008002:	4252      	negs	r2, r2
 8008004:	429a      	cmp	r2, r3
				control_valueW = (signed int) (-dev_settings.turn_clamp);
 8008006:	bfc4      	itt	gt
 8008008:	4b89      	ldrgt	r3, [pc, #548]	; (8008230 <main+0xd58>)
 800800a:	601a      	strgt	r2, [r3, #0]
		switch (state) {
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b01      	cmp	r3, #1
 8008012:	f47f aebb 	bne.w	8007d8c <main+0x8b4>
			endMapFlag = 0;
 8008016:	4b87      	ldr	r3, [pc, #540]	; (8008234 <main+0xd5c>)
 8008018:	f04f 0800 	mov.w	r8, #0
 800801c:	f8c3 8000 	str.w	r8, [r3]
		WallFollowing();
 8008020:	f000 fc86 	bl	8008930 <WallFollowing>
			if(endMapFlag)
 8008024:	4b83      	ldr	r3, [pc, #524]	; (8008234 <main+0xd5c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d160      	bne.n	80080ee <main+0xc16>
			if (ir_data_ready) {
 800802c:	4a82      	ldr	r2, [pc, #520]	; (8008238 <main+0xd60>)
 800802e:	7813      	ldrb	r3, [r2, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f43f ae6b 	beq.w	8007d0c <main+0x834>
				ir_data_ready = 0;
 8008036:	f04f 0800 	mov.w	r8, #0
				if (ir_data.command == KEY_CH) {
 800803a:	4b80      	ldr	r3, [pc, #512]	; (800823c <main+0xd64>)
				ir_data_ready = 0;
 800803c:	f882 8000 	strb.w	r8, [r2]
				if (ir_data.command == KEY_CH) {
 8008040:	789b      	ldrb	r3, [r3, #2]
 8008042:	2b46      	cmp	r3, #70	; 0x46
 8008044:	f47f ae62 	bne.w	8007d0c <main+0x834>
					MotorsStop();
 8008048:	f7fc ff3e 	bl	8004ec8 <MotorsStop>
					LcdErase();
 800804c:	f7fc fa74 	bl	8004538 <LcdErase>
					LcdTextXY(0, 2, BIG_FNT, CENTERED, "STOPPED");
 8008050:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <main+0xd68>)
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	2203      	movs	r2, #3
 8008056:	2304      	movs	r3, #4
 8008058:	2102      	movs	r1, #2
 800805a:	4640      	mov	r0, r8
 800805c:	f7fc fa90 	bl	8004580 <LcdTextXY>
					LcdUpdate();
 8008060:	f7fc fee2 	bl	8004e28 <LcdUpdate>
					state = POWERON;
 8008064:	f88a 8000 	strb.w	r8, [sl]
 8008068:	e650      	b.n	8007d0c <main+0x834>
			state = POWERON;
 800806a:	2300      	movs	r3, #0
 800806c:	f88a 3000 	strb.w	r3, [sl]
			break;
 8008070:	e64c      	b.n	8007d0c <main+0x834>
			if (++tmp_char >= 100) {
 8008072:	9b04      	ldr	r3, [sp, #16]
 8008074:	3301      	adds	r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b63      	cmp	r3, #99	; 0x63
 800807a:	9304      	str	r3, [sp, #16]
 800807c:	d848      	bhi.n	8008110 <main+0xc38>
			if (ir_data_ready) {
 800807e:	4a6e      	ldr	r2, [pc, #440]	; (8008238 <main+0xd60>)
 8008080:	7813      	ldrb	r3, [r2, #0]
 8008082:	b143      	cbz	r3, 8008096 <main+0xbbe>
				ir_data_ready = 0;
 8008084:	f04f 0800 	mov.w	r8, #0
				if (ir_data.command == KEY_NEXT) {
 8008088:	4b6c      	ldr	r3, [pc, #432]	; (800823c <main+0xd64>)
				ir_data_ready = 0;
 800808a:	f882 8000 	strb.w	r8, [r2]
				if (ir_data.command == KEY_NEXT) {
 800808e:	789b      	ldrb	r3, [r3, #2]
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	f000 809a 	beq.w	80081ca <main+0xcf2>
			if (gucKeyboardKey == KEY_TL) {
 8008096:	f899 3000 	ldrb.w	r3, [r9]
 800809a:	2b03      	cmp	r3, #3
 800809c:	f47f ae36 	bne.w	8007d0c <main+0x834>
				state = SETTINGS;
 80080a0:	2305      	movs	r3, #5
				MENU_init(rootMenu);
 80080a2:	4868      	ldr	r0, [pc, #416]	; (8008244 <main+0xd6c>)
				state = SETTINGS;
 80080a4:	f88a 3000 	strb.w	r3, [sl]
				MENU_init(rootMenu);
 80080a8:	f7fe fba8 	bl	80067fc <MENU_init>
				break;
 80080ac:	e62e      	b.n	8007d0c <main+0x834>
				integralW = errors_sumW * dev_settings.wki;
 80080ae:	6bb1      	ldr	r1, [r6, #56]	; 0x38
				integralW = integralW / 1000;
 80080b0:	4865      	ldr	r0, [pc, #404]	; (8008248 <main+0xd70>)
				errors_sumW += errorW;
 80080b2:	441a      	add	r2, r3
				integralW = errors_sumW * dev_settings.wki;
 80080b4:	fb01 f102 	mul.w	r1, r1, r2
				integralW = integralW / 1000;
 80080b8:	fb80 e001 	smull	lr, r0, r0, r1
 80080bc:	17c9      	asrs	r1, r1, #31
 80080be:	ebc1 11a0 	rsb	r1, r1, r0, asr #6
				errors_sumW += errorW;
 80080c2:	4859      	ldr	r0, [pc, #356]	; (8008228 <main+0xd50>)
 80080c4:	6002      	str	r2, [r0, #0]
				integralW = integralW / 1000;
 80080c6:	4859      	ldr	r0, [pc, #356]	; (800822c <main+0xd54>)
			if (errors_sumW > 1000)
 80080c8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
				integralW = integralW / 1000;
 80080cc:	6001      	str	r1, [r0, #0]
			if (errors_sumW > 1000)
 80080ce:	dc86      	bgt.n	8007fde <main+0xb06>
			if (errors_sumW < -1000)
 80080d0:	485e      	ldr	r0, [pc, #376]	; (800824c <main+0xd74>)
 80080d2:	4282      	cmp	r2, r0
				errors_sumW = -1000;
 80080d4:	bfbc      	itt	lt
 80080d6:	4a54      	ldrlt	r2, [pc, #336]	; (8008228 <main+0xd50>)
 80080d8:	6010      	strlt	r0, [r2, #0]
 80080da:	e784      	b.n	8007fe6 <main+0xb0e>
				dt =  (errorW - lastErrorW);
 80080dc:	485c      	ldr	r0, [pc, #368]	; (8008250 <main+0xd78>)
 80080de:	6802      	ldr	r2, [r0, #0]
				lastErrorW = errorW;
 80080e0:	6003      	str	r3, [r0, #0]
				dt =  (errorW - lastErrorW);
 80080e2:	eba3 0c02 	sub.w	ip, r3, r2
 80080e6:	4a4f      	ldr	r2, [pc, #316]	; (8008224 <main+0xd4c>)
 80080e8:	f8c2 c000 	str.w	ip, [r2]
 80080ec:	e76e      	b.n	8007fcc <main+0xaf4>
				MotorsStop();
 80080ee:	f7fc feeb 	bl	8004ec8 <MotorsStop>
				LcdErase();
 80080f2:	f7fc fa21 	bl	8004538 <LcdErase>
				LcdTextXY(0, 2, BIG_FNT, CENTERED, "STOPPED");
 80080f6:	4b52      	ldr	r3, [pc, #328]	; (8008240 <main+0xd68>)
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	2203      	movs	r2, #3
 80080fc:	2304      	movs	r3, #4
 80080fe:	2102      	movs	r1, #2
 8008100:	4640      	mov	r0, r8
 8008102:	f7fc fa3d 	bl	8004580 <LcdTextXY>
				LcdUpdate();
 8008106:	f7fc fe8f 	bl	8004e28 <LcdUpdate>
				state = POWERON;
 800810a:	f88a 8000 	strb.w	r8, [sl]
 800810e:	e78d      	b.n	800802c <main+0xb54>
				sprintf(tmp_str, " %4d  %4d", frontL_distance, frontR_distance);
 8008110:	4b50      	ldr	r3, [pc, #320]	; (8008254 <main+0xd7c>)
 8008112:	4a51      	ldr	r2, [pc, #324]	; (8008258 <main+0xd80>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	4950      	ldr	r1, [pc, #320]	; (800825c <main+0xd84>)
 800811a:	a81c      	add	r0, sp, #112	; 0x70
 800811c:	f000 fe02 	bl	8008d24 <siprintf>
				LcdTextXY(0, 0, BIG_FNT, NORM_LINE, tmp_str);
 8008120:	2100      	movs	r1, #0
 8008122:	ab1c      	add	r3, sp, #112	; 0x70
 8008124:	4608      	mov	r0, r1
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2203      	movs	r2, #3
 800812a:	2301      	movs	r3, #1
 800812c:	f7fc fa28 	bl	8004580 <LcdTextXY>
				sprintf(tmp_str, " %4d  %4d", left_distance, right_distance);
 8008130:	4b4b      	ldr	r3, [pc, #300]	; (8008260 <main+0xd88>)
 8008132:	4a4c      	ldr	r2, [pc, #304]	; (8008264 <main+0xd8c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	4948      	ldr	r1, [pc, #288]	; (800825c <main+0xd84>)
 800813a:	a81c      	add	r0, sp, #112	; 0x70
 800813c:	f000 fdf2 	bl	8008d24 <siprintf>
				LcdTextXY(0, 2, BIG_FNT, NORM_LINE, tmp_str);
 8008140:	ab1c      	add	r3, sp, #112	; 0x70
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2203      	movs	r2, #3
 8008146:	2301      	movs	r3, #1
 8008148:	2102      	movs	r1, #2
 800814a:	2000      	movs	r0, #0
 800814c:	f7fc fa18 	bl	8004580 <LcdTextXY>
				sprintf(tmp_str, " %4d  %4d", left_side, right_side);
 8008150:	4a45      	ldr	r2, [pc, #276]	; (8008268 <main+0xd90>)
 8008152:	f8db 3000 	ldr.w	r3, [fp]
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	4940      	ldr	r1, [pc, #256]	; (800825c <main+0xd84>)
 800815a:	a81c      	add	r0, sp, #112	; 0x70
 800815c:	f000 fde2 	bl	8008d24 <siprintf>
				LcdTextXY(0, 4, BIG_FNT, NORM_LINE, tmp_str);
 8008160:	ab1c      	add	r3, sp, #112	; 0x70
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2203      	movs	r2, #3
 8008166:	2301      	movs	r3, #1
 8008168:	2104      	movs	r1, #4
 800816a:	2000      	movs	r0, #0
 800816c:	f7fc fa08 	bl	8004580 <LcdTextXY>
			    sprintf(tmp_str, " %3ld   %3ld", enc_leftCounter, enc_rightCounter);
 8008170:	4b3e      	ldr	r3, [pc, #248]	; (800826c <main+0xd94>)
 8008172:	493f      	ldr	r1, [pc, #252]	; (8008270 <main+0xd98>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b3f      	ldr	r3, [pc, #252]	; (8008274 <main+0xd9c>)
 8008178:	a81c      	add	r0, sp, #112	; 0x70
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f000 fdd2 	bl	8008d24 <siprintf>
				LcdTextXY(0, 6, BIG_FNT, NORM_LINE, tmp_str);
 8008180:	ab1c      	add	r3, sp, #112	; 0x70
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	2203      	movs	r2, #3
 8008186:	2301      	movs	r3, #1
 8008188:	2106      	movs	r1, #6
 800818a:	2000      	movs	r0, #0
 800818c:	f7fc f9f8 	bl	8004580 <LcdTextXY>
				float_format(fAngle);
 8008190:	4b39      	ldr	r3, [pc, #228]	; (8008278 <main+0xda0>)
	i32IPart = (int32_t) inpData;
 8008192:	493a      	ldr	r1, [pc, #232]	; (800827c <main+0xda4>)
				float_format(fAngle);
 8008194:	edd3 7a00 	vldr	s15, [r3]
	i32FPart = i32FPart - (i32IPart * 1000);
 8008198:	4a2c      	ldr	r2, [pc, #176]	; (800824c <main+0xd74>)
	i32FPart = (int32_t) (inpData * 1000.0f);
 800819a:	ee27 7a88 	vmul.f32	s14, s15, s16
	i32IPart = (int32_t) inpData;
 800819e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	i32FPart = (int32_t) (inpData * 1000.0f);
 80081a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	i32IPart = (int32_t) inpData;
 80081a6:	ee17 3a90 	vmov	r3, s15
 80081aa:	edc1 7a00 	vstr	s15, [r1]
	i32FPart = i32FPart - (i32IPart * 1000);
 80081ae:	ee17 1a10 	vmov	r1, s14
 80081b2:	fb02 1303 	mla	r3, r2, r3, r1
	if (i32FPart < 0) {
 80081b6:	2b00      	cmp	r3, #0
		i32FPart *= -1;
 80081b8:	4a31      	ldr	r2, [pc, #196]	; (8008280 <main+0xda8>)
 80081ba:	bfb8      	it	lt
 80081bc:	425b      	neglt	r3, r3
 80081be:	6013      	str	r3, [r2, #0]
				LcdUpdate();
 80081c0:	f7fc fe32 	bl	8004e28 <LcdUpdate>
				tmp_char = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	e759      	b.n	800807e <main+0xba6>
					MotorsStart();
 80081ca:	f7fc fe6f 	bl	8004eac <MotorsStart>
					speedX = dev_settings.starting_speed;
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <main+0xdac>)
 80081d0:	6973      	ldr	r3, [r6, #20]
 80081d2:	6013      	str	r3, [r2, #0]
					LcdErase();
 80081d4:	f7fc f9b0 	bl	8004538 <LcdErase>
					LcdTextXY(0, 2, BIG_FNT, CENTERED, "STARTED");
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <main+0xdb0>)
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2203      	movs	r2, #3
 80081de:	2304      	movs	r3, #4
 80081e0:	2102      	movs	r1, #2
 80081e2:	4640      	mov	r0, r8
 80081e4:	f7fc f9cc 	bl	8004580 <LcdTextXY>
					LcdUpdate();
 80081e8:	f7fc fe1e 	bl	8004e28 <LcdUpdate>
					enc_leftCounter = 0;
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <main+0xd94>)
 80081ee:	f8c2 8000 	str.w	r8, [r2]
					maze_state = FORWARD;
 80081f2:	4a26      	ldr	r2, [pc, #152]	; (800828c <main+0xdb4>)
 80081f4:	f882 8000 	strb.w	r8, [r2]
					enc_rightCounter = 0;
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <main+0xd9c>)
					state = STARTED;
 80081fa:	2301      	movs	r3, #1
					enc_rightCounter = 0;
 80081fc:	f8c2 8000 	str.w	r8, [r2]
					state = STARTED;
 8008200:	f88a 3000 	strb.w	r3, [sl]
 8008204:	e747      	b.n	8008096 <main+0xbbe>
 8008206:	bf00      	nop
 8008208:	48000400 	.word	0x48000400
 800820c:	20000030 	.word	0x20000030
 8008210:	20000808 	.word	0x20000808
 8008214:	200006d0 	.word	0x200006d0
 8008218:	55555556 	.word	0x55555556
 800821c:	2000002c 	.word	0x2000002c
 8008220:	20000aa0 	.word	0x20000aa0
 8008224:	2000016c 	.word	0x2000016c
 8008228:	20000810 	.word	0x20000810
 800822c:	20000178 	.word	0x20000178
 8008230:	20000894 	.word	0x20000894
 8008234:	20000170 	.word	0x20000170
 8008238:	200001cd 	.word	0x200001cd
 800823c:	200001c0 	.word	0x200001c0
 8008240:	0800ba10 	.word	0x0800ba10
 8008244:	0800b5f4 	.word	0x0800b5f4
 8008248:	10624dd3 	.word	0x10624dd3
 800824c:	fffffc18 	.word	0xfffffc18
 8008250:	20000b08 	.word	0x20000b08
 8008254:	20000890 	.word	0x20000890
 8008258:	20000a94 	.word	0x20000a94
 800825c:	0800b9ec 	.word	0x0800b9ec
 8008260:	20000b18 	.word	0x20000b18
 8008264:	20000a98 	.word	0x20000a98
 8008268:	2000089c 	.word	0x2000089c
 800826c:	200001bc 	.word	0x200001bc
 8008270:	0800b9f8 	.word	0x0800b9f8
 8008274:	200001b4 	.word	0x200001b4
 8008278:	200005fc 	.word	0x200005fc
 800827c:	20000898 	.word	0x20000898
 8008280:	200006f8 	.word	0x200006f8
 8008284:	20000800 	.word	0x20000800
 8008288:	0800ba08 	.word	0x0800ba08
 800828c:	2000080d 	.word	0x2000080d

08008290 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop

08008294 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008294:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <HAL_MspInit+0x2c>)
 8008296:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	661a      	str	r2, [r3, #96]	; 0x60
 800829e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80082a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082a2:	f002 0201 	and.w	r2, r2, #1
 80082a6:	9200      	str	r2, [sp, #0]
 80082a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80082b0:	659a      	str	r2, [r3, #88]	; 0x58
 80082b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082bc:	b002      	add	sp, #8
 80082be:	4770      	bx	lr
 80082c0:	40021000 	.word	0x40021000

080082c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80082c6:	6802      	ldr	r2, [r0, #0]
 80082c8:	494e      	ldr	r1, [pc, #312]	; (8008404 <HAL_ADC_MspInit+0x140>)
{
 80082ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082cc:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80082ce:	428a      	cmp	r2, r1
{
 80082d0:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80082d6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082da:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80082dc:	d036      	beq.n	800834c <HAL_ADC_MspInit+0x88>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80082de:	4b4a      	ldr	r3, [pc, #296]	; (8008408 <HAL_ADC_MspInit+0x144>)
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d001      	beq.n	80082e8 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80082e4:	b00b      	add	sp, #44	; 0x2c
 80082e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 80082e8:	4a48      	ldr	r2, [pc, #288]	; (800840c <HAL_ADC_MspInit+0x148>)
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80082ee:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 80082f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80082f2:	d07b      	beq.n	80083ec <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082f4:	4b46      	ldr	r3, [pc, #280]	; (8008410 <HAL_ADC_MspInit+0x14c>)
    hdma_adc2.Instance = DMA1_Channel2;
 80082f6:	4c47      	ldr	r4, [pc, #284]	; (8008414 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082fa:	4847      	ldr	r0, [pc, #284]	; (8008418 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082fc:	f042 0204 	orr.w	r2, r2, #4
 8008300:	64da      	str	r2, [r3, #76]	; 0x4c
 8008302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800830a:	2207      	movs	r2, #7
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800830c:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800830e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008310:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008314:	9e04      	ldr	r6, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008316:	f7f9 fced 	bl	8001cf4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800831a:	4b40      	ldr	r3, [pc, #256]	; (800841c <HAL_ADC_MspInit+0x158>)
 800831c:	6023      	str	r3, [r4, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800831e:	2380      	movs	r3, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008320:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008324:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008328:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800832a:	4620      	mov	r0, r4
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800832c:	2300      	movs	r3, #0
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800832e:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008332:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008336:	60e3      	str	r3, [r4, #12]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008338:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800833c:	f7f9 fa48 	bl	80017d0 <HAL_DMA_Init>
 8008340:	2800      	cmp	r0, #0
 8008342:	d143      	bne.n	80083cc <HAL_ADC_MspInit+0x108>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8008344:	64ec      	str	r4, [r5, #76]	; 0x4c
 8008346:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8008348:	b00b      	add	sp, #44	; 0x2c
 800834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RCC_ADC_CLK_ENABLED++;
 800834c:	4a2f      	ldr	r2, [pc, #188]	; (800840c <HAL_ADC_MspInit+0x148>)
 800834e:	6813      	ldr	r3, [r2, #0]
 8008350:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8008352:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8008354:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8008356:	d03e      	beq.n	80083d6 <HAL_ADC_MspInit+0x112>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008358:	4b2d      	ldr	r3, [pc, #180]	; (8008410 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800835a:	482f      	ldr	r0, [pc, #188]	; (8008418 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800835c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 800835e:	4c30      	ldr	r4, [pc, #192]	; (8008420 <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008360:	f042 0204 	orr.w	r2, r2, #4
 8008364:	64da      	str	r2, [r3, #76]	; 0x4c
 8008366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008368:	f002 0204 	and.w	r2, r2, #4
 800836c:	9201      	str	r2, [sp, #4]
 800836e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	64da      	str	r2, [r3, #76]	; 0x4c
 8008378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008380:	270b      	movs	r7, #11
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008382:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008384:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008386:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008388:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800838a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800838c:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800838e:	f7f9 fcb1 	bl	8001cf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008392:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008394:	a905      	add	r1, sp, #20
 8008396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800839a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800839c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083a0:	f7f9 fca8 	bl	8001cf4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80083a4:	481f      	ldr	r0, [pc, #124]	; (8008424 <HAL_ADC_MspInit+0x160>)
 80083a6:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80083a8:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80083aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80083ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80083b2:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80083b4:	6066      	str	r6, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80083b6:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80083ba:	e9c4 6607 	strd	r6, r6, [r4, #28]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80083be:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80083c2:	61a3      	str	r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80083c4:	f7f9 fa04 	bl	80017d0 <HAL_DMA_Init>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0bb      	beq.n	8008344 <HAL_ADC_MspInit+0x80>
      Error_Handler();
 80083cc:	f7ff ff60 	bl	8008290 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80083d0:	64ec      	str	r4, [r5, #76]	; 0x4c
 80083d2:	62a5      	str	r5, [r4, #40]	; 0x28
 80083d4:	e7b8      	b.n	8008348 <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC_CLK_ENABLE();
 80083d6:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <HAL_ADC_MspInit+0x14c>)
 80083d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083de:	64da      	str	r2, [r3, #76]	; 0x4c
 80083e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	9b00      	ldr	r3, [sp, #0]
 80083ea:	e7b5      	b.n	8008358 <HAL_ADC_MspInit+0x94>
      __HAL_RCC_ADC_CLK_ENABLE();
 80083ec:	4b08      	ldr	r3, [pc, #32]	; (8008410 <HAL_ADC_MspInit+0x14c>)
 80083ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80083f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	e778      	b.n	80082f4 <HAL_ADC_MspInit+0x30>
 8008402:	bf00      	nop
 8008404:	50040000 	.word	0x50040000
 8008408:	50040100 	.word	0x50040100
 800840c:	20000188 	.word	0x20000188
 8008410:	40021000 	.word	0x40021000
 8008414:	20000a48 	.word	0x20000a48
 8008418:	48000800 	.word	0x48000800
 800841c:	4002001c 	.word	0x4002001c
 8008420:	200008b8 	.word	0x200008b8
 8008424:	40020008 	.word	0x40020008

08008428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008428:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800842a:	6802      	ldr	r2, [r0, #0]
 800842c:	4b20      	ldr	r3, [pc, #128]	; (80084b0 <HAL_I2C_MspInit+0x88>)
{
 800842e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008430:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8008432:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008434:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008438:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800843c:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 800843e:	d001      	beq.n	8008444 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008440:	b008      	add	sp, #32
 8008442:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008444:	4d1b      	ldr	r5, [pc, #108]	; (80084b4 <HAL_I2C_MspInit+0x8c>)
 8008446:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800844e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008456:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800845a:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800845c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800845e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008460:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008462:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008464:	2603      	movs	r6, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008466:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800846c:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800846e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008470:	e9cd 6306 	strd	r6, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008474:	f7f9 fc3e 	bl	8001cf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008478:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800847a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800847e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008480:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
 8008486:	4631      	mov	r1, r6
 8008488:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 800848a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
 800848c:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800848e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
 8008490:	f7f9 f92e 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8008494:	201f      	movs	r0, #31
 8008496:	f7f9 f961 	bl	800175c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 3, 0);
 800849a:	4622      	mov	r2, r4
 800849c:	4631      	mov	r1, r6
 800849e:	2020      	movs	r0, #32
 80084a0:	f7f9 f926 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80084a4:	2020      	movs	r0, #32
 80084a6:	f7f9 f959 	bl	800175c <HAL_NVIC_EnableIRQ>
}
 80084aa:	b008      	add	sp, #32
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
 80084ae:	bf00      	nop
 80084b0:	40005400 	.word	0x40005400
 80084b4:	40021000 	.word	0x40021000

080084b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80084b8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80084ba:	6801      	ldr	r1, [r0, #0]
 80084bc:	4a18      	ldr	r2, [pc, #96]	; (8008520 <HAL_SPI_MspInit+0x68>)
{
 80084be:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c0:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 80084c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80084c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80084cc:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80084ce:	d001      	beq.n	80084d4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80084d0:	b008      	add	sp, #32
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80084d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084dc:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 80084de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084e4:	661a      	str	r2, [r3, #96]	; 0x60
 80084e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80084ec:	9201      	str	r2, [sp, #4]
 80084ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80084f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008500:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008502:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008504:	25e0      	movs	r5, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008506:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800850c:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800850e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008512:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008516:	f7f9 fbed 	bl	8001cf4 <HAL_GPIO_Init>
}
 800851a:	b008      	add	sp, #32
 800851c:	bd70      	pop	{r4, r5, r6, pc}
 800851e:	bf00      	nop
 8008520:	40013000 	.word	0x40013000

08008524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008524:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8008526:	6803      	ldr	r3, [r0, #0]
 8008528:	4a38      	ldr	r2, [pc, #224]	; (800860c <HAL_TIM_Base_MspInit+0xe8>)
 800852a:	4293      	cmp	r3, r2
{
 800852c:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM1)
 800852e:	d031      	beq.n	8008594 <HAL_TIM_Base_MspInit+0x70>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8008530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008534:	d00b      	beq.n	800854e <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8008536:	4a36      	ldr	r2, [pc, #216]	; (8008610 <HAL_TIM_Base_MspInit+0xec>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d048      	beq.n	80085ce <HAL_TIM_Base_MspInit+0xaa>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 800853c:	4a35      	ldr	r2, [pc, #212]	; (8008614 <HAL_TIM_Base_MspInit+0xf0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <HAL_TIM_Base_MspInit+0x46>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8008542:	4a35      	ldr	r2, [pc, #212]	; (8008618 <HAL_TIM_Base_MspInit+0xf4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d053      	beq.n	80085f0 <HAL_TIM_Base_MspInit+0xcc>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8008548:	b007      	add	sp, #28
 800854a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800854e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008552:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008554:	f042 0201 	orr.w	r2, r2, #1
 8008558:	659a      	str	r2, [r3, #88]	; 0x58
 800855a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	9b02      	ldr	r3, [sp, #8]
}
 8008564:	b007      	add	sp, #28
 8008566:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM15_CLK_ENABLE();
 800856a:	4b2c      	ldr	r3, [pc, #176]	; (800861c <HAL_TIM_Base_MspInit+0xf8>)
 800856c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800856e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008572:	661a      	str	r2, [r3, #96]	; 0x60
 8008574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008576:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800857c:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800857e:	2018      	movs	r0, #24
 8008580:	4611      	mov	r1, r2
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008582:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008584:	f7f9 f8b4 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008588:	2018      	movs	r0, #24
}
 800858a:	b007      	add	sp, #28
 800858c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008590:	f7f9 b8e4 	b.w	800175c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008594:	4b21      	ldr	r3, [pc, #132]	; (800861c <HAL_TIM_Base_MspInit+0xf8>)
 8008596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859c:	661a      	str	r2, [r3, #96]	; 0x60
 800859e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80085a0:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80085a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80085a6:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80085a8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80085aa:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 80085ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80085ae:	f7f9 f89f 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80085b2:	2018      	movs	r0, #24
 80085b4:	f7f9 f8d2 	bl	800175c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80085b8:	2200      	movs	r2, #0
 80085ba:	4611      	mov	r1, r2
 80085bc:	2019      	movs	r0, #25
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80085be:	f7f9 f897 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80085c2:	2019      	movs	r0, #25
}
 80085c4:	b007      	add	sp, #28
 80085c6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80085ca:	f7f9 b8c7 	b.w	800175c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <HAL_TIM_Base_MspInit+0xf8>)
 80085d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085d2:	f042 0210 	orr.w	r2, r2, #16
 80085d6:	659a      	str	r2, [r3, #88]	; 0x58
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80085da:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80085e2:	2036      	movs	r0, #54	; 0x36
 80085e4:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80085e6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80085e8:	f7f9 f882 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80085ec:	2036      	movs	r0, #54	; 0x36
 80085ee:	e7cc      	b.n	800858a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80085f0:	4b0a      	ldr	r3, [pc, #40]	; (800861c <HAL_TIM_Base_MspInit+0xf8>)
 80085f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80085f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085f8:	661a      	str	r2, [r3, #96]	; 0x60
 80085fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8008600:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008602:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8008604:	4611      	mov	r1, r2
 8008606:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	e7d8      	b.n	80085be <HAL_TIM_Base_MspInit+0x9a>
 800860c:	40012c00 	.word	0x40012c00
 8008610:	40001000 	.word	0x40001000
 8008614:	40014000 	.word	0x40014000
 8008618:	40014400 	.word	0x40014400
 800861c:	40021000 	.word	0x40021000

08008620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008620:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8008622:	6803      	ldr	r3, [r0, #0]
 8008624:	4a29      	ldr	r2, [pc, #164]	; (80086cc <HAL_TIM_MspPostInit+0xac>)
{
 8008626:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008628:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 800862a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800862c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008630:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8008634:	9407      	str	r4, [sp, #28]
  if(htim->Instance==TIM1)
 8008636:	d030      	beq.n	800869a <HAL_TIM_MspPostInit+0x7a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d001      	beq.n	8008642 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800863e:	b008      	add	sp, #32
 8008640:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008642:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008646:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008652:	f002 0201 	and.w	r2, r2, #1
 8008656:	9201      	str	r2, [sp, #4]
 8008658:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800865a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800865c:	f042 0202 	orr.w	r2, r2, #2
 8008660:	64da      	str	r2, [r3, #76]	; 0x4c
 8008662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800866a:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800866c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008670:	a903      	add	r1, sp, #12
 8008672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008676:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008678:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867a:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800867e:	f7f9 fb39 	bl	8001cf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008682:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008684:	a903      	add	r1, sp, #12
 8008686:	4812      	ldr	r0, [pc, #72]	; (80086d0 <HAL_TIM_MspPostInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008688:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800868a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800868c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008690:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008692:	f7f9 fb2f 	bl	8001cf4 <HAL_GPIO_Init>
}
 8008696:	b008      	add	sp, #32
 8008698:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <HAL_TIM_MspPostInit+0xb4>)
 800869c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800869e:	f042 0201 	orr.w	r2, r2, #1
 80086a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ac:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80086ae:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80086b2:	f44f 7480 	mov.w	r4, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ba:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80086bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086be:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c2:	f7f9 fb17 	bl	8001cf4 <HAL_GPIO_Init>
}
 80086c6:	b008      	add	sp, #32
 80086c8:	bd70      	pop	{r4, r5, r6, pc}
 80086ca:	bf00      	nop
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	48000400 	.word	0x48000400
 80086d4:	40021000 	.word	0x40021000

080086d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop

080086dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086dc:	e7fe      	b.n	80086dc <HardFault_Handler>
 80086de:	bf00      	nop

080086e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086e0:	e7fe      	b.n	80086e0 <MemManage_Handler>
 80086e2:	bf00      	nop

080086e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086e4:	e7fe      	b.n	80086e4 <BusFault_Handler>
 80086e6:	bf00      	nop

080086e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086e8:	e7fe      	b.n	80086e8 <UsageFault_Handler>
 80086ea:	bf00      	nop

080086ec <SVC_Handler>:
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop

080086f0 <DebugMon_Handler>:
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop

080086f4 <PendSV_Handler>:
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop

080086f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086f8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086fa:	f7f8 fac9 	bl	8000c90 <HAL_IncTick>
	unsigned char key_pos;
	uint32_t kbd_port;

	//------------------ 0.1 ms  tasks -----------------
	// countdown timer
	if (gulTickCountDown)
 80086fe:	4b2c      	ldr	r3, [pc, #176]	; (80087b0 <SysTick_Handler+0xb8>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	b112      	cbz	r2, 800870a <SysTick_Handler+0x12>
		gulTickCountDown--;
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	3a01      	subs	r2, #1
 8008708:	601a      	str	r2, [r3, #0]

	if (gulSysTimer)
 800870a:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <SysTick_Handler+0xbc>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	b112      	cbz	r2, 8008716 <SysTick_Handler+0x1e>
		gulSysTimer--;
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	3a01      	subs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]

	gulTimeTick++;
 8008716:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <SysTick_Handler+0xc0>)
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	6013      	str	r3, [r2, #0]


#ifdef IR_NEC_PROTOCOL
	IR_TimerHandler();
 800871e:	f7fc fad9 	bl	8004cd4 <IR_TimerHandler>
#endif

	//------------------ 10 ms  tasks -----------------
	if (++usDelta == 100) {	// update g_ulSysTickCount 100 times per second
 8008722:	4a26      	ldr	r2, [pc, #152]	; (80087bc <SysTick_Handler+0xc4>)
 8008724:	8813      	ldrh	r3, [r2, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	b29b      	uxth	r3, r3
 800872a:	2b64      	cmp	r3, #100	; 0x64
 800872c:	d001      	beq.n	8008732 <SysTick_Handler+0x3a>
				gucKeyboardKey = 0xFF;
			}
		}

		if (gucKeyboardTimer)
			gucKeyboardTimer--;
 800872e:	8013      	strh	r3, [r2, #0]
		//----------------------------
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8008730:	bd70      	pop	{r4, r5, r6, pc}
		diff = errorX - lastErrorX;
 8008732:	4c23      	ldr	r4, [pc, #140]	; (80087c0 <SysTick_Handler+0xc8>)
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <SysTick_Handler+0xcc>)
		if (gusKeyRepeatTimer) {
 8008736:	4824      	ldr	r0, [pc, #144]	; (80087c8 <SysTick_Handler+0xd0>)
		diff = errorX - lastErrorX;
 8008738:	6826      	ldr	r6, [r4, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
		if (gusKeyRepeatTimer) {
 800873c:	8801      	ldrh	r1, [r0, #0]
		diff = errorX - lastErrorX;
 800873e:	4d23      	ldr	r5, [pc, #140]	; (80087cc <SysTick_Handler+0xd4>)
		lastErrorX = errorX;
 8008740:	6023      	str	r3, [r4, #0]
		if (gusKeyRepeatTimer) {
 8008742:	b289      	uxth	r1, r1
		diff = errorX - lastErrorX;
 8008744:	1b9b      	subs	r3, r3, r6
		usDelta = 0;
 8008746:	2400      	movs	r4, #0
		diff = errorX - lastErrorX;
 8008748:	602b      	str	r3, [r5, #0]
		usDelta = 0;
 800874a:	8014      	strh	r4, [r2, #0]
		if (gusKeyRepeatTimer) {
 800874c:	b139      	cbz	r1, 800875e <SysTick_Handler+0x66>
			if (--gusKeyRepeatTimer == 0)
 800874e:	8803      	ldrh	r3, [r0, #0]
 8008750:	3b01      	subs	r3, #1
 8008752:	b29b      	uxth	r3, r3
 8008754:	8003      	strh	r3, [r0, #0]
 8008756:	b913      	cbnz	r3, 800875e <SysTick_Handler+0x66>
				gucRepeatOff = 1;
 8008758:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <SysTick_Handler+0xd8>)
 800875a:	2201      	movs	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
		if (!gucKeyboardTimer) {
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <SysTick_Handler+0xdc>)
 8008760:	8813      	ldrh	r3, [r2, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	b99b      	cbnz	r3, 800878e <SysTick_Handler+0x96>
			kbd_port = ~(GPIOB->IDR & 0x407);
 8008766:	4b1c      	ldr	r3, [pc, #112]	; (80087d8 <SysTick_Handler+0xe0>)
 8008768:	691b      	ldr	r3, [r3, #16]
			kbd_port &= 0x407;
 800876a:	f240 4007 	movw	r0, #1031	; 0x407
 800876e:	43db      	mvns	r3, r3
			if (kbd_port != 0x00) {
 8008770:	4018      	ands	r0, r3
 8008772:	d014      	beq.n	800879e <SysTick_Handler+0xa6>
					if (kbd_port & scan_mask) {
 8008774:	07db      	lsls	r3, r3, #31
 8008776:	d416      	bmi.n	80087a6 <SysTick_Handler+0xae>
					scan_mask <<= 1;
 8008778:	2302      	movs	r3, #2
					key_pos++;
 800877a:	4619      	mov	r1, r3
					if (kbd_port & scan_mask) {
 800877c:	4218      	tst	r0, r3
					key_pos++;
 800877e:	f101 0401 	add.w	r4, r1, #1
					scan_mask <<= 1;
 8008782:	ea4f 0343 	mov.w	r3, r3, lsl #1
					if (kbd_port & scan_mask) {
 8008786:	d10f      	bne.n	80087a8 <SysTick_Handler+0xb0>
					key_pos++;
 8008788:	b2e1      	uxtb	r1, r4
				while (scan_mask & 0x7FF) {
 800878a:	290c      	cmp	r1, #12
 800878c:	d1f6      	bne.n	800877c <SysTick_Handler+0x84>
		if (gucKeyboardTimer)
 800878e:	8813      	ldrh	r3, [r2, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0cc      	beq.n	8008730 <SysTick_Handler+0x38>
			gucKeyboardTimer--;
 8008796:	8813      	ldrh	r3, [r2, #0]
 8008798:	3b01      	subs	r3, #1
 800879a:	b29b      	uxth	r3, r3
 800879c:	e7c7      	b.n	800872e <SysTick_Handler+0x36>
				gucKeyboardKey = 0xFF;
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <SysTick_Handler+0xe4>)
 80087a0:	21ff      	movs	r1, #255	; 0xff
 80087a2:	7019      	strb	r1, [r3, #0]
 80087a4:	e7f3      	b.n	800878e <SysTick_Handler+0x96>
				key_pos = 1;
 80087a6:	2101      	movs	r1, #1
					gucKeyboardKey = key_pos;
 80087a8:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <SysTick_Handler+0xe4>)
 80087aa:	7019      	strb	r1, [r3, #0]
 80087ac:	e7ef      	b.n	800878e <SysTick_Handler+0x96>
 80087ae:	bf00      	nop
 80087b0:	2000088c 	.word	0x2000088c
 80087b4:	200006f0 	.word	0x200006f0
 80087b8:	20000820 	.word	0x20000820
 80087bc:	2000018c 	.word	0x2000018c
 80087c0:	20000804 	.word	0x20000804
 80087c4:	200007f8 	.word	0x200007f8
 80087c8:	200006e8 	.word	0x200006e8
 80087cc:	20000998 	.word	0x20000998
 80087d0:	20000174 	.word	0x20000174
 80087d4:	200007ac 	.word	0x200007ac
 80087d8:	48000400 	.word	0x48000400
 80087dc:	20000034 	.word	0x20000034

080087e0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <DMA1_Channel1_IRQHandler+0x8>)
 80087e2:	f7f9 b8c1 	b.w	8001968 <HAL_DMA_IRQHandler>
 80087e6:	bf00      	nop
 80087e8:	200008b8 	.word	0x200008b8

080087ec <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80087ec:	4801      	ldr	r0, [pc, #4]	; (80087f4 <DMA1_Channel2_IRQHandler+0x8>)
 80087ee:	f7f9 b8bb 	b.w	8001968 <HAL_DMA_IRQHandler>
 80087f2:	bf00      	nop
 80087f4:	20000a48 	.word	0x20000a48

080087f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80087f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80087fa:	2040      	movs	r0, #64	; 0x40
 80087fc:	f7f9 fb4e 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008800:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008806:	f7f9 bb49 	b.w	8001e9c <HAL_GPIO_EXTI_IRQHandler>
 800880a:	bf00      	nop

0800880c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800880c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800880e:	4804      	ldr	r0, [pc, #16]	; (8008820 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8008810:	f7fb fbb4 	bl	8003f7c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8008814:	4803      	ldr	r0, [pc, #12]	; (8008824 <TIM1_BRK_TIM15_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8008816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim15);
 800881a:	f7fb bbaf 	b.w	8003f7c <HAL_TIM_IRQHandler>
 800881e:	bf00      	nop
 8008820:	2000094c 	.word	0x2000094c
 8008824:	200007b0 	.word	0x200007b0

08008828 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800882a:	4804      	ldr	r0, [pc, #16]	; (800883c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800882c:	f7fb fba6 	bl	8003f7c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8008830:	4803      	ldr	r0, [pc, #12]	; (8008840 <TIM1_UP_TIM16_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	//  Timer0AIntHandler();
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8008836:	f7fb bba1 	b.w	8003f7c <HAL_TIM_IRQHandler>
 800883a:	bf00      	nop
 800883c:	2000094c 	.word	0x2000094c
 8008840:	20000aa4 	.word	0x20000aa4

08008844 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <I2C1_EV_IRQHandler+0x8>)
 8008846:	f7f9 be93 	b.w	8002570 <HAL_I2C_EV_IRQHandler>
 800884a:	bf00      	nop
 800884c:	20000760 	.word	0x20000760

08008850 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <I2C1_ER_IRQHandler+0x8>)
 8008852:	f7fa b94f 	b.w	8002af4 <HAL_I2C_ER_IRQHandler>
 8008856:	bf00      	nop
 8008858:	20000760 	.word	0x20000760

0800885c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800885c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800885e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008862:	f7f9 fb1b 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008866:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800886a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800886e:	f7f9 bb15 	b.w	8001e9c <HAL_GPIO_EXTI_IRQHandler>
 8008872:	bf00      	nop

08008874 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */
	//Timer0AIntHandler();
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <TIM6_IRQHandler+0x8>)
 8008876:	f7fb bb81 	b.w	8003f7c <HAL_TIM_IRQHandler>
 800887a:	bf00      	nop
 800887c:	2000090c 	.word	0x2000090c

08008880 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008880:	4a0c      	ldr	r2, [pc, #48]	; (80088b4 <_sbrk+0x34>)
{
 8008882:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8008884:	6813      	ldr	r3, [r2, #0]
 8008886:	b133      	cbz	r3, 8008896 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8008888:	4418      	add	r0, r3
 800888a:	4669      	mov	r1, sp
 800888c:	4288      	cmp	r0, r1
 800888e:	d808      	bhi.n	80088a2 <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8008890:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8008892:	4618      	mov	r0, r3
 8008894:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8008896:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <_sbrk+0x38>)
 8008898:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800889a:	4418      	add	r0, r3
 800889c:	4669      	mov	r1, sp
 800889e:	4288      	cmp	r0, r1
 80088a0:	d9f6      	bls.n	8008890 <_sbrk+0x10>
		errno = ENOMEM;
 80088a2:	f000 fa0d 	bl	8008cc0 <__errno>
 80088a6:	230c      	movs	r3, #12
 80088a8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80088aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	bd08      	pop	{r3, pc}
 80088b2:	bf00      	nop
 80088b4:	20000190 	.word	0x20000190
 80088b8:	20000b2c 	.word	0x20000b2c

080088bc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088bc:	4911      	ldr	r1, [pc, #68]	; (8008904 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80088be:	4b12      	ldr	r3, [pc, #72]	; (8008908 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80088c4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80088c8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80088ce:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80088d0:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80088d8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80088e0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80088e4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 80088e8:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 80088ea:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80088ec:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088ee:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 80088f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088f6:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 80088f8:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088fa:	608c      	str	r4, [r1, #8]
#endif
}
 80088fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	e000ed00 	.word	0xe000ed00
 8008908:	40021000 	.word	0x40021000

0800890c <forward>:
{
 int current_speed = 0;

}
void forward()
{
 800890c:	b508      	push	{r3, lr}
//	MotorLeftSpeed(100);
//	delay(50);
	MotorLeftSpeed(80);
 800890e:	2050      	movs	r0, #80	; 0x50
 8008910:	f7fc fae8 	bl	8004ee4 <MotorLeftSpeed>
	MotorRightSpeed(80);
 8008914:	2050      	movs	r0, #80	; 0x50
 8008916:	f7fc fb09 	bl	8004f2c <MotorRightSpeed>
	delay(400);
 800891a:	4a04      	ldr	r2, [pc, #16]	; (800892c <forward+0x20>)
 800891c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1fc      	bne.n	8008922 <forward+0x16>
}
 8008928:	bd08      	pop	{r3, pc}
 800892a:	bf00      	nop
 800892c:	2000088c 	.word	0x2000088c

08008930 <WallFollowing>:
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, RESET);

}

void WallFollowing(void)
{
 8008930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
//			if((right_side>(WALL_DESIRED_DISTANCE*3)) && enc_rightCounter >= 300*STEPK)
//				STATE = TURN_RIGHT;
//			else
//				STATE = FORWARD;

		switch(STATE){
 8008934:	4eb8      	ldr	r6, [pc, #736]	; (8008c18 <WallFollowing+0x2e8>)
 8008936:	7833      	ldrb	r3, [r6, #0]
 8008938:	2b06      	cmp	r3, #6
 800893a:	f200 8147 	bhi.w	8008bcc <WallFollowing+0x29c>
 800893e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008942:	0087      	.short	0x0087
 8008944:	0145003d 	.word	0x0145003d
 8008948:	01450145 	.word	0x01450145
 800894c:	00070021 	.word	0x00070021
				STATE = TURN_LEFT;

			}
			break;
		case TURN_RIGHT:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8008950:	2201      	movs	r2, #1
 8008952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008956:	48b1      	ldr	r0, [pc, #708]	; (8008c1c <WallFollowing+0x2ec>)
 8008958:	f7f9 fa9a 	bl	8001e90 <HAL_GPIO_WritePin>

			if(enc_leftCounter<200)
 800895c:	4bb0      	ldr	r3, [pc, #704]	; (8008c20 <WallFollowing+0x2f0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2bc7      	cmp	r3, #199	; 0xc7
 8008962:	f200 8137 	bhi.w	8008bd4 <WallFollowing+0x2a4>
			{
				left_pwm = dev_settings.turn_speed;
 8008966:	4aaf      	ldr	r2, [pc, #700]	; (8008c24 <WallFollowing+0x2f4>)
 8008968:	4baf      	ldr	r3, [pc, #700]	; (8008c28 <WallFollowing+0x2f8>)
				right_pwm = 0;
 800896a:	4db0      	ldr	r5, [pc, #704]	; (8008c2c <WallFollowing+0x2fc>)
				left_pwm = dev_settings.turn_speed;
 800896c:	68d4      	ldr	r4, [r2, #12]
 800896e:	601c      	str	r4, [r3, #0]
				right_pwm = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	602b      	str	r3, [r5, #0]


			break;

		}
		MotorLeftSpeed(left_pwm);
 8008974:	4620      	mov	r0, r4
 8008976:	f7fc fab5 	bl	8004ee4 <MotorLeftSpeed>
		MotorRightSpeed(right_pwm);
 800897a:	6828      	ldr	r0, [r5, #0]

}
 800897c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MotorRightSpeed(right_pwm);
 8008980:	f7fc bad4 	b.w	8004f2c <MotorRightSpeed>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, SET);
 8008984:	2201      	movs	r2, #1
 8008986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800898a:	48a4      	ldr	r0, [pc, #656]	; (8008c1c <WallFollowing+0x2ec>)
 800898c:	f7f9 fa80 	bl	8001e90 <HAL_GPIO_WritePin>
			if(left_distance>120)
 8008990:	4ba7      	ldr	r3, [pc, #668]	; (8008c30 <WallFollowing+0x300>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b78      	cmp	r3, #120	; 0x78
 8008996:	f240 810f 	bls.w	8008bb8 <WallFollowing+0x288>
				right_pwm = dev_settings.turn_speed;
 800899a:	4aa2      	ldr	r2, [pc, #648]	; (8008c24 <WallFollowing+0x2f4>)
 800899c:	4da3      	ldr	r5, [pc, #652]	; (8008c2c <WallFollowing+0x2fc>)
 800899e:	68d2      	ldr	r2, [r2, #12]
				left_pwm = -20;
 80089a0:	49a1      	ldr	r1, [pc, #644]	; (8008c28 <WallFollowing+0x2f8>)
				delay(200);
 80089a2:	4ba4      	ldr	r3, [pc, #656]	; (8008c34 <WallFollowing+0x304>)
				right_pwm = dev_settings.turn_speed;
 80089a4:	602a      	str	r2, [r5, #0]
				left_pwm = -20;
 80089a6:	f06f 0013 	mvn.w	r0, #19
				delay(200);
 80089aa:	22c8      	movs	r2, #200	; 0xc8
				left_pwm = -20;
 80089ac:	6008      	str	r0, [r1, #0]
				delay(200);
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	d1fc      	bne.n	80089b0 <WallFollowing+0x80>
 80089b6:	f06f 0413 	mvn.w	r4, #19
 80089ba:	e7db      	b.n	8008974 <WallFollowing+0x44>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, RESET);
 80089bc:	2200      	movs	r2, #0
 80089be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089c2:	4896      	ldr	r0, [pc, #600]	; (8008c1c <WallFollowing+0x2ec>)
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 80089c4:	4d9c      	ldr	r5, [pc, #624]	; (8008c38 <WallFollowing+0x308>)
			errorX = WALL_FOLLOWING_TARGET - left_distance; // rd - 10, 15,20
 80089c6:	4c9d      	ldr	r4, [pc, #628]	; (8008c3c <WallFollowing+0x30c>)
			left_pwm = 80;
 80089c8:	4f97      	ldr	r7, [pc, #604]	; (8008c28 <WallFollowing+0x2f8>)
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, RESET);
 80089ca:	f7f9 fa61 	bl	8001e90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 80089ce:	2201      	movs	r2, #1
 80089d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089d4:	4891      	ldr	r0, [pc, #580]	; (8008c1c <WallFollowing+0x2ec>)
 80089d6:	f7f9 fa5b 	bl	8001e90 <HAL_GPIO_WritePin>
			errorX = WALL_FOLLOWING_TARGET - left_distance; // rd - 10, 15,20
 80089da:	4b95      	ldr	r3, [pc, #596]	; (8008c30 <WallFollowing+0x300>)
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 80089dc:	6829      	ldr	r1, [r5, #0]
			errorX = WALL_FOLLOWING_TARGET - left_distance; // rd - 10, 15,20
 80089de:	6818      	ldr	r0, [r3, #0]
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 80089e0:	4a90      	ldr	r2, [pc, #576]	; (8008c24 <WallFollowing+0x2f4>)
			errorX = WALL_FOLLOWING_TARGET - left_distance; // rd - 10, 15,20
 80089e2:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 80089e6:	1a43      	subs	r3, r0, r1
			proportionalX = dev_settings.kp *  errorX;
 80089e8:	e9d2 2109 	ldrd	r2, r1, [r2, #36]	; 0x24
			errorX = WALL_FOLLOWING_TARGET - left_distance; // rd - 10, 15,20
 80089ec:	6020      	str	r0, [r4, #0]
			proportionalX /=10;
 80089ee:	4c94      	ldr	r4, [pc, #592]	; (8008c40 <WallFollowing+0x310>)
			lastErrorX = errorX;
 80089f0:	6028      	str	r0, [r5, #0]
			proportionalX = dev_settings.kp *  errorX;
 80089f2:	fb02 f200 	mul.w	r2, r2, r0
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 80089f6:	fb01 f103 	mul.w	r1, r1, r3
			if(left_side>150)
 80089fa:	4d92      	ldr	r5, [pc, #584]	; (8008c44 <WallFollowing+0x314>)
			derivateX /=10;
 80089fc:	fb84 0301 	smull	r0, r3, r4, r1
			proportionalX /=10;
 8008a00:	fb84 0402 	smull	r0, r4, r4, r2
			derivateX /=10;
 8008a04:	17c9      	asrs	r1, r1, #31
			proportionalX /=10;
 8008a06:	17d2      	asrs	r2, r2, #31
			derivateX /=10;
 8008a08:	488f      	ldr	r0, [pc, #572]	; (8008c48 <WallFollowing+0x318>)
 8008a0a:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
			proportionalX /=10;
 8008a0e:	ebc2 03a4 	rsb	r3, r2, r4, asr #2
			if(left_side>150)
 8008a12:	682a      	ldr	r2, [r5, #0]
			proportionalX /=10;
 8008a14:	4c8d      	ldr	r4, [pc, #564]	; (8008c4c <WallFollowing+0x31c>)
			derivateX /=10;
 8008a16:	6001      	str	r1, [r0, #0]
			right_pwm = 80;
 8008a18:	4d84      	ldr	r5, [pc, #528]	; (8008c2c <WallFollowing+0x2fc>)
			control_val = proportionalX + derivateX;
 8008a1a:	488d      	ldr	r0, [pc, #564]	; (8008c50 <WallFollowing+0x320>)
			proportionalX /=10;
 8008a1c:	6023      	str	r3, [r4, #0]
			if(left_side>150)
 8008a1e:	2a96      	cmp	r2, #150	; 0x96
			left_pwm = 80;
 8008a20:	f04f 0450 	mov.w	r4, #80	; 0x50
			control_val = proportionalX + derivateX;
 8008a24:	440b      	add	r3, r1
 8008a26:	8003      	strh	r3, [r0, #0]
			left_pwm = 80;
 8008a28:	603c      	str	r4, [r7, #0]
			right_pwm = 80;
 8008a2a:	602c      	str	r4, [r5, #0]
			if(left_side>150)
 8008a2c:	d9a2      	bls.n	8008974 <WallFollowing+0x44>
				MotorLeftSpeed(80);
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7fc fa58 	bl	8004ee4 <MotorLeftSpeed>
				MotorRightSpeed(80);
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7fc fa79 	bl	8004f2c <MotorRightSpeed>
				delay(1200);
 8008a3a:	4b7e      	ldr	r3, [pc, #504]	; (8008c34 <WallFollowing+0x304>)
 8008a3c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	d1fc      	bne.n	8008a42 <WallFollowing+0x112>
				STATE = TURN_LEFT;
 8008a48:	2305      	movs	r3, #5
 8008a4a:	683c      	ldr	r4, [r7, #0]
 8008a4c:	7033      	strb	r3, [r6, #0]
 8008a4e:	e791      	b.n	8008974 <WallFollowing+0x44>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, RESET);
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a56:	4871      	ldr	r0, [pc, #452]	; (8008c1c <WallFollowing+0x2ec>)
 8008a58:	f7f9 fa1a 	bl	8001e90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a62:	486e      	ldr	r0, [pc, #440]	; (8008c1c <WallFollowing+0x2ec>)
 8008a64:	f7f9 fa14 	bl	8001e90 <HAL_GPIO_WritePin>
			l_distance = left_distance;
 8008a68:	4b71      	ldr	r3, [pc, #452]	; (8008c30 <WallFollowing+0x300>)
 8008a6a:	681f      	ldr	r7, [r3, #0]
				l_distance = 130;
 8008a6c:	4b79      	ldr	r3, [pc, #484]	; (8008c54 <WallFollowing+0x324>)
			if(left_distance>130)
 8008a6e:	2f82      	cmp	r7, #130	; 0x82
 8008a70:	f200 80b6 	bhi.w	8008be0 <WallFollowing+0x2b0>
			if(left_distance < 70)
 8008a74:	2f45      	cmp	r7, #69	; 0x45
 8008a76:	f200 80c1 	bhi.w	8008bfc <WallFollowing+0x2cc>
				l_distance = 70;
 8008a7a:	2246      	movs	r2, #70	; 0x46
 8008a7c:	f04f 0c1e 	mov.w	ip, #30
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	4664      	mov	r4, ip
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 8008a84:	486c      	ldr	r0, [pc, #432]	; (8008c38 <WallFollowing+0x308>)
 8008a86:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8008c24 <WallFollowing+0x2f4>
 8008a8a:	6805      	ldr	r5, [r0, #0]
			proportionalX /=10;
 8008a8c:	4b6c      	ldr	r3, [pc, #432]	; (8008c40 <WallFollowing+0x310>)
			lastErrorX = errorX;
 8008a8e:	6004      	str	r4, [r0, #0]
			proportionalX = dev_settings.kp *  errorX;
 8008a90:	e9da 2109 	ldrd	r2, r1, [sl, #36]	; 0x24
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 8008a94:	1b65      	subs	r5, r4, r5
			proportionalX = dev_settings.kp *  errorX;
 8008a96:	fb02 f20c 	mul.w	r2, r2, ip
			derivateX = dev_settings.kd * (errorX- lastErrorX);
 8008a9a:	fb01 f105 	mul.w	r1, r1, r5
			derivateX /=10;
 8008a9e:	fb83 0e01 	smull	r0, lr, r3, r1
 8008aa2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8008c48 <WallFollowing+0x318>
			if( enc_rightCounter<RAMP*STEPK)
 8008aa6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c68 <WallFollowing+0x338>
			control_val = proportionalX + derivateX;
 8008aaa:	4d69      	ldr	r5, [pc, #420]	; (8008c50 <WallFollowing+0x320>)
			proportionalX /=10;
 8008aac:	fb83 3002 	smull	r3, r0, r3, r2
			derivateX /=10;
 8008ab0:	17c9      	asrs	r1, r1, #31
			proportionalX /=10;
 8008ab2:	17d3      	asrs	r3, r2, #31
 8008ab4:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
			derivateX /=10;
 8008ab8:	ebc1 02ae 	rsb	r2, r1, lr, asr #2
			control_val = proportionalX + derivateX;
 8008abc:	eb03 0b02 	add.w	fp, r3, r2
			proportionalX /=10;
 8008ac0:	4962      	ldr	r1, [pc, #392]	; (8008c4c <WallFollowing+0x31c>)
			derivateX /=10;
 8008ac2:	f8cc 2000 	str.w	r2, [ip]
			errorX = WALL_FOLLOWING_TARGET - l_distance; // rd - 10, 15,20
 8008ac6:	4a5d      	ldr	r2, [pc, #372]	; (8008c3c <WallFollowing+0x30c>)
			if( enc_rightCounter<RAMP*STEPK)
 8008ac8:	f8d8 0000 	ldr.w	r0, [r8]
			errorX = WALL_FOLLOWING_TARGET - l_distance; // rd - 10, 15,20
 8008acc:	6014      	str	r4, [r2, #0]
			control_val = proportionalX + derivateX;
 8008ace:	fa0f fb8b 	sxth.w	fp, fp
			proportionalX /=10;
 8008ad2:	600b      	str	r3, [r1, #0]
			control_val = proportionalX + derivateX;
 8008ad4:	f8a5 b000 	strh.w	fp, [r5]
			if( enc_rightCounter<RAMP*STEPK)
 8008ad8:	f7f7 fd14 	bl	8000504 <__aeabi_ui2d>
 8008adc:	a34a      	add	r3, pc, #296	; (adr r3, 8008c08 <WallFollowing+0x2d8>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8008ae6:	f7f7 fff9 	bl	8000adc <__aeabi_dcmplt>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d07e      	beq.n	8008bec <WallFollowing+0x2bc>
				speed_ramp_diff = dev_settings.fast_speed-dev_settings.starting_speed; // 150 - 50 = 100;
 8008aee:	f8da 9014 	ldr.w	r9, [sl, #20]
 8008af2:	4b59      	ldr	r3, [pc, #356]	; (8008c58 <WallFollowing+0x328>)
 8008af4:	eba4 0009 	sub.w	r0, r4, r9
 8008af8:	b200      	sxth	r0, r0
 8008afa:	8018      	strh	r0, [r3, #0]
				ramp_step = speed_ramp_diff / (dev_settings.ramp*STEPK); // 100/100 = 1;
 8008afc:	f7f7 fd12 	bl	8000524 <__aeabi_i2d>
 8008b00:	4604      	mov	r4, r0
 8008b02:	f8da 001c 	ldr.w	r0, [sl, #28]
 8008b06:	460d      	mov	r5, r1
 8008b08:	f7f7 fcfc 	bl	8000504 <__aeabi_ui2d>
 8008b0c:	a340      	add	r3, pc, #256	; (adr r3, 8008c10 <WallFollowing+0x2e0>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7f7 fe95 	bl	800084c <__aeabi_ddiv>
 8008b22:	f7f8 f803 	bl	8000b2c <__aeabi_d2iz>
 8008b26:	4a4d      	ldr	r2, [pc, #308]	; (8008c5c <WallFollowing+0x32c>)
				current_speed = dev_settings.starting_speed + ramp_step*enc_rightCounter*STEPK; // 50 + 1*50 = 100 speed na 50
 8008b28:	f8d8 3000 	ldr.w	r3, [r8]
				ramp_step = speed_ramp_diff / (dev_settings.ramp*STEPK); // 100/100 = 1;
 8008b2c:	b200      	sxth	r0, r0
 8008b2e:	8010      	strh	r0, [r2, #0]
				current_speed = dev_settings.starting_speed + ramp_step*enc_rightCounter*STEPK; // 50 + 1*50 = 100 speed na 50
 8008b30:	fb03 f000 	mul.w	r0, r3, r0
 8008b34:	f7f7 fce6 	bl	8000504 <__aeabi_ui2d>
 8008b38:	a335      	add	r3, pc, #212	; (adr r3, 8008c10 <WallFollowing+0x2e0>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	4604      	mov	r4, r0
 8008b44:	4648      	mov	r0, r9
 8008b46:	460d      	mov	r5, r1
 8008b48:	f7f7 fcdc 	bl	8000504 <__aeabi_ui2d>
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4629      	mov	r1, r5
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7f7 fb9a 	bl	800028c <__adddf3>
 8008b58:	f7f8 f810 	bl	8000b7c <__aeabi_d2f>
 8008b5c:	4b40      	ldr	r3, [pc, #256]	; (8008c60 <WallFollowing+0x330>)
 8008b5e:	ee07 0a90 	vmov	s15, r0
 8008b62:	6018      	str	r0, [r3, #0]
			left_pwm = current_speed + control_val;
 8008b64:	ee07 ba10 	vmov	s14, fp
 8008b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b6c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8008c28 <WallFollowing+0x2f8>
			right_pwm = current_speed - control_val;
 8008b70:	4d2e      	ldr	r5, [pc, #184]	; (8008c2c <WallFollowing+0x2fc>)
			left_pwm = current_speed + control_val;
 8008b72:	ee77 6a27 	vadd.f32	s13, s14, s15
			right_pwm = current_speed - control_val;
 8008b76:	ee77 7ac7 	vsub.f32	s15, s15, s14
			left_pwm = current_speed + control_val;
 8008b7a:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			right_pwm = current_speed - control_val;
 8008b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			if((left_distance >200) && (enc_rightCounter > 300*STEPK))
 8008b82:	2fc8      	cmp	r7, #200	; 0xc8
			left_pwm = current_speed + control_val;
 8008b84:	ee17 4a10 	vmov	r4, s14
 8008b88:	ed89 7a00 	vstr	s14, [r9]
			right_pwm = current_speed - control_val;
 8008b8c:	edc5 7a00 	vstr	s15, [r5]
			if((left_distance >200) && (enc_rightCounter > 300*STEPK))
 8008b90:	f67f aef0 	bls.w	8008974 <WallFollowing+0x44>
 8008b94:	f8d8 0000 	ldr.w	r0, [r8]
 8008b98:	f7f7 fcb4 	bl	8000504 <__aeabi_ui2d>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <WallFollowing+0x334>)
 8008ba0:	f7f7 ffba 	bl	8000b18 <__aeabi_dcmpgt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f43f aee5 	beq.w	8008974 <WallFollowing+0x44>
				clear_encoders();
 8008baa:	f7fb fcc3 	bl	8004534 <clear_encoders>
				STATE = GOTO_END;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f8d9 4000 	ldr.w	r4, [r9]
 8008bb4:	7033      	strb	r3, [r6, #0]
 8008bb6:	e6dd      	b.n	8008974 <WallFollowing+0x44>
				forward();
 8008bb8:	f7ff fea8 	bl	800890c <forward>
				STATE = FORWARD;
 8008bbc:	2300      	movs	r3, #0
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, RESET);
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008bc4:	4815      	ldr	r0, [pc, #84]	; (8008c1c <WallFollowing+0x2ec>)
				STATE = FORWARD;
 8008bc6:	7033      	strb	r3, [r6, #0]
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, RESET);
 8008bc8:	f7f9 f962 	bl	8001e90 <HAL_GPIO_WritePin>
 8008bcc:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <WallFollowing+0x2f8>)
 8008bce:	4d17      	ldr	r5, [pc, #92]	; (8008c2c <WallFollowing+0x2fc>)
 8008bd0:	681c      	ldr	r4, [r3, #0]
 8008bd2:	e6cf      	b.n	8008974 <WallFollowing+0x44>
 8008bd4:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <WallFollowing+0x2f8>)
 8008bd6:	4d15      	ldr	r5, [pc, #84]	; (8008c2c <WallFollowing+0x2fc>)
 8008bd8:	681c      	ldr	r4, [r3, #0]
				STATE = FORWARD;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	7033      	strb	r3, [r6, #0]
 8008bde:	e6c9      	b.n	8008974 <WallFollowing+0x44>
				l_distance = 130;
 8008be0:	2282      	movs	r2, #130	; 0x82
 8008be2:	f06f 0c1d 	mvn.w	ip, #29
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	4664      	mov	r4, ip
 8008bea:	e74b      	b.n	8008a84 <WallFollowing+0x154>
				current_speed = dev_settings.fast_speed;
 8008bec:	ee07 4a90 	vmov	s15, r4
 8008bf0:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <WallFollowing+0x330>)
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	edc3 7a00 	vstr	s15, [r3]
 8008bfa:	e7b3      	b.n	8008b64 <WallFollowing+0x234>
 8008bfc:	f1c7 0464 	rsb	r4, r7, #100	; 0x64
			l_distance = left_distance;
 8008c00:	801f      	strh	r7, [r3, #0]
 8008c02:	46a4      	mov	ip, r4
 8008c04:	e73e      	b.n	8008a84 <WallFollowing+0x154>
 8008c06:	bf00      	nop
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	40759000 	.word	0x40759000
 8008c10:	9999999a 	.word	0x9999999a
 8008c14:	3ffb9999 	.word	0x3ffb9999
 8008c18:	20000b20 	.word	0x20000b20
 8008c1c:	48000400 	.word	0x48000400
 8008c20:	200001bc 	.word	0x200001bc
 8008c24:	20000624 	.word	0x20000624
 8008c28:	20000b10 	.word	0x20000b10
 8008c2c:	20000b14 	.word	0x20000b14
 8008c30:	20000a98 	.word	0x20000a98
 8008c34:	2000088c 	.word	0x2000088c
 8008c38:	20000804 	.word	0x20000804
 8008c3c:	200007f8 	.word	0x200007f8
 8008c40:	66666667 	.word	0x66666667
 8008c44:	2000089c 	.word	0x2000089c
 8008c48:	20000168 	.word	0x20000168
 8008c4c:	20000180 	.word	0x20000180
 8008c50:	20000194 	.word	0x20000194
 8008c54:	20000196 	.word	0x20000196
 8008c58:	20000b24 	.word	0x20000b24
 8008c5c:	20000b22 	.word	0x20000b22
 8008c60:	200008a4 	.word	0x200008a4
 8008c64:	40802c00 	.word	0x40802c00
 8008c68:	200001b4 	.word	0x200001b4

08008c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ca4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008c70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008c72:	e003      	b.n	8008c7c <LoopCopyDataInit>

08008c74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008c74:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008c76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008c78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008c7a:	3104      	adds	r1, #4

08008c7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008c7c:	480b      	ldr	r0, [pc, #44]	; (8008cac <LoopForever+0xa>)
	ldr	r3, =_edata
 8008c7e:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008c80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008c82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008c84:	d3f6      	bcc.n	8008c74 <CopyDataInit>
	ldr	r2, =_sbss
 8008c86:	4a0b      	ldr	r2, [pc, #44]	; (8008cb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008c88:	e002      	b.n	8008c90 <LoopFillZerobss>

08008c8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008c8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008c8c:	f842 3b04 	str.w	r3, [r2], #4

08008c90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008c90:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <LoopForever+0x16>)
	cmp	r2, r3
 8008c92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008c94:	d3f9      	bcc.n	8008c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008c96:	f7ff fe11 	bl	80088bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c9a:	f000 f817 	bl	8008ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008c9e:	f7fe fc1b 	bl	80074d8 <main>

08008ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8008ca2:	e7fe      	b.n	8008ca2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008ca4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8008ca8:	0800ba94 	.word	0x0800ba94
	ldr	r0, =_sdata
 8008cac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008cb0:	200000c0 	.word	0x200000c0
	ldr	r2, =_sbss
 8008cb4:	200000c0 	.word	0x200000c0
	ldr	r3, = _ebss
 8008cb8:	20000b2c 	.word	0x20000b2c

08008cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008cbc:	e7fe      	b.n	8008cbc <ADC1_2_IRQHandler>
	...

08008cc0 <__errno>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	; (8008cc8 <__errno+0x8>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	2000005c 	.word	0x2000005c

08008ccc <__libc_init_array>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4e0d      	ldr	r6, [pc, #52]	; (8008d04 <__libc_init_array+0x38>)
 8008cd0:	4c0d      	ldr	r4, [pc, #52]	; (8008d08 <__libc_init_array+0x3c>)
 8008cd2:	1ba4      	subs	r4, r4, r6
 8008cd4:	10a4      	asrs	r4, r4, #2
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	42a5      	cmp	r5, r4
 8008cda:	d109      	bne.n	8008cf0 <__libc_init_array+0x24>
 8008cdc:	4e0b      	ldr	r6, [pc, #44]	; (8008d0c <__libc_init_array+0x40>)
 8008cde:	4c0c      	ldr	r4, [pc, #48]	; (8008d10 <__libc_init_array+0x44>)
 8008ce0:	f000 fc26 	bl	8009530 <_init>
 8008ce4:	1ba4      	subs	r4, r4, r6
 8008ce6:	10a4      	asrs	r4, r4, #2
 8008ce8:	2500      	movs	r5, #0
 8008cea:	42a5      	cmp	r5, r4
 8008cec:	d105      	bne.n	8008cfa <__libc_init_array+0x2e>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cf4:	4798      	blx	r3
 8008cf6:	3501      	adds	r5, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__libc_init_array+0xc>
 8008cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cfe:	4798      	blx	r3
 8008d00:	3501      	adds	r5, #1
 8008d02:	e7f2      	b.n	8008cea <__libc_init_array+0x1e>
 8008d04:	0800ba8c 	.word	0x0800ba8c
 8008d08:	0800ba8c 	.word	0x0800ba8c
 8008d0c:	0800ba8c 	.word	0x0800ba8c
 8008d10:	0800ba90 	.word	0x0800ba90

08008d14 <memset>:
 8008d14:	4402      	add	r2, r0
 8008d16:	4603      	mov	r3, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <siprintf>:
 8008d24:	b40e      	push	{r1, r2, r3}
 8008d26:	b500      	push	{lr}
 8008d28:	b09c      	sub	sp, #112	; 0x70
 8008d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d2c:	9002      	str	r0, [sp, #8]
 8008d2e:	9006      	str	r0, [sp, #24]
 8008d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d34:	4809      	ldr	r0, [pc, #36]	; (8008d5c <siprintf+0x38>)
 8008d36:	9107      	str	r1, [sp, #28]
 8008d38:	9104      	str	r1, [sp, #16]
 8008d3a:	4909      	ldr	r1, [pc, #36]	; (8008d60 <siprintf+0x3c>)
 8008d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d40:	9105      	str	r1, [sp, #20]
 8008d42:	6800      	ldr	r0, [r0, #0]
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	a902      	add	r1, sp, #8
 8008d48:	f000 f866 	bl	8008e18 <_svfiprintf_r>
 8008d4c:	9b02      	ldr	r3, [sp, #8]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	b01c      	add	sp, #112	; 0x70
 8008d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d58:	b003      	add	sp, #12
 8008d5a:	4770      	bx	lr
 8008d5c:	2000005c 	.word	0x2000005c
 8008d60:	ffff0208 	.word	0xffff0208

08008d64 <__ssputs_r>:
 8008d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	688e      	ldr	r6, [r1, #8]
 8008d6a:	429e      	cmp	r6, r3
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	4690      	mov	r8, r2
 8008d72:	4699      	mov	r9, r3
 8008d74:	d837      	bhi.n	8008de6 <__ssputs_r+0x82>
 8008d76:	898a      	ldrh	r2, [r1, #12]
 8008d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d7c:	d031      	beq.n	8008de2 <__ssputs_r+0x7e>
 8008d7e:	6825      	ldr	r5, [r4, #0]
 8008d80:	6909      	ldr	r1, [r1, #16]
 8008d82:	1a6f      	subs	r7, r5, r1
 8008d84:	6965      	ldr	r5, [r4, #20]
 8008d86:	2302      	movs	r3, #2
 8008d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d90:	f109 0301 	add.w	r3, r9, #1
 8008d94:	443b      	add	r3, r7
 8008d96:	429d      	cmp	r5, r3
 8008d98:	bf38      	it	cc
 8008d9a:	461d      	movcc	r5, r3
 8008d9c:	0553      	lsls	r3, r2, #21
 8008d9e:	d530      	bpl.n	8008e02 <__ssputs_r+0x9e>
 8008da0:	4629      	mov	r1, r5
 8008da2:	f000 fb2b 	bl	80093fc <_malloc_r>
 8008da6:	4606      	mov	r6, r0
 8008da8:	b950      	cbnz	r0, 8008dc0 <__ssputs_r+0x5c>
 8008daa:	230c      	movs	r3, #12
 8008dac:	f8ca 3000 	str.w	r3, [sl]
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	463a      	mov	r2, r7
 8008dc2:	6921      	ldr	r1, [r4, #16]
 8008dc4:	f000 faa8 	bl	8009318 <memcpy>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	6126      	str	r6, [r4, #16]
 8008dd6:	6165      	str	r5, [r4, #20]
 8008dd8:	443e      	add	r6, r7
 8008dda:	1bed      	subs	r5, r5, r7
 8008ddc:	6026      	str	r6, [r4, #0]
 8008dde:	60a5      	str	r5, [r4, #8]
 8008de0:	464e      	mov	r6, r9
 8008de2:	454e      	cmp	r6, r9
 8008de4:	d900      	bls.n	8008de8 <__ssputs_r+0x84>
 8008de6:	464e      	mov	r6, r9
 8008de8:	4632      	mov	r2, r6
 8008dea:	4641      	mov	r1, r8
 8008dec:	6820      	ldr	r0, [r4, #0]
 8008dee:	f000 fa9e 	bl	800932e <memmove>
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	1b9b      	subs	r3, r3, r6
 8008df6:	60a3      	str	r3, [r4, #8]
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	441e      	add	r6, r3
 8008dfc:	6026      	str	r6, [r4, #0]
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e7dc      	b.n	8008dbc <__ssputs_r+0x58>
 8008e02:	462a      	mov	r2, r5
 8008e04:	f000 fb54 	bl	80094b0 <_realloc_r>
 8008e08:	4606      	mov	r6, r0
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1e2      	bne.n	8008dd4 <__ssputs_r+0x70>
 8008e0e:	6921      	ldr	r1, [r4, #16]
 8008e10:	4650      	mov	r0, sl
 8008e12:	f000 faa5 	bl	8009360 <_free_r>
 8008e16:	e7c8      	b.n	8008daa <__ssputs_r+0x46>

08008e18 <_svfiprintf_r>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	461d      	mov	r5, r3
 8008e1e:	898b      	ldrh	r3, [r1, #12]
 8008e20:	061f      	lsls	r7, r3, #24
 8008e22:	b09d      	sub	sp, #116	; 0x74
 8008e24:	4680      	mov	r8, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	4616      	mov	r6, r2
 8008e2a:	d50f      	bpl.n	8008e4c <_svfiprintf_r+0x34>
 8008e2c:	690b      	ldr	r3, [r1, #16]
 8008e2e:	b96b      	cbnz	r3, 8008e4c <_svfiprintf_r+0x34>
 8008e30:	2140      	movs	r1, #64	; 0x40
 8008e32:	f000 fae3 	bl	80093fc <_malloc_r>
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	6120      	str	r0, [r4, #16]
 8008e3a:	b928      	cbnz	r0, 8008e48 <_svfiprintf_r+0x30>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	f8c8 3000 	str.w	r3, [r8]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e46:	e0c8      	b.n	8008fda <_svfiprintf_r+0x1c2>
 8008e48:	2340      	movs	r3, #64	; 0x40
 8008e4a:	6163      	str	r3, [r4, #20]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e50:	2320      	movs	r3, #32
 8008e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e56:	2330      	movs	r3, #48	; 0x30
 8008e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e5c:	9503      	str	r5, [sp, #12]
 8008e5e:	f04f 0b01 	mov.w	fp, #1
 8008e62:	4637      	mov	r7, r6
 8008e64:	463d      	mov	r5, r7
 8008e66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e6a:	b10b      	cbz	r3, 8008e70 <_svfiprintf_r+0x58>
 8008e6c:	2b25      	cmp	r3, #37	; 0x25
 8008e6e:	d13e      	bne.n	8008eee <_svfiprintf_r+0xd6>
 8008e70:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e74:	d00b      	beq.n	8008e8e <_svfiprintf_r+0x76>
 8008e76:	4653      	mov	r3, sl
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	f7ff ff71 	bl	8008d64 <__ssputs_r>
 8008e82:	3001      	adds	r0, #1
 8008e84:	f000 80a4 	beq.w	8008fd0 <_svfiprintf_r+0x1b8>
 8008e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8a:	4453      	add	r3, sl
 8008e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8e:	783b      	ldrb	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 809d 	beq.w	8008fd0 <_svfiprintf_r+0x1b8>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eaa:	462f      	mov	r7, r5
 8008eac:	2205      	movs	r2, #5
 8008eae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008eb2:	4850      	ldr	r0, [pc, #320]	; (8008ff4 <_svfiprintf_r+0x1dc>)
 8008eb4:	f7f7 f994 	bl	80001e0 <memchr>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	b9d0      	cbnz	r0, 8008ef2 <_svfiprintf_r+0xda>
 8008ebc:	06d9      	lsls	r1, r3, #27
 8008ebe:	bf44      	itt	mi
 8008ec0:	2220      	movmi	r2, #32
 8008ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ec6:	071a      	lsls	r2, r3, #28
 8008ec8:	bf44      	itt	mi
 8008eca:	222b      	movmi	r2, #43	; 0x2b
 8008ecc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ed0:	782a      	ldrb	r2, [r5, #0]
 8008ed2:	2a2a      	cmp	r2, #42	; 0x2a
 8008ed4:	d015      	beq.n	8008f02 <_svfiprintf_r+0xea>
 8008ed6:	9a07      	ldr	r2, [sp, #28]
 8008ed8:	462f      	mov	r7, r5
 8008eda:	2000      	movs	r0, #0
 8008edc:	250a      	movs	r5, #10
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee4:	3b30      	subs	r3, #48	; 0x30
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d94d      	bls.n	8008f86 <_svfiprintf_r+0x16e>
 8008eea:	b1b8      	cbz	r0, 8008f1c <_svfiprintf_r+0x104>
 8008eec:	e00f      	b.n	8008f0e <_svfiprintf_r+0xf6>
 8008eee:	462f      	mov	r7, r5
 8008ef0:	e7b8      	b.n	8008e64 <_svfiprintf_r+0x4c>
 8008ef2:	4a40      	ldr	r2, [pc, #256]	; (8008ff4 <_svfiprintf_r+0x1dc>)
 8008ef4:	1a80      	subs	r0, r0, r2
 8008ef6:	fa0b f000 	lsl.w	r0, fp, r0
 8008efa:	4318      	orrs	r0, r3
 8008efc:	9004      	str	r0, [sp, #16]
 8008efe:	463d      	mov	r5, r7
 8008f00:	e7d3      	b.n	8008eaa <_svfiprintf_r+0x92>
 8008f02:	9a03      	ldr	r2, [sp, #12]
 8008f04:	1d11      	adds	r1, r2, #4
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	9103      	str	r1, [sp, #12]
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	db01      	blt.n	8008f12 <_svfiprintf_r+0xfa>
 8008f0e:	9207      	str	r2, [sp, #28]
 8008f10:	e004      	b.n	8008f1c <_svfiprintf_r+0x104>
 8008f12:	4252      	negs	r2, r2
 8008f14:	f043 0302 	orr.w	r3, r3, #2
 8008f18:	9207      	str	r2, [sp, #28]
 8008f1a:	9304      	str	r3, [sp, #16]
 8008f1c:	783b      	ldrb	r3, [r7, #0]
 8008f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f20:	d10c      	bne.n	8008f3c <_svfiprintf_r+0x124>
 8008f22:	787b      	ldrb	r3, [r7, #1]
 8008f24:	2b2a      	cmp	r3, #42	; 0x2a
 8008f26:	d133      	bne.n	8008f90 <_svfiprintf_r+0x178>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	1d1a      	adds	r2, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	9203      	str	r2, [sp, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bfb8      	it	lt
 8008f34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f38:	3702      	adds	r7, #2
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	4d2e      	ldr	r5, [pc, #184]	; (8008ff8 <_svfiprintf_r+0x1e0>)
 8008f3e:	7839      	ldrb	r1, [r7, #0]
 8008f40:	2203      	movs	r2, #3
 8008f42:	4628      	mov	r0, r5
 8008f44:	f7f7 f94c 	bl	80001e0 <memchr>
 8008f48:	b138      	cbz	r0, 8008f5a <_svfiprintf_r+0x142>
 8008f4a:	2340      	movs	r3, #64	; 0x40
 8008f4c:	1b40      	subs	r0, r0, r5
 8008f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	4303      	orrs	r3, r0
 8008f56:	3701      	adds	r7, #1
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	7839      	ldrb	r1, [r7, #0]
 8008f5c:	4827      	ldr	r0, [pc, #156]	; (8008ffc <_svfiprintf_r+0x1e4>)
 8008f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f62:	2206      	movs	r2, #6
 8008f64:	1c7e      	adds	r6, r7, #1
 8008f66:	f7f7 f93b 	bl	80001e0 <memchr>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d038      	beq.n	8008fe0 <_svfiprintf_r+0x1c8>
 8008f6e:	4b24      	ldr	r3, [pc, #144]	; (8009000 <_svfiprintf_r+0x1e8>)
 8008f70:	bb13      	cbnz	r3, 8008fb8 <_svfiprintf_r+0x1a0>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	3307      	adds	r3, #7
 8008f76:	f023 0307 	bic.w	r3, r3, #7
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	9303      	str	r3, [sp, #12]
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	444b      	add	r3, r9
 8008f82:	9309      	str	r3, [sp, #36]	; 0x24
 8008f84:	e76d      	b.n	8008e62 <_svfiprintf_r+0x4a>
 8008f86:	fb05 3202 	mla	r2, r5, r2, r3
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	e7a6      	b.n	8008ede <_svfiprintf_r+0xc6>
 8008f90:	2300      	movs	r3, #0
 8008f92:	3701      	adds	r7, #1
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	4619      	mov	r1, r3
 8008f98:	250a      	movs	r5, #10
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa0:	3a30      	subs	r2, #48	; 0x30
 8008fa2:	2a09      	cmp	r2, #9
 8008fa4:	d903      	bls.n	8008fae <_svfiprintf_r+0x196>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0c8      	beq.n	8008f3c <_svfiprintf_r+0x124>
 8008faa:	9105      	str	r1, [sp, #20]
 8008fac:	e7c6      	b.n	8008f3c <_svfiprintf_r+0x124>
 8008fae:	fb05 2101 	mla	r1, r5, r1, r2
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	e7f0      	b.n	8008f9a <_svfiprintf_r+0x182>
 8008fb8:	ab03      	add	r3, sp, #12
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4b11      	ldr	r3, [pc, #68]	; (8009004 <_svfiprintf_r+0x1ec>)
 8008fc0:	a904      	add	r1, sp, #16
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f3af 8000 	nop.w
 8008fc8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008fcc:	4681      	mov	r9, r0
 8008fce:	d1d6      	bne.n	8008f7e <_svfiprintf_r+0x166>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	065b      	lsls	r3, r3, #25
 8008fd4:	f53f af35 	bmi.w	8008e42 <_svfiprintf_r+0x2a>
 8008fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fda:	b01d      	add	sp, #116	; 0x74
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4b07      	ldr	r3, [pc, #28]	; (8009004 <_svfiprintf_r+0x1ec>)
 8008fe8:	a904      	add	r1, sp, #16
 8008fea:	4640      	mov	r0, r8
 8008fec:	f000 f882 	bl	80090f4 <_printf_i>
 8008ff0:	e7ea      	b.n	8008fc8 <_svfiprintf_r+0x1b0>
 8008ff2:	bf00      	nop
 8008ff4:	0800ba58 	.word	0x0800ba58
 8008ff8:	0800ba5e 	.word	0x0800ba5e
 8008ffc:	0800ba62 	.word	0x0800ba62
 8009000:	00000000 	.word	0x00000000
 8009004:	08008d65 	.word	0x08008d65

08009008 <_printf_common>:
 8009008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	4691      	mov	r9, r2
 800900e:	461f      	mov	r7, r3
 8009010:	688a      	ldr	r2, [r1, #8]
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009018:	4293      	cmp	r3, r2
 800901a:	bfb8      	it	lt
 800901c:	4613      	movlt	r3, r2
 800901e:	f8c9 3000 	str.w	r3, [r9]
 8009022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009026:	4606      	mov	r6, r0
 8009028:	460c      	mov	r4, r1
 800902a:	b112      	cbz	r2, 8009032 <_printf_common+0x2a>
 800902c:	3301      	adds	r3, #1
 800902e:	f8c9 3000 	str.w	r3, [r9]
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	0699      	lsls	r1, r3, #26
 8009036:	bf42      	ittt	mi
 8009038:	f8d9 3000 	ldrmi.w	r3, [r9]
 800903c:	3302      	addmi	r3, #2
 800903e:	f8c9 3000 	strmi.w	r3, [r9]
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	f015 0506 	ands.w	r5, r5, #6
 8009048:	d107      	bne.n	800905a <_printf_common+0x52>
 800904a:	f104 0a19 	add.w	sl, r4, #25
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	f8d9 2000 	ldr.w	r2, [r9]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	42ab      	cmp	r3, r5
 8009058:	dc28      	bgt.n	80090ac <_printf_common+0xa4>
 800905a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	3300      	adds	r3, #0
 8009062:	bf18      	it	ne
 8009064:	2301      	movne	r3, #1
 8009066:	0692      	lsls	r2, r2, #26
 8009068:	d42d      	bmi.n	80090c6 <_printf_common+0xbe>
 800906a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906e:	4639      	mov	r1, r7
 8009070:	4630      	mov	r0, r6
 8009072:	47c0      	blx	r8
 8009074:	3001      	adds	r0, #1
 8009076:	d020      	beq.n	80090ba <_printf_common+0xb2>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	68e5      	ldr	r5, [r4, #12]
 800907c:	f8d9 2000 	ldr.w	r2, [r9]
 8009080:	f003 0306 	and.w	r3, r3, #6
 8009084:	2b04      	cmp	r3, #4
 8009086:	bf08      	it	eq
 8009088:	1aad      	subeq	r5, r5, r2
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	6922      	ldr	r2, [r4, #16]
 800908e:	bf0c      	ite	eq
 8009090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009094:	2500      	movne	r5, #0
 8009096:	4293      	cmp	r3, r2
 8009098:	bfc4      	itt	gt
 800909a:	1a9b      	subgt	r3, r3, r2
 800909c:	18ed      	addgt	r5, r5, r3
 800909e:	f04f 0900 	mov.w	r9, #0
 80090a2:	341a      	adds	r4, #26
 80090a4:	454d      	cmp	r5, r9
 80090a6:	d11a      	bne.n	80090de <_printf_common+0xd6>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e008      	b.n	80090be <_printf_common+0xb6>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4652      	mov	r2, sl
 80090b0:	4639      	mov	r1, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	47c0      	blx	r8
 80090b6:	3001      	adds	r0, #1
 80090b8:	d103      	bne.n	80090c2 <_printf_common+0xba>
 80090ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c2:	3501      	adds	r5, #1
 80090c4:	e7c3      	b.n	800904e <_printf_common+0x46>
 80090c6:	18e1      	adds	r1, r4, r3
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	2030      	movs	r0, #48	; 0x30
 80090cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090d0:	4422      	add	r2, r4
 80090d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090da:	3302      	adds	r3, #2
 80090dc:	e7c5      	b.n	800906a <_printf_common+0x62>
 80090de:	2301      	movs	r3, #1
 80090e0:	4622      	mov	r2, r4
 80090e2:	4639      	mov	r1, r7
 80090e4:	4630      	mov	r0, r6
 80090e6:	47c0      	blx	r8
 80090e8:	3001      	adds	r0, #1
 80090ea:	d0e6      	beq.n	80090ba <_printf_common+0xb2>
 80090ec:	f109 0901 	add.w	r9, r9, #1
 80090f0:	e7d8      	b.n	80090a4 <_printf_common+0x9c>
	...

080090f4 <_printf_i>:
 80090f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80090fc:	460c      	mov	r4, r1
 80090fe:	7e09      	ldrb	r1, [r1, #24]
 8009100:	b085      	sub	sp, #20
 8009102:	296e      	cmp	r1, #110	; 0x6e
 8009104:	4617      	mov	r7, r2
 8009106:	4606      	mov	r6, r0
 8009108:	4698      	mov	r8, r3
 800910a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910c:	f000 80b3 	beq.w	8009276 <_printf_i+0x182>
 8009110:	d822      	bhi.n	8009158 <_printf_i+0x64>
 8009112:	2963      	cmp	r1, #99	; 0x63
 8009114:	d036      	beq.n	8009184 <_printf_i+0x90>
 8009116:	d80a      	bhi.n	800912e <_printf_i+0x3a>
 8009118:	2900      	cmp	r1, #0
 800911a:	f000 80b9 	beq.w	8009290 <_printf_i+0x19c>
 800911e:	2958      	cmp	r1, #88	; 0x58
 8009120:	f000 8083 	beq.w	800922a <_printf_i+0x136>
 8009124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009128:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800912c:	e032      	b.n	8009194 <_printf_i+0xa0>
 800912e:	2964      	cmp	r1, #100	; 0x64
 8009130:	d001      	beq.n	8009136 <_printf_i+0x42>
 8009132:	2969      	cmp	r1, #105	; 0x69
 8009134:	d1f6      	bne.n	8009124 <_printf_i+0x30>
 8009136:	6820      	ldr	r0, [r4, #0]
 8009138:	6813      	ldr	r3, [r2, #0]
 800913a:	0605      	lsls	r5, r0, #24
 800913c:	f103 0104 	add.w	r1, r3, #4
 8009140:	d52a      	bpl.n	8009198 <_printf_i+0xa4>
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6011      	str	r1, [r2, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da03      	bge.n	8009152 <_printf_i+0x5e>
 800914a:	222d      	movs	r2, #45	; 0x2d
 800914c:	425b      	negs	r3, r3
 800914e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009152:	486f      	ldr	r0, [pc, #444]	; (8009310 <_printf_i+0x21c>)
 8009154:	220a      	movs	r2, #10
 8009156:	e039      	b.n	80091cc <_printf_i+0xd8>
 8009158:	2973      	cmp	r1, #115	; 0x73
 800915a:	f000 809d 	beq.w	8009298 <_printf_i+0x1a4>
 800915e:	d808      	bhi.n	8009172 <_printf_i+0x7e>
 8009160:	296f      	cmp	r1, #111	; 0x6f
 8009162:	d020      	beq.n	80091a6 <_printf_i+0xb2>
 8009164:	2970      	cmp	r1, #112	; 0x70
 8009166:	d1dd      	bne.n	8009124 <_printf_i+0x30>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	f043 0320 	orr.w	r3, r3, #32
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	e003      	b.n	800917a <_printf_i+0x86>
 8009172:	2975      	cmp	r1, #117	; 0x75
 8009174:	d017      	beq.n	80091a6 <_printf_i+0xb2>
 8009176:	2978      	cmp	r1, #120	; 0x78
 8009178:	d1d4      	bne.n	8009124 <_printf_i+0x30>
 800917a:	2378      	movs	r3, #120	; 0x78
 800917c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009180:	4864      	ldr	r0, [pc, #400]	; (8009314 <_printf_i+0x220>)
 8009182:	e055      	b.n	8009230 <_printf_i+0x13c>
 8009184:	6813      	ldr	r3, [r2, #0]
 8009186:	1d19      	adds	r1, r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6011      	str	r1, [r2, #0]
 800918c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009194:	2301      	movs	r3, #1
 8009196:	e08c      	b.n	80092b2 <_printf_i+0x1be>
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6011      	str	r1, [r2, #0]
 800919c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091a0:	bf18      	it	ne
 80091a2:	b21b      	sxthne	r3, r3
 80091a4:	e7cf      	b.n	8009146 <_printf_i+0x52>
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	6825      	ldr	r5, [r4, #0]
 80091aa:	1d18      	adds	r0, r3, #4
 80091ac:	6010      	str	r0, [r2, #0]
 80091ae:	0628      	lsls	r0, r5, #24
 80091b0:	d501      	bpl.n	80091b6 <_printf_i+0xc2>
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	e002      	b.n	80091bc <_printf_i+0xc8>
 80091b6:	0668      	lsls	r0, r5, #25
 80091b8:	d5fb      	bpl.n	80091b2 <_printf_i+0xbe>
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	4854      	ldr	r0, [pc, #336]	; (8009310 <_printf_i+0x21c>)
 80091be:	296f      	cmp	r1, #111	; 0x6f
 80091c0:	bf14      	ite	ne
 80091c2:	220a      	movne	r2, #10
 80091c4:	2208      	moveq	r2, #8
 80091c6:	2100      	movs	r1, #0
 80091c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091cc:	6865      	ldr	r5, [r4, #4]
 80091ce:	60a5      	str	r5, [r4, #8]
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	f2c0 8095 	blt.w	8009300 <_printf_i+0x20c>
 80091d6:	6821      	ldr	r1, [r4, #0]
 80091d8:	f021 0104 	bic.w	r1, r1, #4
 80091dc:	6021      	str	r1, [r4, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d13d      	bne.n	800925e <_printf_i+0x16a>
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	f040 808e 	bne.w	8009304 <_printf_i+0x210>
 80091e8:	4665      	mov	r5, ip
 80091ea:	2a08      	cmp	r2, #8
 80091ec:	d10b      	bne.n	8009206 <_printf_i+0x112>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	07db      	lsls	r3, r3, #31
 80091f2:	d508      	bpl.n	8009206 <_printf_i+0x112>
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	6862      	ldr	r2, [r4, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	bfde      	ittt	le
 80091fc:	2330      	movle	r3, #48	; 0x30
 80091fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009202:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009206:	ebac 0305 	sub.w	r3, ip, r5
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	f8cd 8000 	str.w	r8, [sp]
 8009210:	463b      	mov	r3, r7
 8009212:	aa03      	add	r2, sp, #12
 8009214:	4621      	mov	r1, r4
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff fef6 	bl	8009008 <_printf_common>
 800921c:	3001      	adds	r0, #1
 800921e:	d14d      	bne.n	80092bc <_printf_i+0x1c8>
 8009220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009224:	b005      	add	sp, #20
 8009226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922a:	4839      	ldr	r0, [pc, #228]	; (8009310 <_printf_i+0x21c>)
 800922c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009230:	6813      	ldr	r3, [r2, #0]
 8009232:	6821      	ldr	r1, [r4, #0]
 8009234:	1d1d      	adds	r5, r3, #4
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6015      	str	r5, [r2, #0]
 800923a:	060a      	lsls	r2, r1, #24
 800923c:	d50b      	bpl.n	8009256 <_printf_i+0x162>
 800923e:	07ca      	lsls	r2, r1, #31
 8009240:	bf44      	itt	mi
 8009242:	f041 0120 	orrmi.w	r1, r1, #32
 8009246:	6021      	strmi	r1, [r4, #0]
 8009248:	b91b      	cbnz	r3, 8009252 <_printf_i+0x15e>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	f022 0220 	bic.w	r2, r2, #32
 8009250:	6022      	str	r2, [r4, #0]
 8009252:	2210      	movs	r2, #16
 8009254:	e7b7      	b.n	80091c6 <_printf_i+0xd2>
 8009256:	064d      	lsls	r5, r1, #25
 8009258:	bf48      	it	mi
 800925a:	b29b      	uxthmi	r3, r3
 800925c:	e7ef      	b.n	800923e <_printf_i+0x14a>
 800925e:	4665      	mov	r5, ip
 8009260:	fbb3 f1f2 	udiv	r1, r3, r2
 8009264:	fb02 3311 	mls	r3, r2, r1, r3
 8009268:	5cc3      	ldrb	r3, [r0, r3]
 800926a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800926e:	460b      	mov	r3, r1
 8009270:	2900      	cmp	r1, #0
 8009272:	d1f5      	bne.n	8009260 <_printf_i+0x16c>
 8009274:	e7b9      	b.n	80091ea <_printf_i+0xf6>
 8009276:	6813      	ldr	r3, [r2, #0]
 8009278:	6825      	ldr	r5, [r4, #0]
 800927a:	6961      	ldr	r1, [r4, #20]
 800927c:	1d18      	adds	r0, r3, #4
 800927e:	6010      	str	r0, [r2, #0]
 8009280:	0628      	lsls	r0, r5, #24
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	d501      	bpl.n	800928a <_printf_i+0x196>
 8009286:	6019      	str	r1, [r3, #0]
 8009288:	e002      	b.n	8009290 <_printf_i+0x19c>
 800928a:	066a      	lsls	r2, r5, #25
 800928c:	d5fb      	bpl.n	8009286 <_printf_i+0x192>
 800928e:	8019      	strh	r1, [r3, #0]
 8009290:	2300      	movs	r3, #0
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	4665      	mov	r5, ip
 8009296:	e7b9      	b.n	800920c <_printf_i+0x118>
 8009298:	6813      	ldr	r3, [r2, #0]
 800929a:	1d19      	adds	r1, r3, #4
 800929c:	6011      	str	r1, [r2, #0]
 800929e:	681d      	ldr	r5, [r3, #0]
 80092a0:	6862      	ldr	r2, [r4, #4]
 80092a2:	2100      	movs	r1, #0
 80092a4:	4628      	mov	r0, r5
 80092a6:	f7f6 ff9b 	bl	80001e0 <memchr>
 80092aa:	b108      	cbz	r0, 80092b0 <_printf_i+0x1bc>
 80092ac:	1b40      	subs	r0, r0, r5
 80092ae:	6060      	str	r0, [r4, #4]
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	6123      	str	r3, [r4, #16]
 80092b4:	2300      	movs	r3, #0
 80092b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ba:	e7a7      	b.n	800920c <_printf_i+0x118>
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	462a      	mov	r2, r5
 80092c0:	4639      	mov	r1, r7
 80092c2:	4630      	mov	r0, r6
 80092c4:	47c0      	blx	r8
 80092c6:	3001      	adds	r0, #1
 80092c8:	d0aa      	beq.n	8009220 <_printf_i+0x12c>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	079b      	lsls	r3, r3, #30
 80092ce:	d413      	bmi.n	80092f8 <_printf_i+0x204>
 80092d0:	68e0      	ldr	r0, [r4, #12]
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	4298      	cmp	r0, r3
 80092d6:	bfb8      	it	lt
 80092d8:	4618      	movlt	r0, r3
 80092da:	e7a3      	b.n	8009224 <_printf_i+0x130>
 80092dc:	2301      	movs	r3, #1
 80092de:	464a      	mov	r2, r9
 80092e0:	4639      	mov	r1, r7
 80092e2:	4630      	mov	r0, r6
 80092e4:	47c0      	blx	r8
 80092e6:	3001      	adds	r0, #1
 80092e8:	d09a      	beq.n	8009220 <_printf_i+0x12c>
 80092ea:	3501      	adds	r5, #1
 80092ec:	68e3      	ldr	r3, [r4, #12]
 80092ee:	9a03      	ldr	r2, [sp, #12]
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	42ab      	cmp	r3, r5
 80092f4:	dcf2      	bgt.n	80092dc <_printf_i+0x1e8>
 80092f6:	e7eb      	b.n	80092d0 <_printf_i+0x1dc>
 80092f8:	2500      	movs	r5, #0
 80092fa:	f104 0919 	add.w	r9, r4, #25
 80092fe:	e7f5      	b.n	80092ec <_printf_i+0x1f8>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1ac      	bne.n	800925e <_printf_i+0x16a>
 8009304:	7803      	ldrb	r3, [r0, #0]
 8009306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800930a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800930e:	e76c      	b.n	80091ea <_printf_i+0xf6>
 8009310:	0800ba69 	.word	0x0800ba69
 8009314:	0800ba7a 	.word	0x0800ba7a

08009318 <memcpy>:
 8009318:	b510      	push	{r4, lr}
 800931a:	1e43      	subs	r3, r0, #1
 800931c:	440a      	add	r2, r1
 800931e:	4291      	cmp	r1, r2
 8009320:	d100      	bne.n	8009324 <memcpy+0xc>
 8009322:	bd10      	pop	{r4, pc}
 8009324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932c:	e7f7      	b.n	800931e <memcpy+0x6>

0800932e <memmove>:
 800932e:	4288      	cmp	r0, r1
 8009330:	b510      	push	{r4, lr}
 8009332:	eb01 0302 	add.w	r3, r1, r2
 8009336:	d807      	bhi.n	8009348 <memmove+0x1a>
 8009338:	1e42      	subs	r2, r0, #1
 800933a:	4299      	cmp	r1, r3
 800933c:	d00a      	beq.n	8009354 <memmove+0x26>
 800933e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009342:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009346:	e7f8      	b.n	800933a <memmove+0xc>
 8009348:	4283      	cmp	r3, r0
 800934a:	d9f5      	bls.n	8009338 <memmove+0xa>
 800934c:	1881      	adds	r1, r0, r2
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	42d3      	cmn	r3, r2
 8009352:	d100      	bne.n	8009356 <memmove+0x28>
 8009354:	bd10      	pop	{r4, pc}
 8009356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800935a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800935e:	e7f7      	b.n	8009350 <memmove+0x22>

08009360 <_free_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	d045      	beq.n	80093f4 <_free_r+0x94>
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f0c      	subs	r4, r1, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfb8      	it	lt
 8009372:	18e4      	addlt	r4, r4, r3
 8009374:	f000 f8d2 	bl	800951c <__malloc_lock>
 8009378:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <_free_r+0x98>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	4610      	mov	r0, r2
 800937e:	b933      	cbnz	r3, 800938e <_free_r+0x2e>
 8009380:	6063      	str	r3, [r4, #4]
 8009382:	6014      	str	r4, [r2, #0]
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800938a:	f000 b8c8 	b.w	800951e <__malloc_unlock>
 800938e:	42a3      	cmp	r3, r4
 8009390:	d90c      	bls.n	80093ac <_free_r+0x4c>
 8009392:	6821      	ldr	r1, [r4, #0]
 8009394:	1862      	adds	r2, r4, r1
 8009396:	4293      	cmp	r3, r2
 8009398:	bf04      	itt	eq
 800939a:	681a      	ldreq	r2, [r3, #0]
 800939c:	685b      	ldreq	r3, [r3, #4]
 800939e:	6063      	str	r3, [r4, #4]
 80093a0:	bf04      	itt	eq
 80093a2:	1852      	addeq	r2, r2, r1
 80093a4:	6022      	streq	r2, [r4, #0]
 80093a6:	6004      	str	r4, [r0, #0]
 80093a8:	e7ec      	b.n	8009384 <_free_r+0x24>
 80093aa:	4613      	mov	r3, r2
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	b10a      	cbz	r2, 80093b4 <_free_r+0x54>
 80093b0:	42a2      	cmp	r2, r4
 80093b2:	d9fa      	bls.n	80093aa <_free_r+0x4a>
 80093b4:	6819      	ldr	r1, [r3, #0]
 80093b6:	1858      	adds	r0, r3, r1
 80093b8:	42a0      	cmp	r0, r4
 80093ba:	d10b      	bne.n	80093d4 <_free_r+0x74>
 80093bc:	6820      	ldr	r0, [r4, #0]
 80093be:	4401      	add	r1, r0
 80093c0:	1858      	adds	r0, r3, r1
 80093c2:	4282      	cmp	r2, r0
 80093c4:	6019      	str	r1, [r3, #0]
 80093c6:	d1dd      	bne.n	8009384 <_free_r+0x24>
 80093c8:	6810      	ldr	r0, [r2, #0]
 80093ca:	6852      	ldr	r2, [r2, #4]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	4401      	add	r1, r0
 80093d0:	6019      	str	r1, [r3, #0]
 80093d2:	e7d7      	b.n	8009384 <_free_r+0x24>
 80093d4:	d902      	bls.n	80093dc <_free_r+0x7c>
 80093d6:	230c      	movs	r3, #12
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	e7d3      	b.n	8009384 <_free_r+0x24>
 80093dc:	6820      	ldr	r0, [r4, #0]
 80093de:	1821      	adds	r1, r4, r0
 80093e0:	428a      	cmp	r2, r1
 80093e2:	bf04      	itt	eq
 80093e4:	6811      	ldreq	r1, [r2, #0]
 80093e6:	6852      	ldreq	r2, [r2, #4]
 80093e8:	6062      	str	r2, [r4, #4]
 80093ea:	bf04      	itt	eq
 80093ec:	1809      	addeq	r1, r1, r0
 80093ee:	6021      	streq	r1, [r4, #0]
 80093f0:	605c      	str	r4, [r3, #4]
 80093f2:	e7c7      	b.n	8009384 <_free_r+0x24>
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	20000198 	.word	0x20000198

080093fc <_malloc_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	1ccd      	adds	r5, r1, #3
 8009400:	f025 0503 	bic.w	r5, r5, #3
 8009404:	3508      	adds	r5, #8
 8009406:	2d0c      	cmp	r5, #12
 8009408:	bf38      	it	cc
 800940a:	250c      	movcc	r5, #12
 800940c:	2d00      	cmp	r5, #0
 800940e:	4606      	mov	r6, r0
 8009410:	db01      	blt.n	8009416 <_malloc_r+0x1a>
 8009412:	42a9      	cmp	r1, r5
 8009414:	d903      	bls.n	800941e <_malloc_r+0x22>
 8009416:	230c      	movs	r3, #12
 8009418:	6033      	str	r3, [r6, #0]
 800941a:	2000      	movs	r0, #0
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	f000 f87d 	bl	800951c <__malloc_lock>
 8009422:	4a21      	ldr	r2, [pc, #132]	; (80094a8 <_malloc_r+0xac>)
 8009424:	6814      	ldr	r4, [r2, #0]
 8009426:	4621      	mov	r1, r4
 8009428:	b991      	cbnz	r1, 8009450 <_malloc_r+0x54>
 800942a:	4c20      	ldr	r4, [pc, #128]	; (80094ac <_malloc_r+0xb0>)
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	b91b      	cbnz	r3, 8009438 <_malloc_r+0x3c>
 8009430:	4630      	mov	r0, r6
 8009432:	f000 f863 	bl	80094fc <_sbrk_r>
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	4629      	mov	r1, r5
 800943a:	4630      	mov	r0, r6
 800943c:	f000 f85e 	bl	80094fc <_sbrk_r>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d124      	bne.n	800948e <_malloc_r+0x92>
 8009444:	230c      	movs	r3, #12
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f868 	bl	800951e <__malloc_unlock>
 800944e:	e7e4      	b.n	800941a <_malloc_r+0x1e>
 8009450:	680b      	ldr	r3, [r1, #0]
 8009452:	1b5b      	subs	r3, r3, r5
 8009454:	d418      	bmi.n	8009488 <_malloc_r+0x8c>
 8009456:	2b0b      	cmp	r3, #11
 8009458:	d90f      	bls.n	800947a <_malloc_r+0x7e>
 800945a:	600b      	str	r3, [r1, #0]
 800945c:	50cd      	str	r5, [r1, r3]
 800945e:	18cc      	adds	r4, r1, r3
 8009460:	4630      	mov	r0, r6
 8009462:	f000 f85c 	bl	800951e <__malloc_unlock>
 8009466:	f104 000b 	add.w	r0, r4, #11
 800946a:	1d23      	adds	r3, r4, #4
 800946c:	f020 0007 	bic.w	r0, r0, #7
 8009470:	1ac3      	subs	r3, r0, r3
 8009472:	d0d3      	beq.n	800941c <_malloc_r+0x20>
 8009474:	425a      	negs	r2, r3
 8009476:	50e2      	str	r2, [r4, r3]
 8009478:	e7d0      	b.n	800941c <_malloc_r+0x20>
 800947a:	428c      	cmp	r4, r1
 800947c:	684b      	ldr	r3, [r1, #4]
 800947e:	bf16      	itet	ne
 8009480:	6063      	strne	r3, [r4, #4]
 8009482:	6013      	streq	r3, [r2, #0]
 8009484:	460c      	movne	r4, r1
 8009486:	e7eb      	b.n	8009460 <_malloc_r+0x64>
 8009488:	460c      	mov	r4, r1
 800948a:	6849      	ldr	r1, [r1, #4]
 800948c:	e7cc      	b.n	8009428 <_malloc_r+0x2c>
 800948e:	1cc4      	adds	r4, r0, #3
 8009490:	f024 0403 	bic.w	r4, r4, #3
 8009494:	42a0      	cmp	r0, r4
 8009496:	d005      	beq.n	80094a4 <_malloc_r+0xa8>
 8009498:	1a21      	subs	r1, r4, r0
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f82e 	bl	80094fc <_sbrk_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d0cf      	beq.n	8009444 <_malloc_r+0x48>
 80094a4:	6025      	str	r5, [r4, #0]
 80094a6:	e7db      	b.n	8009460 <_malloc_r+0x64>
 80094a8:	20000198 	.word	0x20000198
 80094ac:	2000019c 	.word	0x2000019c

080094b0 <_realloc_r>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	4607      	mov	r7, r0
 80094b4:	4614      	mov	r4, r2
 80094b6:	460e      	mov	r6, r1
 80094b8:	b921      	cbnz	r1, 80094c4 <_realloc_r+0x14>
 80094ba:	4611      	mov	r1, r2
 80094bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094c0:	f7ff bf9c 	b.w	80093fc <_malloc_r>
 80094c4:	b922      	cbnz	r2, 80094d0 <_realloc_r+0x20>
 80094c6:	f7ff ff4b 	bl	8009360 <_free_r>
 80094ca:	4625      	mov	r5, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d0:	f000 f826 	bl	8009520 <_malloc_usable_size_r>
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d20f      	bcs.n	80094f8 <_realloc_r+0x48>
 80094d8:	4621      	mov	r1, r4
 80094da:	4638      	mov	r0, r7
 80094dc:	f7ff ff8e 	bl	80093fc <_malloc_r>
 80094e0:	4605      	mov	r5, r0
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d0f2      	beq.n	80094cc <_realloc_r+0x1c>
 80094e6:	4631      	mov	r1, r6
 80094e8:	4622      	mov	r2, r4
 80094ea:	f7ff ff15 	bl	8009318 <memcpy>
 80094ee:	4631      	mov	r1, r6
 80094f0:	4638      	mov	r0, r7
 80094f2:	f7ff ff35 	bl	8009360 <_free_r>
 80094f6:	e7e9      	b.n	80094cc <_realloc_r+0x1c>
 80094f8:	4635      	mov	r5, r6
 80094fa:	e7e7      	b.n	80094cc <_realloc_r+0x1c>

080094fc <_sbrk_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4c06      	ldr	r4, [pc, #24]	; (8009518 <_sbrk_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4605      	mov	r5, r0
 8009504:	4608      	mov	r0, r1
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	f7ff f9ba 	bl	8008880 <_sbrk>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_sbrk_r+0x1a>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	b103      	cbz	r3, 8009516 <_sbrk_r+0x1a>
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20000b28 	.word	0x20000b28

0800951c <__malloc_lock>:
 800951c:	4770      	bx	lr

0800951e <__malloc_unlock>:
 800951e:	4770      	bx	lr

08009520 <_malloc_usable_size_r>:
 8009520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009524:	1f18      	subs	r0, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfbc      	itt	lt
 800952a:	580b      	ldrlt	r3, [r1, r0]
 800952c:	18c0      	addlt	r0, r0, r3
 800952e:	4770      	bx	lr

08009530 <_init>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr

0800953c <_fini>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	bf00      	nop
 8009540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009542:	bc08      	pop	{r3}
 8009544:	469e      	mov	lr, r3
 8009546:	4770      	bx	lr
